// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Hyeu249/noname-ent-schema/ent/goods"
	"github.com/Hyeu249/noname-ent-schema/ent/imageofuser"
	"github.com/Hyeu249/noname-ent-schema/ent/itemhasowner"
	"github.com/Hyeu249/noname-ent-schema/ent/predicate"
	"github.com/Hyeu249/noname-ent-schema/ent/productquote"
	"github.com/Hyeu249/noname-ent-schema/ent/user"
	"github.com/google/uuid"
)

// ProductQuoteUpdate is the builder for updating ProductQuote entities.
type ProductQuoteUpdate struct {
	config
	hooks    []Hook
	mutation *ProductQuoteMutation
}

// Where appends a list predicates to the ProductQuoteUpdate builder.
func (pqu *ProductQuoteUpdate) Where(ps ...predicate.ProductQuote) *ProductQuoteUpdate {
	pqu.mutation.Where(ps...)
	return pqu
}

// SetUpdateTime sets the "update_time" field.
func (pqu *ProductQuoteUpdate) SetUpdateTime(t time.Time) *ProductQuoteUpdate {
	pqu.mutation.SetUpdateTime(t)
	return pqu
}

// SetDeletedAt sets the "deleted_at" field.
func (pqu *ProductQuoteUpdate) SetDeletedAt(t time.Time) *ProductQuoteUpdate {
	pqu.mutation.SetDeletedAt(t)
	return pqu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pqu *ProductQuoteUpdate) SetNillableDeletedAt(t *time.Time) *ProductQuoteUpdate {
	if t != nil {
		pqu.SetDeletedAt(*t)
	}
	return pqu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pqu *ProductQuoteUpdate) ClearDeletedAt() *ProductQuoteUpdate {
	pqu.mutation.ClearDeletedAt()
	return pqu
}

// SetPrice sets the "price" field.
func (pqu *ProductQuoteUpdate) SetPrice(i int) *ProductQuoteUpdate {
	pqu.mutation.ResetPrice()
	pqu.mutation.SetPrice(i)
	return pqu
}

// AddPrice adds i to the "price" field.
func (pqu *ProductQuoteUpdate) AddPrice(i int) *ProductQuoteUpdate {
	pqu.mutation.AddPrice(i)
	return pqu
}

// SetIsActive sets the "is_active" field.
func (pqu *ProductQuoteUpdate) SetIsActive(b bool) *ProductQuoteUpdate {
	pqu.mutation.SetIsActive(b)
	return pqu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (pqu *ProductQuoteUpdate) SetNillableIsActive(b *bool) *ProductQuoteUpdate {
	if b != nil {
		pqu.SetIsActive(*b)
	}
	return pqu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (pqu *ProductQuoteUpdate) SetUserID(id uuid.UUID) *ProductQuoteUpdate {
	pqu.mutation.SetUserID(id)
	return pqu
}

// SetUser sets the "user" edge to the User entity.
func (pqu *ProductQuoteUpdate) SetUser(u *User) *ProductQuoteUpdate {
	return pqu.SetUserID(u.ID)
}

// SetGoodsID sets the "goods" edge to the Goods entity by ID.
func (pqu *ProductQuoteUpdate) SetGoodsID(id uuid.UUID) *ProductQuoteUpdate {
	pqu.mutation.SetGoodsID(id)
	return pqu
}

// SetGoods sets the "goods" edge to the Goods entity.
func (pqu *ProductQuoteUpdate) SetGoods(g *Goods) *ProductQuoteUpdate {
	return pqu.SetGoodsID(g.ID)
}

// SetImageOfUserID sets the "image_of_user" edge to the ImageOfUser entity by ID.
func (pqu *ProductQuoteUpdate) SetImageOfUserID(id uuid.UUID) *ProductQuoteUpdate {
	pqu.mutation.SetImageOfUserID(id)
	return pqu
}

// SetImageOfUser sets the "image_of_user" edge to the ImageOfUser entity.
func (pqu *ProductQuoteUpdate) SetImageOfUser(i *ImageOfUser) *ProductQuoteUpdate {
	return pqu.SetImageOfUserID(i.ID)
}

// AddItemHasOwnerIDs adds the "item_has_owner" edge to the ItemHasOwner entity by IDs.
func (pqu *ProductQuoteUpdate) AddItemHasOwnerIDs(ids ...uuid.UUID) *ProductQuoteUpdate {
	pqu.mutation.AddItemHasOwnerIDs(ids...)
	return pqu
}

// AddItemHasOwner adds the "item_has_owner" edges to the ItemHasOwner entity.
func (pqu *ProductQuoteUpdate) AddItemHasOwner(i ...*ItemHasOwner) *ProductQuoteUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return pqu.AddItemHasOwnerIDs(ids...)
}

// Mutation returns the ProductQuoteMutation object of the builder.
func (pqu *ProductQuoteUpdate) Mutation() *ProductQuoteMutation {
	return pqu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (pqu *ProductQuoteUpdate) ClearUser() *ProductQuoteUpdate {
	pqu.mutation.ClearUser()
	return pqu
}

// ClearGoods clears the "goods" edge to the Goods entity.
func (pqu *ProductQuoteUpdate) ClearGoods() *ProductQuoteUpdate {
	pqu.mutation.ClearGoods()
	return pqu
}

// ClearImageOfUser clears the "image_of_user" edge to the ImageOfUser entity.
func (pqu *ProductQuoteUpdate) ClearImageOfUser() *ProductQuoteUpdate {
	pqu.mutation.ClearImageOfUser()
	return pqu
}

// ClearItemHasOwner clears all "item_has_owner" edges to the ItemHasOwner entity.
func (pqu *ProductQuoteUpdate) ClearItemHasOwner() *ProductQuoteUpdate {
	pqu.mutation.ClearItemHasOwner()
	return pqu
}

// RemoveItemHasOwnerIDs removes the "item_has_owner" edge to ItemHasOwner entities by IDs.
func (pqu *ProductQuoteUpdate) RemoveItemHasOwnerIDs(ids ...uuid.UUID) *ProductQuoteUpdate {
	pqu.mutation.RemoveItemHasOwnerIDs(ids...)
	return pqu
}

// RemoveItemHasOwner removes "item_has_owner" edges to ItemHasOwner entities.
func (pqu *ProductQuoteUpdate) RemoveItemHasOwner(i ...*ItemHasOwner) *ProductQuoteUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return pqu.RemoveItemHasOwnerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pqu *ProductQuoteUpdate) Save(ctx context.Context) (int, error) {
	pqu.defaults()
	return withHooks[int, ProductQuoteMutation](ctx, pqu.sqlSave, pqu.mutation, pqu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pqu *ProductQuoteUpdate) SaveX(ctx context.Context) int {
	affected, err := pqu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pqu *ProductQuoteUpdate) Exec(ctx context.Context) error {
	_, err := pqu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pqu *ProductQuoteUpdate) ExecX(ctx context.Context) {
	if err := pqu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pqu *ProductQuoteUpdate) defaults() {
	if _, ok := pqu.mutation.UpdateTime(); !ok {
		v := productquote.UpdateDefaultUpdateTime()
		pqu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pqu *ProductQuoteUpdate) check() error {
	if _, ok := pqu.mutation.UserID(); pqu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ProductQuote.user"`)
	}
	if _, ok := pqu.mutation.GoodsID(); pqu.mutation.GoodsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ProductQuote.goods"`)
	}
	if _, ok := pqu.mutation.ImageOfUserID(); pqu.mutation.ImageOfUserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ProductQuote.image_of_user"`)
	}
	return nil
}

func (pqu *ProductQuoteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pqu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productquote.Table,
			Columns: productquote.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: productquote.FieldID,
			},
		},
	}
	if ps := pqu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pqu.mutation.UpdateTime(); ok {
		_spec.SetField(productquote.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := pqu.mutation.DeletedAt(); ok {
		_spec.SetField(productquote.FieldDeletedAt, field.TypeTime, value)
	}
	if pqu.mutation.DeletedAtCleared() {
		_spec.ClearField(productquote.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := pqu.mutation.Price(); ok {
		_spec.SetField(productquote.FieldPrice, field.TypeInt, value)
	}
	if value, ok := pqu.mutation.AddedPrice(); ok {
		_spec.AddField(productquote.FieldPrice, field.TypeInt, value)
	}
	if value, ok := pqu.mutation.IsActive(); ok {
		_spec.SetField(productquote.FieldIsActive, field.TypeBool, value)
	}
	if pqu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   productquote.UserTable,
			Columns: []string{productquote.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pqu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   productquote.UserTable,
			Columns: []string{productquote.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pqu.mutation.GoodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   productquote.GoodsTable,
			Columns: []string{productquote.GoodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: goods.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pqu.mutation.GoodsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   productquote.GoodsTable,
			Columns: []string{productquote.GoodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: goods.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pqu.mutation.ImageOfUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   productquote.ImageOfUserTable,
			Columns: []string{productquote.ImageOfUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: imageofuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pqu.mutation.ImageOfUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   productquote.ImageOfUserTable,
			Columns: []string{productquote.ImageOfUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: imageofuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pqu.mutation.ItemHasOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   productquote.ItemHasOwnerTable,
			Columns: []string{productquote.ItemHasOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: itemhasowner.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pqu.mutation.RemovedItemHasOwnerIDs(); len(nodes) > 0 && !pqu.mutation.ItemHasOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   productquote.ItemHasOwnerTable,
			Columns: []string{productquote.ItemHasOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: itemhasowner.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pqu.mutation.ItemHasOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   productquote.ItemHasOwnerTable,
			Columns: []string{productquote.ItemHasOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: itemhasowner.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pqu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productquote.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pqu.mutation.done = true
	return n, nil
}

// ProductQuoteUpdateOne is the builder for updating a single ProductQuote entity.
type ProductQuoteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductQuoteMutation
}

// SetUpdateTime sets the "update_time" field.
func (pquo *ProductQuoteUpdateOne) SetUpdateTime(t time.Time) *ProductQuoteUpdateOne {
	pquo.mutation.SetUpdateTime(t)
	return pquo
}

// SetDeletedAt sets the "deleted_at" field.
func (pquo *ProductQuoteUpdateOne) SetDeletedAt(t time.Time) *ProductQuoteUpdateOne {
	pquo.mutation.SetDeletedAt(t)
	return pquo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pquo *ProductQuoteUpdateOne) SetNillableDeletedAt(t *time.Time) *ProductQuoteUpdateOne {
	if t != nil {
		pquo.SetDeletedAt(*t)
	}
	return pquo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pquo *ProductQuoteUpdateOne) ClearDeletedAt() *ProductQuoteUpdateOne {
	pquo.mutation.ClearDeletedAt()
	return pquo
}

// SetPrice sets the "price" field.
func (pquo *ProductQuoteUpdateOne) SetPrice(i int) *ProductQuoteUpdateOne {
	pquo.mutation.ResetPrice()
	pquo.mutation.SetPrice(i)
	return pquo
}

// AddPrice adds i to the "price" field.
func (pquo *ProductQuoteUpdateOne) AddPrice(i int) *ProductQuoteUpdateOne {
	pquo.mutation.AddPrice(i)
	return pquo
}

// SetIsActive sets the "is_active" field.
func (pquo *ProductQuoteUpdateOne) SetIsActive(b bool) *ProductQuoteUpdateOne {
	pquo.mutation.SetIsActive(b)
	return pquo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (pquo *ProductQuoteUpdateOne) SetNillableIsActive(b *bool) *ProductQuoteUpdateOne {
	if b != nil {
		pquo.SetIsActive(*b)
	}
	return pquo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (pquo *ProductQuoteUpdateOne) SetUserID(id uuid.UUID) *ProductQuoteUpdateOne {
	pquo.mutation.SetUserID(id)
	return pquo
}

// SetUser sets the "user" edge to the User entity.
func (pquo *ProductQuoteUpdateOne) SetUser(u *User) *ProductQuoteUpdateOne {
	return pquo.SetUserID(u.ID)
}

// SetGoodsID sets the "goods" edge to the Goods entity by ID.
func (pquo *ProductQuoteUpdateOne) SetGoodsID(id uuid.UUID) *ProductQuoteUpdateOne {
	pquo.mutation.SetGoodsID(id)
	return pquo
}

// SetGoods sets the "goods" edge to the Goods entity.
func (pquo *ProductQuoteUpdateOne) SetGoods(g *Goods) *ProductQuoteUpdateOne {
	return pquo.SetGoodsID(g.ID)
}

// SetImageOfUserID sets the "image_of_user" edge to the ImageOfUser entity by ID.
func (pquo *ProductQuoteUpdateOne) SetImageOfUserID(id uuid.UUID) *ProductQuoteUpdateOne {
	pquo.mutation.SetImageOfUserID(id)
	return pquo
}

// SetImageOfUser sets the "image_of_user" edge to the ImageOfUser entity.
func (pquo *ProductQuoteUpdateOne) SetImageOfUser(i *ImageOfUser) *ProductQuoteUpdateOne {
	return pquo.SetImageOfUserID(i.ID)
}

// AddItemHasOwnerIDs adds the "item_has_owner" edge to the ItemHasOwner entity by IDs.
func (pquo *ProductQuoteUpdateOne) AddItemHasOwnerIDs(ids ...uuid.UUID) *ProductQuoteUpdateOne {
	pquo.mutation.AddItemHasOwnerIDs(ids...)
	return pquo
}

// AddItemHasOwner adds the "item_has_owner" edges to the ItemHasOwner entity.
func (pquo *ProductQuoteUpdateOne) AddItemHasOwner(i ...*ItemHasOwner) *ProductQuoteUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return pquo.AddItemHasOwnerIDs(ids...)
}

// Mutation returns the ProductQuoteMutation object of the builder.
func (pquo *ProductQuoteUpdateOne) Mutation() *ProductQuoteMutation {
	return pquo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (pquo *ProductQuoteUpdateOne) ClearUser() *ProductQuoteUpdateOne {
	pquo.mutation.ClearUser()
	return pquo
}

// ClearGoods clears the "goods" edge to the Goods entity.
func (pquo *ProductQuoteUpdateOne) ClearGoods() *ProductQuoteUpdateOne {
	pquo.mutation.ClearGoods()
	return pquo
}

// ClearImageOfUser clears the "image_of_user" edge to the ImageOfUser entity.
func (pquo *ProductQuoteUpdateOne) ClearImageOfUser() *ProductQuoteUpdateOne {
	pquo.mutation.ClearImageOfUser()
	return pquo
}

// ClearItemHasOwner clears all "item_has_owner" edges to the ItemHasOwner entity.
func (pquo *ProductQuoteUpdateOne) ClearItemHasOwner() *ProductQuoteUpdateOne {
	pquo.mutation.ClearItemHasOwner()
	return pquo
}

// RemoveItemHasOwnerIDs removes the "item_has_owner" edge to ItemHasOwner entities by IDs.
func (pquo *ProductQuoteUpdateOne) RemoveItemHasOwnerIDs(ids ...uuid.UUID) *ProductQuoteUpdateOne {
	pquo.mutation.RemoveItemHasOwnerIDs(ids...)
	return pquo
}

// RemoveItemHasOwner removes "item_has_owner" edges to ItemHasOwner entities.
func (pquo *ProductQuoteUpdateOne) RemoveItemHasOwner(i ...*ItemHasOwner) *ProductQuoteUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return pquo.RemoveItemHasOwnerIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pquo *ProductQuoteUpdateOne) Select(field string, fields ...string) *ProductQuoteUpdateOne {
	pquo.fields = append([]string{field}, fields...)
	return pquo
}

// Save executes the query and returns the updated ProductQuote entity.
func (pquo *ProductQuoteUpdateOne) Save(ctx context.Context) (*ProductQuote, error) {
	pquo.defaults()
	return withHooks[*ProductQuote, ProductQuoteMutation](ctx, pquo.sqlSave, pquo.mutation, pquo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pquo *ProductQuoteUpdateOne) SaveX(ctx context.Context) *ProductQuote {
	node, err := pquo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pquo *ProductQuoteUpdateOne) Exec(ctx context.Context) error {
	_, err := pquo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pquo *ProductQuoteUpdateOne) ExecX(ctx context.Context) {
	if err := pquo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pquo *ProductQuoteUpdateOne) defaults() {
	if _, ok := pquo.mutation.UpdateTime(); !ok {
		v := productquote.UpdateDefaultUpdateTime()
		pquo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pquo *ProductQuoteUpdateOne) check() error {
	if _, ok := pquo.mutation.UserID(); pquo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ProductQuote.user"`)
	}
	if _, ok := pquo.mutation.GoodsID(); pquo.mutation.GoodsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ProductQuote.goods"`)
	}
	if _, ok := pquo.mutation.ImageOfUserID(); pquo.mutation.ImageOfUserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ProductQuote.image_of_user"`)
	}
	return nil
}

func (pquo *ProductQuoteUpdateOne) sqlSave(ctx context.Context) (_node *ProductQuote, err error) {
	if err := pquo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productquote.Table,
			Columns: productquote.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: productquote.FieldID,
			},
		},
	}
	id, ok := pquo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProductQuote.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pquo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productquote.FieldID)
		for _, f := range fields {
			if !productquote.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != productquote.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pquo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pquo.mutation.UpdateTime(); ok {
		_spec.SetField(productquote.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := pquo.mutation.DeletedAt(); ok {
		_spec.SetField(productquote.FieldDeletedAt, field.TypeTime, value)
	}
	if pquo.mutation.DeletedAtCleared() {
		_spec.ClearField(productquote.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := pquo.mutation.Price(); ok {
		_spec.SetField(productquote.FieldPrice, field.TypeInt, value)
	}
	if value, ok := pquo.mutation.AddedPrice(); ok {
		_spec.AddField(productquote.FieldPrice, field.TypeInt, value)
	}
	if value, ok := pquo.mutation.IsActive(); ok {
		_spec.SetField(productquote.FieldIsActive, field.TypeBool, value)
	}
	if pquo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   productquote.UserTable,
			Columns: []string{productquote.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pquo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   productquote.UserTable,
			Columns: []string{productquote.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pquo.mutation.GoodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   productquote.GoodsTable,
			Columns: []string{productquote.GoodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: goods.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pquo.mutation.GoodsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   productquote.GoodsTable,
			Columns: []string{productquote.GoodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: goods.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pquo.mutation.ImageOfUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   productquote.ImageOfUserTable,
			Columns: []string{productquote.ImageOfUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: imageofuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pquo.mutation.ImageOfUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   productquote.ImageOfUserTable,
			Columns: []string{productquote.ImageOfUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: imageofuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pquo.mutation.ItemHasOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   productquote.ItemHasOwnerTable,
			Columns: []string{productquote.ItemHasOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: itemhasowner.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pquo.mutation.RemovedItemHasOwnerIDs(); len(nodes) > 0 && !pquo.mutation.ItemHasOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   productquote.ItemHasOwnerTable,
			Columns: []string{productquote.ItemHasOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: itemhasowner.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pquo.mutation.ItemHasOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   productquote.ItemHasOwnerTable,
			Columns: []string{productquote.ItemHasOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: itemhasowner.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProductQuote{config: pquo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pquo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productquote.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pquo.mutation.done = true
	return _node, nil
}
