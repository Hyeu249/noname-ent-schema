// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Hyeu249/noname-ent-schema/ent/goods"
	"github.com/Hyeu249/noname-ent-schema/ent/typeofgoods"
	"github.com/google/uuid"
)

// TypeOfGoods is the model entity for the TypeOfGoods schema.
type TypeOfGoods struct {
	config `json:"-"`
	// ID of the ent.
	// UUID of Type Of Goods (UUID Loại mặt hàng)
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Name of Goods (Tên của mặt hàng)
	Name string `json:"name,omitempty"`
	// Type of Goods (Loại mặt hàng)
	Type string `json:"type,omitempty"`
	// Description of Type of Goods (Mô tả loại mặt hàng)
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TypeOfGoodsQuery when eager-loading is set.
	Edges               TypeOfGoodsEdges `json:"edges"`
	goods_type_of_goods *uuid.UUID
}

// TypeOfGoodsEdges holds the relations/edges for other nodes in the graph.
type TypeOfGoodsEdges struct {
	// Goods holds the value of the goods edge.
	Goods *Goods `json:"goods,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// GoodsOrErr returns the Goods value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TypeOfGoodsEdges) GoodsOrErr() (*Goods, error) {
	if e.loadedTypes[0] {
		if e.Goods == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: goods.Label}
		}
		return e.Goods, nil
	}
	return nil, &NotLoadedError{edge: "goods"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TypeOfGoods) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case typeofgoods.FieldName, typeofgoods.FieldType, typeofgoods.FieldDescription:
			values[i] = new(sql.NullString)
		case typeofgoods.FieldCreateTime, typeofgoods.FieldUpdateTime, typeofgoods.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case typeofgoods.FieldID:
			values[i] = new(uuid.UUID)
		case typeofgoods.ForeignKeys[0]: // goods_type_of_goods
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type TypeOfGoods", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TypeOfGoods fields.
func (tog *TypeOfGoods) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case typeofgoods.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				tog.ID = *value
			}
		case typeofgoods.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				tog.CreateTime = value.Time
			}
		case typeofgoods.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				tog.UpdateTime = value.Time
			}
		case typeofgoods.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				tog.DeletedAt = new(time.Time)
				*tog.DeletedAt = value.Time
			}
		case typeofgoods.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				tog.Name = value.String
			}
		case typeofgoods.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				tog.Type = value.String
			}
		case typeofgoods.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				tog.Description = value.String
			}
		case typeofgoods.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field goods_type_of_goods", values[i])
			} else if value.Valid {
				tog.goods_type_of_goods = new(uuid.UUID)
				*tog.goods_type_of_goods = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryGoods queries the "goods" edge of the TypeOfGoods entity.
func (tog *TypeOfGoods) QueryGoods() *GoodsQuery {
	return NewTypeOfGoodsClient(tog.config).QueryGoods(tog)
}

// Update returns a builder for updating this TypeOfGoods.
// Note that you need to call TypeOfGoods.Unwrap() before calling this method if this TypeOfGoods
// was returned from a transaction, and the transaction was committed or rolled back.
func (tog *TypeOfGoods) Update() *TypeOfGoodsUpdateOne {
	return NewTypeOfGoodsClient(tog.config).UpdateOne(tog)
}

// Unwrap unwraps the TypeOfGoods entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tog *TypeOfGoods) Unwrap() *TypeOfGoods {
	_tx, ok := tog.config.driver.(*txDriver)
	if !ok {
		panic("ent: TypeOfGoods is not a transactional entity")
	}
	tog.config.driver = _tx.drv
	return tog
}

// String implements the fmt.Stringer.
func (tog *TypeOfGoods) String() string {
	var builder strings.Builder
	builder.WriteString("TypeOfGoods(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tog.ID))
	builder.WriteString("create_time=")
	builder.WriteString(tog.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(tog.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := tog.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(tog.Name)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(tog.Type)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(tog.Description)
	builder.WriteByte(')')
	return builder.String()
}

// TypeOfGoodsSlice is a parsable slice of TypeOfGoods.
type TypeOfGoodsSlice []*TypeOfGoods

func (tog TypeOfGoodsSlice) config(cfg config) {
	for _i := range tog {
		tog[_i].config = cfg
	}
}
