// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/Hyeu249/noname-ent-schema/ent/goods"
	"github.com/Hyeu249/noname-ent-schema/ent/image"
	"github.com/Hyeu249/noname-ent-schema/ent/imageofuser"
	"github.com/Hyeu249/noname-ent-schema/ent/itemhasowner"
	"github.com/Hyeu249/noname-ent-schema/ent/order"
	"github.com/Hyeu249/noname-ent-schema/ent/predicate"
	"github.com/Hyeu249/noname-ent-schema/ent/productquote"
	"github.com/Hyeu249/noname-ent-schema/ent/typeofgoods"
	"github.com/Hyeu249/noname-ent-schema/ent/user"
	"github.com/google/uuid"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeGoods        = "Goods"
	TypeImage        = "Image"
	TypeImageOfUser  = "ImageOfUser"
	TypeItemHasOwner = "ItemHasOwner"
	TypeOrder        = "Order"
	TypeProductQuote = "ProductQuote"
	TypeTypeOfGoods  = "TypeOfGoods"
	TypeUser         = "User"
)

// GoodsMutation represents an operation that mutates the Goods nodes in the graph.
type GoodsMutation struct {
	config
	op                   Op
	typ                  string
	id                   *uuid.UUID
	create_time          *time.Time
	update_time          *time.Time
	deleted_at           *time.Time
	description          *string
	clearedFields        map[string]struct{}
	type_of_goods        *uuid.UUID
	clearedtype_of_goods bool
	image_of_user        *uuid.UUID
	clearedimage_of_user bool
	product_quote        map[uuid.UUID]struct{}
	removedproduct_quote map[uuid.UUID]struct{}
	clearedproduct_quote bool
	done                 bool
	oldValue             func(context.Context) (*Goods, error)
	predicates           []predicate.Goods
}

var _ ent.Mutation = (*GoodsMutation)(nil)

// goodsOption allows management of the mutation configuration using functional options.
type goodsOption func(*GoodsMutation)

// newGoodsMutation creates new mutation for the Goods entity.
func newGoodsMutation(c config, op Op, opts ...goodsOption) *GoodsMutation {
	m := &GoodsMutation{
		config:        c,
		op:            op,
		typ:           TypeGoods,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGoodsID sets the ID field of the mutation.
func withGoodsID(id uuid.UUID) goodsOption {
	return func(m *GoodsMutation) {
		var (
			err   error
			once  sync.Once
			value *Goods
		)
		m.oldValue = func(ctx context.Context) (*Goods, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Goods.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGoods sets the old Goods of the mutation.
func withGoods(node *Goods) goodsOption {
	return func(m *GoodsMutation) {
		m.oldValue = func(context.Context) (*Goods, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GoodsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GoodsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Goods entities.
func (m *GoodsMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GoodsMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GoodsMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Goods.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *GoodsMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *GoodsMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Goods entity.
// If the Goods object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodsMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *GoodsMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *GoodsMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *GoodsMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Goods entity.
// If the Goods object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodsMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *GoodsMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *GoodsMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *GoodsMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Goods entity.
// If the Goods object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodsMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *GoodsMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[goods.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *GoodsMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[goods.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *GoodsMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, goods.FieldDeletedAt)
}

// SetDescription sets the "description" field.
func (m *GoodsMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *GoodsMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Goods entity.
// If the Goods object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodsMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *GoodsMutation) ResetDescription() {
	m.description = nil
}

// SetTypeOfGoodsID sets the "type_of_goods" edge to the TypeOfGoods entity by id.
func (m *GoodsMutation) SetTypeOfGoodsID(id uuid.UUID) {
	m.type_of_goods = &id
}

// ClearTypeOfGoods clears the "type_of_goods" edge to the TypeOfGoods entity.
func (m *GoodsMutation) ClearTypeOfGoods() {
	m.clearedtype_of_goods = true
}

// TypeOfGoodsCleared reports if the "type_of_goods" edge to the TypeOfGoods entity was cleared.
func (m *GoodsMutation) TypeOfGoodsCleared() bool {
	return m.clearedtype_of_goods
}

// TypeOfGoodsID returns the "type_of_goods" edge ID in the mutation.
func (m *GoodsMutation) TypeOfGoodsID() (id uuid.UUID, exists bool) {
	if m.type_of_goods != nil {
		return *m.type_of_goods, true
	}
	return
}

// TypeOfGoodsIDs returns the "type_of_goods" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TypeOfGoodsID instead. It exists only for internal usage by the builders.
func (m *GoodsMutation) TypeOfGoodsIDs() (ids []uuid.UUID) {
	if id := m.type_of_goods; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTypeOfGoods resets all changes to the "type_of_goods" edge.
func (m *GoodsMutation) ResetTypeOfGoods() {
	m.type_of_goods = nil
	m.clearedtype_of_goods = false
}

// SetImageOfUserID sets the "image_of_user" edge to the ImageOfUser entity by id.
func (m *GoodsMutation) SetImageOfUserID(id uuid.UUID) {
	m.image_of_user = &id
}

// ClearImageOfUser clears the "image_of_user" edge to the ImageOfUser entity.
func (m *GoodsMutation) ClearImageOfUser() {
	m.clearedimage_of_user = true
}

// ImageOfUserCleared reports if the "image_of_user" edge to the ImageOfUser entity was cleared.
func (m *GoodsMutation) ImageOfUserCleared() bool {
	return m.clearedimage_of_user
}

// ImageOfUserID returns the "image_of_user" edge ID in the mutation.
func (m *GoodsMutation) ImageOfUserID() (id uuid.UUID, exists bool) {
	if m.image_of_user != nil {
		return *m.image_of_user, true
	}
	return
}

// ImageOfUserIDs returns the "image_of_user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ImageOfUserID instead. It exists only for internal usage by the builders.
func (m *GoodsMutation) ImageOfUserIDs() (ids []uuid.UUID) {
	if id := m.image_of_user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetImageOfUser resets all changes to the "image_of_user" edge.
func (m *GoodsMutation) ResetImageOfUser() {
	m.image_of_user = nil
	m.clearedimage_of_user = false
}

// AddProductQuoteIDs adds the "product_quote" edge to the ProductQuote entity by ids.
func (m *GoodsMutation) AddProductQuoteIDs(ids ...uuid.UUID) {
	if m.product_quote == nil {
		m.product_quote = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.product_quote[ids[i]] = struct{}{}
	}
}

// ClearProductQuote clears the "product_quote" edge to the ProductQuote entity.
func (m *GoodsMutation) ClearProductQuote() {
	m.clearedproduct_quote = true
}

// ProductQuoteCleared reports if the "product_quote" edge to the ProductQuote entity was cleared.
func (m *GoodsMutation) ProductQuoteCleared() bool {
	return m.clearedproduct_quote
}

// RemoveProductQuoteIDs removes the "product_quote" edge to the ProductQuote entity by IDs.
func (m *GoodsMutation) RemoveProductQuoteIDs(ids ...uuid.UUID) {
	if m.removedproduct_quote == nil {
		m.removedproduct_quote = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.product_quote, ids[i])
		m.removedproduct_quote[ids[i]] = struct{}{}
	}
}

// RemovedProductQuote returns the removed IDs of the "product_quote" edge to the ProductQuote entity.
func (m *GoodsMutation) RemovedProductQuoteIDs() (ids []uuid.UUID) {
	for id := range m.removedproduct_quote {
		ids = append(ids, id)
	}
	return
}

// ProductQuoteIDs returns the "product_quote" edge IDs in the mutation.
func (m *GoodsMutation) ProductQuoteIDs() (ids []uuid.UUID) {
	for id := range m.product_quote {
		ids = append(ids, id)
	}
	return
}

// ResetProductQuote resets all changes to the "product_quote" edge.
func (m *GoodsMutation) ResetProductQuote() {
	m.product_quote = nil
	m.clearedproduct_quote = false
	m.removedproduct_quote = nil
}

// Where appends a list predicates to the GoodsMutation builder.
func (m *GoodsMutation) Where(ps ...predicate.Goods) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GoodsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GoodsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Goods, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GoodsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GoodsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Goods).
func (m *GoodsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GoodsMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.create_time != nil {
		fields = append(fields, goods.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, goods.FieldUpdateTime)
	}
	if m.deleted_at != nil {
		fields = append(fields, goods.FieldDeletedAt)
	}
	if m.description != nil {
		fields = append(fields, goods.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GoodsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case goods.FieldCreateTime:
		return m.CreateTime()
	case goods.FieldUpdateTime:
		return m.UpdateTime()
	case goods.FieldDeletedAt:
		return m.DeletedAt()
	case goods.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GoodsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case goods.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case goods.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case goods.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case goods.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown Goods field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GoodsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case goods.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case goods.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case goods.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case goods.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown Goods field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GoodsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GoodsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GoodsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Goods numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GoodsMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(goods.FieldDeletedAt) {
		fields = append(fields, goods.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GoodsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GoodsMutation) ClearField(name string) error {
	switch name {
	case goods.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Goods nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GoodsMutation) ResetField(name string) error {
	switch name {
	case goods.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case goods.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case goods.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case goods.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown Goods field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GoodsMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.type_of_goods != nil {
		edges = append(edges, goods.EdgeTypeOfGoods)
	}
	if m.image_of_user != nil {
		edges = append(edges, goods.EdgeImageOfUser)
	}
	if m.product_quote != nil {
		edges = append(edges, goods.EdgeProductQuote)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GoodsMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case goods.EdgeTypeOfGoods:
		if id := m.type_of_goods; id != nil {
			return []ent.Value{*id}
		}
	case goods.EdgeImageOfUser:
		if id := m.image_of_user; id != nil {
			return []ent.Value{*id}
		}
	case goods.EdgeProductQuote:
		ids := make([]ent.Value, 0, len(m.product_quote))
		for id := range m.product_quote {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GoodsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedproduct_quote != nil {
		edges = append(edges, goods.EdgeProductQuote)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GoodsMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case goods.EdgeProductQuote:
		ids := make([]ent.Value, 0, len(m.removedproduct_quote))
		for id := range m.removedproduct_quote {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GoodsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedtype_of_goods {
		edges = append(edges, goods.EdgeTypeOfGoods)
	}
	if m.clearedimage_of_user {
		edges = append(edges, goods.EdgeImageOfUser)
	}
	if m.clearedproduct_quote {
		edges = append(edges, goods.EdgeProductQuote)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GoodsMutation) EdgeCleared(name string) bool {
	switch name {
	case goods.EdgeTypeOfGoods:
		return m.clearedtype_of_goods
	case goods.EdgeImageOfUser:
		return m.clearedimage_of_user
	case goods.EdgeProductQuote:
		return m.clearedproduct_quote
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GoodsMutation) ClearEdge(name string) error {
	switch name {
	case goods.EdgeTypeOfGoods:
		m.ClearTypeOfGoods()
		return nil
	case goods.EdgeImageOfUser:
		m.ClearImageOfUser()
		return nil
	}
	return fmt.Errorf("unknown Goods unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GoodsMutation) ResetEdge(name string) error {
	switch name {
	case goods.EdgeTypeOfGoods:
		m.ResetTypeOfGoods()
		return nil
	case goods.EdgeImageOfUser:
		m.ResetImageOfUser()
		return nil
	case goods.EdgeProductQuote:
		m.ResetProductQuote()
		return nil
	}
	return fmt.Errorf("unknown Goods edge %s", name)
}

// ImageMutation represents an operation that mutates the Image nodes in the graph.
type ImageMutation struct {
	config
	op                   Op
	typ                  string
	id                   *uuid.UUID
	create_time          *time.Time
	update_time          *time.Time
	deleted_at           *time.Time
	name                 *string
	file_extension       *string
	location             *string
	description          *string
	clearedFields        map[string]struct{}
	image_of_user        *uuid.UUID
	clearedimage_of_user bool
	done                 bool
	oldValue             func(context.Context) (*Image, error)
	predicates           []predicate.Image
}

var _ ent.Mutation = (*ImageMutation)(nil)

// imageOption allows management of the mutation configuration using functional options.
type imageOption func(*ImageMutation)

// newImageMutation creates new mutation for the Image entity.
func newImageMutation(c config, op Op, opts ...imageOption) *ImageMutation {
	m := &ImageMutation{
		config:        c,
		op:            op,
		typ:           TypeImage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withImageID sets the ID field of the mutation.
func withImageID(id uuid.UUID) imageOption {
	return func(m *ImageMutation) {
		var (
			err   error
			once  sync.Once
			value *Image
		)
		m.oldValue = func(ctx context.Context) (*Image, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Image.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withImage sets the old Image of the mutation.
func withImage(node *Image) imageOption {
	return func(m *ImageMutation) {
		m.oldValue = func(context.Context) (*Image, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ImageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ImageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Image entities.
func (m *ImageMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ImageMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ImageMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Image.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *ImageMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ImageMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Image entity.
// If the Image object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImageMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ImageMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *ImageMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *ImageMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Image entity.
// If the Image object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImageMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *ImageMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *ImageMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *ImageMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Image entity.
// If the Image object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImageMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *ImageMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[image.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *ImageMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[image.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *ImageMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, image.FieldDeletedAt)
}

// SetName sets the "name" field.
func (m *ImageMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ImageMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Image entity.
// If the Image object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImageMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *ImageMutation) ClearName() {
	m.name = nil
	m.clearedFields[image.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *ImageMutation) NameCleared() bool {
	_, ok := m.clearedFields[image.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *ImageMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, image.FieldName)
}

// SetFileExtension sets the "file_extension" field.
func (m *ImageMutation) SetFileExtension(s string) {
	m.file_extension = &s
}

// FileExtension returns the value of the "file_extension" field in the mutation.
func (m *ImageMutation) FileExtension() (r string, exists bool) {
	v := m.file_extension
	if v == nil {
		return
	}
	return *v, true
}

// OldFileExtension returns the old "file_extension" field's value of the Image entity.
// If the Image object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImageMutation) OldFileExtension(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileExtension is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileExtension requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileExtension: %w", err)
	}
	return oldValue.FileExtension, nil
}

// ResetFileExtension resets all changes to the "file_extension" field.
func (m *ImageMutation) ResetFileExtension() {
	m.file_extension = nil
}

// SetLocation sets the "location" field.
func (m *ImageMutation) SetLocation(s string) {
	m.location = &s
}

// Location returns the value of the "location" field in the mutation.
func (m *ImageMutation) Location() (r string, exists bool) {
	v := m.location
	if v == nil {
		return
	}
	return *v, true
}

// OldLocation returns the old "location" field's value of the Image entity.
// If the Image object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImageMutation) OldLocation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocation: %w", err)
	}
	return oldValue.Location, nil
}

// ResetLocation resets all changes to the "location" field.
func (m *ImageMutation) ResetLocation() {
	m.location = nil
}

// SetDescription sets the "description" field.
func (m *ImageMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ImageMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Image entity.
// If the Image object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImageMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *ImageMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[image.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *ImageMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[image.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *ImageMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, image.FieldDescription)
}

// SetImageOfUserID sets the "image_of_user" edge to the ImageOfUser entity by id.
func (m *ImageMutation) SetImageOfUserID(id uuid.UUID) {
	m.image_of_user = &id
}

// ClearImageOfUser clears the "image_of_user" edge to the ImageOfUser entity.
func (m *ImageMutation) ClearImageOfUser() {
	m.clearedimage_of_user = true
}

// ImageOfUserCleared reports if the "image_of_user" edge to the ImageOfUser entity was cleared.
func (m *ImageMutation) ImageOfUserCleared() bool {
	return m.clearedimage_of_user
}

// ImageOfUserID returns the "image_of_user" edge ID in the mutation.
func (m *ImageMutation) ImageOfUserID() (id uuid.UUID, exists bool) {
	if m.image_of_user != nil {
		return *m.image_of_user, true
	}
	return
}

// ImageOfUserIDs returns the "image_of_user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ImageOfUserID instead. It exists only for internal usage by the builders.
func (m *ImageMutation) ImageOfUserIDs() (ids []uuid.UUID) {
	if id := m.image_of_user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetImageOfUser resets all changes to the "image_of_user" edge.
func (m *ImageMutation) ResetImageOfUser() {
	m.image_of_user = nil
	m.clearedimage_of_user = false
}

// Where appends a list predicates to the ImageMutation builder.
func (m *ImageMutation) Where(ps ...predicate.Image) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ImageMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ImageMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Image, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ImageMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ImageMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Image).
func (m *ImageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ImageMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.create_time != nil {
		fields = append(fields, image.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, image.FieldUpdateTime)
	}
	if m.deleted_at != nil {
		fields = append(fields, image.FieldDeletedAt)
	}
	if m.name != nil {
		fields = append(fields, image.FieldName)
	}
	if m.file_extension != nil {
		fields = append(fields, image.FieldFileExtension)
	}
	if m.location != nil {
		fields = append(fields, image.FieldLocation)
	}
	if m.description != nil {
		fields = append(fields, image.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ImageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case image.FieldCreateTime:
		return m.CreateTime()
	case image.FieldUpdateTime:
		return m.UpdateTime()
	case image.FieldDeletedAt:
		return m.DeletedAt()
	case image.FieldName:
		return m.Name()
	case image.FieldFileExtension:
		return m.FileExtension()
	case image.FieldLocation:
		return m.Location()
	case image.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ImageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case image.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case image.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case image.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case image.FieldName:
		return m.OldName(ctx)
	case image.FieldFileExtension:
		return m.OldFileExtension(ctx)
	case image.FieldLocation:
		return m.OldLocation(ctx)
	case image.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown Image field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ImageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case image.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case image.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case image.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case image.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case image.FieldFileExtension:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileExtension(v)
		return nil
	case image.FieldLocation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocation(v)
		return nil
	case image.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown Image field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ImageMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ImageMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ImageMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Image numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ImageMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(image.FieldDeletedAt) {
		fields = append(fields, image.FieldDeletedAt)
	}
	if m.FieldCleared(image.FieldName) {
		fields = append(fields, image.FieldName)
	}
	if m.FieldCleared(image.FieldDescription) {
		fields = append(fields, image.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ImageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ImageMutation) ClearField(name string) error {
	switch name {
	case image.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case image.FieldName:
		m.ClearName()
		return nil
	case image.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown Image nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ImageMutation) ResetField(name string) error {
	switch name {
	case image.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case image.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case image.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case image.FieldName:
		m.ResetName()
		return nil
	case image.FieldFileExtension:
		m.ResetFileExtension()
		return nil
	case image.FieldLocation:
		m.ResetLocation()
		return nil
	case image.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown Image field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ImageMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.image_of_user != nil {
		edges = append(edges, image.EdgeImageOfUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ImageMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case image.EdgeImageOfUser:
		if id := m.image_of_user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ImageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ImageMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ImageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedimage_of_user {
		edges = append(edges, image.EdgeImageOfUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ImageMutation) EdgeCleared(name string) bool {
	switch name {
	case image.EdgeImageOfUser:
		return m.clearedimage_of_user
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ImageMutation) ClearEdge(name string) error {
	switch name {
	case image.EdgeImageOfUser:
		m.ClearImageOfUser()
		return nil
	}
	return fmt.Errorf("unknown Image unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ImageMutation) ResetEdge(name string) error {
	switch name {
	case image.EdgeImageOfUser:
		m.ResetImageOfUser()
		return nil
	}
	return fmt.Errorf("unknown Image edge %s", name)
}

// ImageOfUserMutation represents an operation that mutates the ImageOfUser nodes in the graph.
type ImageOfUserMutation struct {
	config
	op                   Op
	typ                  string
	id                   *uuid.UUID
	create_time          *time.Time
	update_time          *time.Time
	deleted_at           *time.Time
	royalty              *float32
	addroyalty           *float32
	is_image_published   *bool
	clearedFields        map[string]struct{}
	image                *uuid.UUID
	clearedimage         bool
	user                 *uuid.UUID
	cleareduser          bool
	goods                *uuid.UUID
	clearedgoods         bool
	product_quote        map[uuid.UUID]struct{}
	removedproduct_quote map[uuid.UUID]struct{}
	clearedproduct_quote bool
	done                 bool
	oldValue             func(context.Context) (*ImageOfUser, error)
	predicates           []predicate.ImageOfUser
}

var _ ent.Mutation = (*ImageOfUserMutation)(nil)

// imageofuserOption allows management of the mutation configuration using functional options.
type imageofuserOption func(*ImageOfUserMutation)

// newImageOfUserMutation creates new mutation for the ImageOfUser entity.
func newImageOfUserMutation(c config, op Op, opts ...imageofuserOption) *ImageOfUserMutation {
	m := &ImageOfUserMutation{
		config:        c,
		op:            op,
		typ:           TypeImageOfUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withImageOfUserID sets the ID field of the mutation.
func withImageOfUserID(id uuid.UUID) imageofuserOption {
	return func(m *ImageOfUserMutation) {
		var (
			err   error
			once  sync.Once
			value *ImageOfUser
		)
		m.oldValue = func(ctx context.Context) (*ImageOfUser, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ImageOfUser.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withImageOfUser sets the old ImageOfUser of the mutation.
func withImageOfUser(node *ImageOfUser) imageofuserOption {
	return func(m *ImageOfUserMutation) {
		m.oldValue = func(context.Context) (*ImageOfUser, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ImageOfUserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ImageOfUserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ImageOfUser entities.
func (m *ImageOfUserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ImageOfUserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ImageOfUserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ImageOfUser.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *ImageOfUserMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ImageOfUserMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the ImageOfUser entity.
// If the ImageOfUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImageOfUserMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ImageOfUserMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *ImageOfUserMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *ImageOfUserMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the ImageOfUser entity.
// If the ImageOfUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImageOfUserMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *ImageOfUserMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *ImageOfUserMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *ImageOfUserMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the ImageOfUser entity.
// If the ImageOfUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImageOfUserMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *ImageOfUserMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[imageofuser.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *ImageOfUserMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[imageofuser.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *ImageOfUserMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, imageofuser.FieldDeletedAt)
}

// SetRoyalty sets the "royalty" field.
func (m *ImageOfUserMutation) SetRoyalty(f float32) {
	m.royalty = &f
	m.addroyalty = nil
}

// Royalty returns the value of the "royalty" field in the mutation.
func (m *ImageOfUserMutation) Royalty() (r float32, exists bool) {
	v := m.royalty
	if v == nil {
		return
	}
	return *v, true
}

// OldRoyalty returns the old "royalty" field's value of the ImageOfUser entity.
// If the ImageOfUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImageOfUserMutation) OldRoyalty(ctx context.Context) (v float32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRoyalty is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRoyalty requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoyalty: %w", err)
	}
	return oldValue.Royalty, nil
}

// AddRoyalty adds f to the "royalty" field.
func (m *ImageOfUserMutation) AddRoyalty(f float32) {
	if m.addroyalty != nil {
		*m.addroyalty += f
	} else {
		m.addroyalty = &f
	}
}

// AddedRoyalty returns the value that was added to the "royalty" field in this mutation.
func (m *ImageOfUserMutation) AddedRoyalty() (r float32, exists bool) {
	v := m.addroyalty
	if v == nil {
		return
	}
	return *v, true
}

// ClearRoyalty clears the value of the "royalty" field.
func (m *ImageOfUserMutation) ClearRoyalty() {
	m.royalty = nil
	m.addroyalty = nil
	m.clearedFields[imageofuser.FieldRoyalty] = struct{}{}
}

// RoyaltyCleared returns if the "royalty" field was cleared in this mutation.
func (m *ImageOfUserMutation) RoyaltyCleared() bool {
	_, ok := m.clearedFields[imageofuser.FieldRoyalty]
	return ok
}

// ResetRoyalty resets all changes to the "royalty" field.
func (m *ImageOfUserMutation) ResetRoyalty() {
	m.royalty = nil
	m.addroyalty = nil
	delete(m.clearedFields, imageofuser.FieldRoyalty)
}

// SetIsImagePublished sets the "is_image_published" field.
func (m *ImageOfUserMutation) SetIsImagePublished(b bool) {
	m.is_image_published = &b
}

// IsImagePublished returns the value of the "is_image_published" field in the mutation.
func (m *ImageOfUserMutation) IsImagePublished() (r bool, exists bool) {
	v := m.is_image_published
	if v == nil {
		return
	}
	return *v, true
}

// OldIsImagePublished returns the old "is_image_published" field's value of the ImageOfUser entity.
// If the ImageOfUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImageOfUserMutation) OldIsImagePublished(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsImagePublished is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsImagePublished requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsImagePublished: %w", err)
	}
	return oldValue.IsImagePublished, nil
}

// ResetIsImagePublished resets all changes to the "is_image_published" field.
func (m *ImageOfUserMutation) ResetIsImagePublished() {
	m.is_image_published = nil
}

// SetImageID sets the "image" edge to the Image entity by id.
func (m *ImageOfUserMutation) SetImageID(id uuid.UUID) {
	m.image = &id
}

// ClearImage clears the "image" edge to the Image entity.
func (m *ImageOfUserMutation) ClearImage() {
	m.clearedimage = true
}

// ImageCleared reports if the "image" edge to the Image entity was cleared.
func (m *ImageOfUserMutation) ImageCleared() bool {
	return m.clearedimage
}

// ImageID returns the "image" edge ID in the mutation.
func (m *ImageOfUserMutation) ImageID() (id uuid.UUID, exists bool) {
	if m.image != nil {
		return *m.image, true
	}
	return
}

// ImageIDs returns the "image" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ImageID instead. It exists only for internal usage by the builders.
func (m *ImageOfUserMutation) ImageIDs() (ids []uuid.UUID) {
	if id := m.image; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetImage resets all changes to the "image" edge.
func (m *ImageOfUserMutation) ResetImage() {
	m.image = nil
	m.clearedimage = false
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *ImageOfUserMutation) SetUserID(id uuid.UUID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *ImageOfUserMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *ImageOfUserMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *ImageOfUserMutation) UserID() (id uuid.UUID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *ImageOfUserMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *ImageOfUserMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// SetGoodsID sets the "goods" edge to the Goods entity by id.
func (m *ImageOfUserMutation) SetGoodsID(id uuid.UUID) {
	m.goods = &id
}

// ClearGoods clears the "goods" edge to the Goods entity.
func (m *ImageOfUserMutation) ClearGoods() {
	m.clearedgoods = true
}

// GoodsCleared reports if the "goods" edge to the Goods entity was cleared.
func (m *ImageOfUserMutation) GoodsCleared() bool {
	return m.clearedgoods
}

// GoodsID returns the "goods" edge ID in the mutation.
func (m *ImageOfUserMutation) GoodsID() (id uuid.UUID, exists bool) {
	if m.goods != nil {
		return *m.goods, true
	}
	return
}

// GoodsIDs returns the "goods" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GoodsID instead. It exists only for internal usage by the builders.
func (m *ImageOfUserMutation) GoodsIDs() (ids []uuid.UUID) {
	if id := m.goods; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGoods resets all changes to the "goods" edge.
func (m *ImageOfUserMutation) ResetGoods() {
	m.goods = nil
	m.clearedgoods = false
}

// AddProductQuoteIDs adds the "product_quote" edge to the ProductQuote entity by ids.
func (m *ImageOfUserMutation) AddProductQuoteIDs(ids ...uuid.UUID) {
	if m.product_quote == nil {
		m.product_quote = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.product_quote[ids[i]] = struct{}{}
	}
}

// ClearProductQuote clears the "product_quote" edge to the ProductQuote entity.
func (m *ImageOfUserMutation) ClearProductQuote() {
	m.clearedproduct_quote = true
}

// ProductQuoteCleared reports if the "product_quote" edge to the ProductQuote entity was cleared.
func (m *ImageOfUserMutation) ProductQuoteCleared() bool {
	return m.clearedproduct_quote
}

// RemoveProductQuoteIDs removes the "product_quote" edge to the ProductQuote entity by IDs.
func (m *ImageOfUserMutation) RemoveProductQuoteIDs(ids ...uuid.UUID) {
	if m.removedproduct_quote == nil {
		m.removedproduct_quote = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.product_quote, ids[i])
		m.removedproduct_quote[ids[i]] = struct{}{}
	}
}

// RemovedProductQuote returns the removed IDs of the "product_quote" edge to the ProductQuote entity.
func (m *ImageOfUserMutation) RemovedProductQuoteIDs() (ids []uuid.UUID) {
	for id := range m.removedproduct_quote {
		ids = append(ids, id)
	}
	return
}

// ProductQuoteIDs returns the "product_quote" edge IDs in the mutation.
func (m *ImageOfUserMutation) ProductQuoteIDs() (ids []uuid.UUID) {
	for id := range m.product_quote {
		ids = append(ids, id)
	}
	return
}

// ResetProductQuote resets all changes to the "product_quote" edge.
func (m *ImageOfUserMutation) ResetProductQuote() {
	m.product_quote = nil
	m.clearedproduct_quote = false
	m.removedproduct_quote = nil
}

// Where appends a list predicates to the ImageOfUserMutation builder.
func (m *ImageOfUserMutation) Where(ps ...predicate.ImageOfUser) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ImageOfUserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ImageOfUserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ImageOfUser, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ImageOfUserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ImageOfUserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ImageOfUser).
func (m *ImageOfUserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ImageOfUserMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.create_time != nil {
		fields = append(fields, imageofuser.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, imageofuser.FieldUpdateTime)
	}
	if m.deleted_at != nil {
		fields = append(fields, imageofuser.FieldDeletedAt)
	}
	if m.royalty != nil {
		fields = append(fields, imageofuser.FieldRoyalty)
	}
	if m.is_image_published != nil {
		fields = append(fields, imageofuser.FieldIsImagePublished)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ImageOfUserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case imageofuser.FieldCreateTime:
		return m.CreateTime()
	case imageofuser.FieldUpdateTime:
		return m.UpdateTime()
	case imageofuser.FieldDeletedAt:
		return m.DeletedAt()
	case imageofuser.FieldRoyalty:
		return m.Royalty()
	case imageofuser.FieldIsImagePublished:
		return m.IsImagePublished()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ImageOfUserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case imageofuser.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case imageofuser.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case imageofuser.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case imageofuser.FieldRoyalty:
		return m.OldRoyalty(ctx)
	case imageofuser.FieldIsImagePublished:
		return m.OldIsImagePublished(ctx)
	}
	return nil, fmt.Errorf("unknown ImageOfUser field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ImageOfUserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case imageofuser.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case imageofuser.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case imageofuser.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case imageofuser.FieldRoyalty:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoyalty(v)
		return nil
	case imageofuser.FieldIsImagePublished:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsImagePublished(v)
		return nil
	}
	return fmt.Errorf("unknown ImageOfUser field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ImageOfUserMutation) AddedFields() []string {
	var fields []string
	if m.addroyalty != nil {
		fields = append(fields, imageofuser.FieldRoyalty)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ImageOfUserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case imageofuser.FieldRoyalty:
		return m.AddedRoyalty()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ImageOfUserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case imageofuser.FieldRoyalty:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRoyalty(v)
		return nil
	}
	return fmt.Errorf("unknown ImageOfUser numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ImageOfUserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(imageofuser.FieldDeletedAt) {
		fields = append(fields, imageofuser.FieldDeletedAt)
	}
	if m.FieldCleared(imageofuser.FieldRoyalty) {
		fields = append(fields, imageofuser.FieldRoyalty)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ImageOfUserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ImageOfUserMutation) ClearField(name string) error {
	switch name {
	case imageofuser.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case imageofuser.FieldRoyalty:
		m.ClearRoyalty()
		return nil
	}
	return fmt.Errorf("unknown ImageOfUser nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ImageOfUserMutation) ResetField(name string) error {
	switch name {
	case imageofuser.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case imageofuser.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case imageofuser.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case imageofuser.FieldRoyalty:
		m.ResetRoyalty()
		return nil
	case imageofuser.FieldIsImagePublished:
		m.ResetIsImagePublished()
		return nil
	}
	return fmt.Errorf("unknown ImageOfUser field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ImageOfUserMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.image != nil {
		edges = append(edges, imageofuser.EdgeImage)
	}
	if m.user != nil {
		edges = append(edges, imageofuser.EdgeUser)
	}
	if m.goods != nil {
		edges = append(edges, imageofuser.EdgeGoods)
	}
	if m.product_quote != nil {
		edges = append(edges, imageofuser.EdgeProductQuote)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ImageOfUserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case imageofuser.EdgeImage:
		if id := m.image; id != nil {
			return []ent.Value{*id}
		}
	case imageofuser.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case imageofuser.EdgeGoods:
		if id := m.goods; id != nil {
			return []ent.Value{*id}
		}
	case imageofuser.EdgeProductQuote:
		ids := make([]ent.Value, 0, len(m.product_quote))
		for id := range m.product_quote {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ImageOfUserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedproduct_quote != nil {
		edges = append(edges, imageofuser.EdgeProductQuote)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ImageOfUserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case imageofuser.EdgeProductQuote:
		ids := make([]ent.Value, 0, len(m.removedproduct_quote))
		for id := range m.removedproduct_quote {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ImageOfUserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedimage {
		edges = append(edges, imageofuser.EdgeImage)
	}
	if m.cleareduser {
		edges = append(edges, imageofuser.EdgeUser)
	}
	if m.clearedgoods {
		edges = append(edges, imageofuser.EdgeGoods)
	}
	if m.clearedproduct_quote {
		edges = append(edges, imageofuser.EdgeProductQuote)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ImageOfUserMutation) EdgeCleared(name string) bool {
	switch name {
	case imageofuser.EdgeImage:
		return m.clearedimage
	case imageofuser.EdgeUser:
		return m.cleareduser
	case imageofuser.EdgeGoods:
		return m.clearedgoods
	case imageofuser.EdgeProductQuote:
		return m.clearedproduct_quote
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ImageOfUserMutation) ClearEdge(name string) error {
	switch name {
	case imageofuser.EdgeImage:
		m.ClearImage()
		return nil
	case imageofuser.EdgeUser:
		m.ClearUser()
		return nil
	case imageofuser.EdgeGoods:
		m.ClearGoods()
		return nil
	}
	return fmt.Errorf("unknown ImageOfUser unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ImageOfUserMutation) ResetEdge(name string) error {
	switch name {
	case imageofuser.EdgeImage:
		m.ResetImage()
		return nil
	case imageofuser.EdgeUser:
		m.ResetUser()
		return nil
	case imageofuser.EdgeGoods:
		m.ResetGoods()
		return nil
	case imageofuser.EdgeProductQuote:
		m.ResetProductQuote()
		return nil
	}
	return fmt.Errorf("unknown ImageOfUser edge %s", name)
}

// ItemHasOwnerMutation represents an operation that mutates the ItemHasOwner nodes in the graph.
type ItemHasOwnerMutation struct {
	config
	op                   Op
	typ                  string
	id                   *uuid.UUID
	create_time          *time.Time
	update_time          *time.Time
	deleted_at           *time.Time
	clearedFields        map[string]struct{}
	product_quote        *uuid.UUID
	clearedproduct_quote bool
	user                 *uuid.UUID
	cleareduser          bool
	_order               map[uuid.UUID]struct{}
	removed_order        map[uuid.UUID]struct{}
	cleared_order        bool
	done                 bool
	oldValue             func(context.Context) (*ItemHasOwner, error)
	predicates           []predicate.ItemHasOwner
}

var _ ent.Mutation = (*ItemHasOwnerMutation)(nil)

// itemhasownerOption allows management of the mutation configuration using functional options.
type itemhasownerOption func(*ItemHasOwnerMutation)

// newItemHasOwnerMutation creates new mutation for the ItemHasOwner entity.
func newItemHasOwnerMutation(c config, op Op, opts ...itemhasownerOption) *ItemHasOwnerMutation {
	m := &ItemHasOwnerMutation{
		config:        c,
		op:            op,
		typ:           TypeItemHasOwner,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withItemHasOwnerID sets the ID field of the mutation.
func withItemHasOwnerID(id uuid.UUID) itemhasownerOption {
	return func(m *ItemHasOwnerMutation) {
		var (
			err   error
			once  sync.Once
			value *ItemHasOwner
		)
		m.oldValue = func(ctx context.Context) (*ItemHasOwner, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ItemHasOwner.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withItemHasOwner sets the old ItemHasOwner of the mutation.
func withItemHasOwner(node *ItemHasOwner) itemhasownerOption {
	return func(m *ItemHasOwnerMutation) {
		m.oldValue = func(context.Context) (*ItemHasOwner, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ItemHasOwnerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ItemHasOwnerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ItemHasOwner entities.
func (m *ItemHasOwnerMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ItemHasOwnerMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ItemHasOwnerMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ItemHasOwner.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *ItemHasOwnerMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ItemHasOwnerMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the ItemHasOwner entity.
// If the ItemHasOwner object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemHasOwnerMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ItemHasOwnerMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *ItemHasOwnerMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *ItemHasOwnerMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the ItemHasOwner entity.
// If the ItemHasOwner object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemHasOwnerMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *ItemHasOwnerMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *ItemHasOwnerMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *ItemHasOwnerMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the ItemHasOwner entity.
// If the ItemHasOwner object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemHasOwnerMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *ItemHasOwnerMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[itemhasowner.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *ItemHasOwnerMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[itemhasowner.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *ItemHasOwnerMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, itemhasowner.FieldDeletedAt)
}

// SetProductQuoteID sets the "product_quote" edge to the ProductQuote entity by id.
func (m *ItemHasOwnerMutation) SetProductQuoteID(id uuid.UUID) {
	m.product_quote = &id
}

// ClearProductQuote clears the "product_quote" edge to the ProductQuote entity.
func (m *ItemHasOwnerMutation) ClearProductQuote() {
	m.clearedproduct_quote = true
}

// ProductQuoteCleared reports if the "product_quote" edge to the ProductQuote entity was cleared.
func (m *ItemHasOwnerMutation) ProductQuoteCleared() bool {
	return m.clearedproduct_quote
}

// ProductQuoteID returns the "product_quote" edge ID in the mutation.
func (m *ItemHasOwnerMutation) ProductQuoteID() (id uuid.UUID, exists bool) {
	if m.product_quote != nil {
		return *m.product_quote, true
	}
	return
}

// ProductQuoteIDs returns the "product_quote" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProductQuoteID instead. It exists only for internal usage by the builders.
func (m *ItemHasOwnerMutation) ProductQuoteIDs() (ids []uuid.UUID) {
	if id := m.product_quote; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProductQuote resets all changes to the "product_quote" edge.
func (m *ItemHasOwnerMutation) ResetProductQuote() {
	m.product_quote = nil
	m.clearedproduct_quote = false
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *ItemHasOwnerMutation) SetUserID(id uuid.UUID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *ItemHasOwnerMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *ItemHasOwnerMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *ItemHasOwnerMutation) UserID() (id uuid.UUID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *ItemHasOwnerMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *ItemHasOwnerMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// AddOrderIDs adds the "order" edge to the Order entity by ids.
func (m *ItemHasOwnerMutation) AddOrderIDs(ids ...uuid.UUID) {
	if m._order == nil {
		m._order = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m._order[ids[i]] = struct{}{}
	}
}

// ClearOrder clears the "order" edge to the Order entity.
func (m *ItemHasOwnerMutation) ClearOrder() {
	m.cleared_order = true
}

// OrderCleared reports if the "order" edge to the Order entity was cleared.
func (m *ItemHasOwnerMutation) OrderCleared() bool {
	return m.cleared_order
}

// RemoveOrderIDs removes the "order" edge to the Order entity by IDs.
func (m *ItemHasOwnerMutation) RemoveOrderIDs(ids ...uuid.UUID) {
	if m.removed_order == nil {
		m.removed_order = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m._order, ids[i])
		m.removed_order[ids[i]] = struct{}{}
	}
}

// RemovedOrder returns the removed IDs of the "order" edge to the Order entity.
func (m *ItemHasOwnerMutation) RemovedOrderIDs() (ids []uuid.UUID) {
	for id := range m.removed_order {
		ids = append(ids, id)
	}
	return
}

// OrderIDs returns the "order" edge IDs in the mutation.
func (m *ItemHasOwnerMutation) OrderIDs() (ids []uuid.UUID) {
	for id := range m._order {
		ids = append(ids, id)
	}
	return
}

// ResetOrder resets all changes to the "order" edge.
func (m *ItemHasOwnerMutation) ResetOrder() {
	m._order = nil
	m.cleared_order = false
	m.removed_order = nil
}

// Where appends a list predicates to the ItemHasOwnerMutation builder.
func (m *ItemHasOwnerMutation) Where(ps ...predicate.ItemHasOwner) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ItemHasOwnerMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ItemHasOwnerMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ItemHasOwner, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ItemHasOwnerMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ItemHasOwnerMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ItemHasOwner).
func (m *ItemHasOwnerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ItemHasOwnerMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.create_time != nil {
		fields = append(fields, itemhasowner.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, itemhasowner.FieldUpdateTime)
	}
	if m.deleted_at != nil {
		fields = append(fields, itemhasowner.FieldDeletedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ItemHasOwnerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case itemhasowner.FieldCreateTime:
		return m.CreateTime()
	case itemhasowner.FieldUpdateTime:
		return m.UpdateTime()
	case itemhasowner.FieldDeletedAt:
		return m.DeletedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ItemHasOwnerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case itemhasowner.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case itemhasowner.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case itemhasowner.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	}
	return nil, fmt.Errorf("unknown ItemHasOwner field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ItemHasOwnerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case itemhasowner.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case itemhasowner.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case itemhasowner.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown ItemHasOwner field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ItemHasOwnerMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ItemHasOwnerMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ItemHasOwnerMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ItemHasOwner numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ItemHasOwnerMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(itemhasowner.FieldDeletedAt) {
		fields = append(fields, itemhasowner.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ItemHasOwnerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ItemHasOwnerMutation) ClearField(name string) error {
	switch name {
	case itemhasowner.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown ItemHasOwner nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ItemHasOwnerMutation) ResetField(name string) error {
	switch name {
	case itemhasowner.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case itemhasowner.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case itemhasowner.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown ItemHasOwner field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ItemHasOwnerMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.product_quote != nil {
		edges = append(edges, itemhasowner.EdgeProductQuote)
	}
	if m.user != nil {
		edges = append(edges, itemhasowner.EdgeUser)
	}
	if m._order != nil {
		edges = append(edges, itemhasowner.EdgeOrder)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ItemHasOwnerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case itemhasowner.EdgeProductQuote:
		if id := m.product_quote; id != nil {
			return []ent.Value{*id}
		}
	case itemhasowner.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case itemhasowner.EdgeOrder:
		ids := make([]ent.Value, 0, len(m._order))
		for id := range m._order {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ItemHasOwnerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removed_order != nil {
		edges = append(edges, itemhasowner.EdgeOrder)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ItemHasOwnerMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case itemhasowner.EdgeOrder:
		ids := make([]ent.Value, 0, len(m.removed_order))
		for id := range m.removed_order {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ItemHasOwnerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedproduct_quote {
		edges = append(edges, itemhasowner.EdgeProductQuote)
	}
	if m.cleareduser {
		edges = append(edges, itemhasowner.EdgeUser)
	}
	if m.cleared_order {
		edges = append(edges, itemhasowner.EdgeOrder)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ItemHasOwnerMutation) EdgeCleared(name string) bool {
	switch name {
	case itemhasowner.EdgeProductQuote:
		return m.clearedproduct_quote
	case itemhasowner.EdgeUser:
		return m.cleareduser
	case itemhasowner.EdgeOrder:
		return m.cleared_order
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ItemHasOwnerMutation) ClearEdge(name string) error {
	switch name {
	case itemhasowner.EdgeProductQuote:
		m.ClearProductQuote()
		return nil
	case itemhasowner.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown ItemHasOwner unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ItemHasOwnerMutation) ResetEdge(name string) error {
	switch name {
	case itemhasowner.EdgeProductQuote:
		m.ResetProductQuote()
		return nil
	case itemhasowner.EdgeUser:
		m.ResetUser()
		return nil
	case itemhasowner.EdgeOrder:
		m.ResetOrder()
		return nil
	}
	return fmt.Errorf("unknown ItemHasOwner edge %s", name)
}

// OrderMutation represents an operation that mutates the Order nodes in the graph.
type OrderMutation struct {
	config
	op                    Op
	typ                   string
	id                    *uuid.UUID
	create_time           *time.Time
	update_time           *time.Time
	deleted_at            *time.Time
	name                  *string
	address               *string
	phone                 *string
	email                 *string
	clearedFields         map[string]struct{}
	item_has_owner        *uuid.UUID
	cleareditem_has_owner bool
	done                  bool
	oldValue              func(context.Context) (*Order, error)
	predicates            []predicate.Order
}

var _ ent.Mutation = (*OrderMutation)(nil)

// orderOption allows management of the mutation configuration using functional options.
type orderOption func(*OrderMutation)

// newOrderMutation creates new mutation for the Order entity.
func newOrderMutation(c config, op Op, opts ...orderOption) *OrderMutation {
	m := &OrderMutation{
		config:        c,
		op:            op,
		typ:           TypeOrder,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrderID sets the ID field of the mutation.
func withOrderID(id uuid.UUID) orderOption {
	return func(m *OrderMutation) {
		var (
			err   error
			once  sync.Once
			value *Order
		)
		m.oldValue = func(ctx context.Context) (*Order, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Order.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrder sets the old Order of the mutation.
func withOrder(node *Order) orderOption {
	return func(m *OrderMutation) {
		m.oldValue = func(context.Context) (*Order, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Order entities.
func (m *OrderMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OrderMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OrderMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Order.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *OrderMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *OrderMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *OrderMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *OrderMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *OrderMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *OrderMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *OrderMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *OrderMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *OrderMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[order.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *OrderMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[order.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *OrderMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, order.FieldDeletedAt)
}

// SetName sets the "name" field.
func (m *OrderMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *OrderMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *OrderMutation) ResetName() {
	m.name = nil
}

// SetAddress sets the "address" field.
func (m *OrderMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *OrderMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *OrderMutation) ResetAddress() {
	m.address = nil
}

// SetPhone sets the "phone" field.
func (m *OrderMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *OrderMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ResetPhone resets all changes to the "phone" field.
func (m *OrderMutation) ResetPhone() {
	m.phone = nil
}

// SetEmail sets the "email" field.
func (m *OrderMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *OrderMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ClearEmail clears the value of the "email" field.
func (m *OrderMutation) ClearEmail() {
	m.email = nil
	m.clearedFields[order.FieldEmail] = struct{}{}
}

// EmailCleared returns if the "email" field was cleared in this mutation.
func (m *OrderMutation) EmailCleared() bool {
	_, ok := m.clearedFields[order.FieldEmail]
	return ok
}

// ResetEmail resets all changes to the "email" field.
func (m *OrderMutation) ResetEmail() {
	m.email = nil
	delete(m.clearedFields, order.FieldEmail)
}

// SetItemHasOwnerID sets the "item_has_owner" edge to the ItemHasOwner entity by id.
func (m *OrderMutation) SetItemHasOwnerID(id uuid.UUID) {
	m.item_has_owner = &id
}

// ClearItemHasOwner clears the "item_has_owner" edge to the ItemHasOwner entity.
func (m *OrderMutation) ClearItemHasOwner() {
	m.cleareditem_has_owner = true
}

// ItemHasOwnerCleared reports if the "item_has_owner" edge to the ItemHasOwner entity was cleared.
func (m *OrderMutation) ItemHasOwnerCleared() bool {
	return m.cleareditem_has_owner
}

// ItemHasOwnerID returns the "item_has_owner" edge ID in the mutation.
func (m *OrderMutation) ItemHasOwnerID() (id uuid.UUID, exists bool) {
	if m.item_has_owner != nil {
		return *m.item_has_owner, true
	}
	return
}

// ItemHasOwnerIDs returns the "item_has_owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ItemHasOwnerID instead. It exists only for internal usage by the builders.
func (m *OrderMutation) ItemHasOwnerIDs() (ids []uuid.UUID) {
	if id := m.item_has_owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetItemHasOwner resets all changes to the "item_has_owner" edge.
func (m *OrderMutation) ResetItemHasOwner() {
	m.item_has_owner = nil
	m.cleareditem_has_owner = false
}

// Where appends a list predicates to the OrderMutation builder.
func (m *OrderMutation) Where(ps ...predicate.Order) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the OrderMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *OrderMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Order, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *OrderMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *OrderMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Order).
func (m *OrderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrderMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.create_time != nil {
		fields = append(fields, order.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, order.FieldUpdateTime)
	}
	if m.deleted_at != nil {
		fields = append(fields, order.FieldDeletedAt)
	}
	if m.name != nil {
		fields = append(fields, order.FieldName)
	}
	if m.address != nil {
		fields = append(fields, order.FieldAddress)
	}
	if m.phone != nil {
		fields = append(fields, order.FieldPhone)
	}
	if m.email != nil {
		fields = append(fields, order.FieldEmail)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case order.FieldCreateTime:
		return m.CreateTime()
	case order.FieldUpdateTime:
		return m.UpdateTime()
	case order.FieldDeletedAt:
		return m.DeletedAt()
	case order.FieldName:
		return m.Name()
	case order.FieldAddress:
		return m.Address()
	case order.FieldPhone:
		return m.Phone()
	case order.FieldEmail:
		return m.Email()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case order.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case order.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case order.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case order.FieldName:
		return m.OldName(ctx)
	case order.FieldAddress:
		return m.OldAddress(ctx)
	case order.FieldPhone:
		return m.OldPhone(ctx)
	case order.FieldEmail:
		return m.OldEmail(ctx)
	}
	return nil, fmt.Errorf("unknown Order field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case order.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case order.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case order.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case order.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case order.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case order.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case order.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	}
	return fmt.Errorf("unknown Order field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrderMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrderMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Order numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrderMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(order.FieldDeletedAt) {
		fields = append(fields, order.FieldDeletedAt)
	}
	if m.FieldCleared(order.FieldEmail) {
		fields = append(fields, order.FieldEmail)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrderMutation) ClearField(name string) error {
	switch name {
	case order.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case order.FieldEmail:
		m.ClearEmail()
		return nil
	}
	return fmt.Errorf("unknown Order nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrderMutation) ResetField(name string) error {
	switch name {
	case order.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case order.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case order.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case order.FieldName:
		m.ResetName()
		return nil
	case order.FieldAddress:
		m.ResetAddress()
		return nil
	case order.FieldPhone:
		m.ResetPhone()
		return nil
	case order.FieldEmail:
		m.ResetEmail()
		return nil
	}
	return fmt.Errorf("unknown Order field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrderMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.item_has_owner != nil {
		edges = append(edges, order.EdgeItemHasOwner)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrderMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case order.EdgeItemHasOwner:
		if id := m.item_has_owner; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrderMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareditem_has_owner {
		edges = append(edges, order.EdgeItemHasOwner)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrderMutation) EdgeCleared(name string) bool {
	switch name {
	case order.EdgeItemHasOwner:
		return m.cleareditem_has_owner
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrderMutation) ClearEdge(name string) error {
	switch name {
	case order.EdgeItemHasOwner:
		m.ClearItemHasOwner()
		return nil
	}
	return fmt.Errorf("unknown Order unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrderMutation) ResetEdge(name string) error {
	switch name {
	case order.EdgeItemHasOwner:
		m.ResetItemHasOwner()
		return nil
	}
	return fmt.Errorf("unknown Order edge %s", name)
}

// ProductQuoteMutation represents an operation that mutates the ProductQuote nodes in the graph.
type ProductQuoteMutation struct {
	config
	op                    Op
	typ                   string
	id                    *uuid.UUID
	create_time           *time.Time
	update_time           *time.Time
	deleted_at            *time.Time
	price                 *int
	addprice              *int
	is_active             *bool
	clearedFields         map[string]struct{}
	user                  *uuid.UUID
	cleareduser           bool
	goods                 *uuid.UUID
	clearedgoods          bool
	image_of_user         *uuid.UUID
	clearedimage_of_user  bool
	item_has_owner        map[uuid.UUID]struct{}
	removeditem_has_owner map[uuid.UUID]struct{}
	cleareditem_has_owner bool
	done                  bool
	oldValue              func(context.Context) (*ProductQuote, error)
	predicates            []predicate.ProductQuote
}

var _ ent.Mutation = (*ProductQuoteMutation)(nil)

// productquoteOption allows management of the mutation configuration using functional options.
type productquoteOption func(*ProductQuoteMutation)

// newProductQuoteMutation creates new mutation for the ProductQuote entity.
func newProductQuoteMutation(c config, op Op, opts ...productquoteOption) *ProductQuoteMutation {
	m := &ProductQuoteMutation{
		config:        c,
		op:            op,
		typ:           TypeProductQuote,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProductQuoteID sets the ID field of the mutation.
func withProductQuoteID(id uuid.UUID) productquoteOption {
	return func(m *ProductQuoteMutation) {
		var (
			err   error
			once  sync.Once
			value *ProductQuote
		)
		m.oldValue = func(ctx context.Context) (*ProductQuote, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ProductQuote.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProductQuote sets the old ProductQuote of the mutation.
func withProductQuote(node *ProductQuote) productquoteOption {
	return func(m *ProductQuoteMutation) {
		m.oldValue = func(context.Context) (*ProductQuote, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProductQuoteMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProductQuoteMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ProductQuote entities.
func (m *ProductQuoteMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProductQuoteMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProductQuoteMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ProductQuote.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *ProductQuoteMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ProductQuoteMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the ProductQuote entity.
// If the ProductQuote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductQuoteMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ProductQuoteMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *ProductQuoteMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *ProductQuoteMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the ProductQuote entity.
// If the ProductQuote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductQuoteMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *ProductQuoteMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *ProductQuoteMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *ProductQuoteMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the ProductQuote entity.
// If the ProductQuote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductQuoteMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *ProductQuoteMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[productquote.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *ProductQuoteMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[productquote.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *ProductQuoteMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, productquote.FieldDeletedAt)
}

// SetPrice sets the "price" field.
func (m *ProductQuoteMutation) SetPrice(i int) {
	m.price = &i
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *ProductQuoteMutation) Price() (r int, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the ProductQuote entity.
// If the ProductQuote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductQuoteMutation) OldPrice(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds i to the "price" field.
func (m *ProductQuoteMutation) AddPrice(i int) {
	if m.addprice != nil {
		*m.addprice += i
	} else {
		m.addprice = &i
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *ProductQuoteMutation) AddedPrice() (r int, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "price" field.
func (m *ProductQuoteMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
}

// SetIsActive sets the "is_active" field.
func (m *ProductQuoteMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *ProductQuoteMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the ProductQuote entity.
// If the ProductQuote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductQuoteMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *ProductQuoteMutation) ResetIsActive() {
	m.is_active = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *ProductQuoteMutation) SetUserID(id uuid.UUID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *ProductQuoteMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *ProductQuoteMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *ProductQuoteMutation) UserID() (id uuid.UUID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *ProductQuoteMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *ProductQuoteMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// SetGoodsID sets the "goods" edge to the Goods entity by id.
func (m *ProductQuoteMutation) SetGoodsID(id uuid.UUID) {
	m.goods = &id
}

// ClearGoods clears the "goods" edge to the Goods entity.
func (m *ProductQuoteMutation) ClearGoods() {
	m.clearedgoods = true
}

// GoodsCleared reports if the "goods" edge to the Goods entity was cleared.
func (m *ProductQuoteMutation) GoodsCleared() bool {
	return m.clearedgoods
}

// GoodsID returns the "goods" edge ID in the mutation.
func (m *ProductQuoteMutation) GoodsID() (id uuid.UUID, exists bool) {
	if m.goods != nil {
		return *m.goods, true
	}
	return
}

// GoodsIDs returns the "goods" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GoodsID instead. It exists only for internal usage by the builders.
func (m *ProductQuoteMutation) GoodsIDs() (ids []uuid.UUID) {
	if id := m.goods; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGoods resets all changes to the "goods" edge.
func (m *ProductQuoteMutation) ResetGoods() {
	m.goods = nil
	m.clearedgoods = false
}

// SetImageOfUserID sets the "image_of_user" edge to the ImageOfUser entity by id.
func (m *ProductQuoteMutation) SetImageOfUserID(id uuid.UUID) {
	m.image_of_user = &id
}

// ClearImageOfUser clears the "image_of_user" edge to the ImageOfUser entity.
func (m *ProductQuoteMutation) ClearImageOfUser() {
	m.clearedimage_of_user = true
}

// ImageOfUserCleared reports if the "image_of_user" edge to the ImageOfUser entity was cleared.
func (m *ProductQuoteMutation) ImageOfUserCleared() bool {
	return m.clearedimage_of_user
}

// ImageOfUserID returns the "image_of_user" edge ID in the mutation.
func (m *ProductQuoteMutation) ImageOfUserID() (id uuid.UUID, exists bool) {
	if m.image_of_user != nil {
		return *m.image_of_user, true
	}
	return
}

// ImageOfUserIDs returns the "image_of_user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ImageOfUserID instead. It exists only for internal usage by the builders.
func (m *ProductQuoteMutation) ImageOfUserIDs() (ids []uuid.UUID) {
	if id := m.image_of_user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetImageOfUser resets all changes to the "image_of_user" edge.
func (m *ProductQuoteMutation) ResetImageOfUser() {
	m.image_of_user = nil
	m.clearedimage_of_user = false
}

// AddItemHasOwnerIDs adds the "item_has_owner" edge to the ItemHasOwner entity by ids.
func (m *ProductQuoteMutation) AddItemHasOwnerIDs(ids ...uuid.UUID) {
	if m.item_has_owner == nil {
		m.item_has_owner = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.item_has_owner[ids[i]] = struct{}{}
	}
}

// ClearItemHasOwner clears the "item_has_owner" edge to the ItemHasOwner entity.
func (m *ProductQuoteMutation) ClearItemHasOwner() {
	m.cleareditem_has_owner = true
}

// ItemHasOwnerCleared reports if the "item_has_owner" edge to the ItemHasOwner entity was cleared.
func (m *ProductQuoteMutation) ItemHasOwnerCleared() bool {
	return m.cleareditem_has_owner
}

// RemoveItemHasOwnerIDs removes the "item_has_owner" edge to the ItemHasOwner entity by IDs.
func (m *ProductQuoteMutation) RemoveItemHasOwnerIDs(ids ...uuid.UUID) {
	if m.removeditem_has_owner == nil {
		m.removeditem_has_owner = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.item_has_owner, ids[i])
		m.removeditem_has_owner[ids[i]] = struct{}{}
	}
}

// RemovedItemHasOwner returns the removed IDs of the "item_has_owner" edge to the ItemHasOwner entity.
func (m *ProductQuoteMutation) RemovedItemHasOwnerIDs() (ids []uuid.UUID) {
	for id := range m.removeditem_has_owner {
		ids = append(ids, id)
	}
	return
}

// ItemHasOwnerIDs returns the "item_has_owner" edge IDs in the mutation.
func (m *ProductQuoteMutation) ItemHasOwnerIDs() (ids []uuid.UUID) {
	for id := range m.item_has_owner {
		ids = append(ids, id)
	}
	return
}

// ResetItemHasOwner resets all changes to the "item_has_owner" edge.
func (m *ProductQuoteMutation) ResetItemHasOwner() {
	m.item_has_owner = nil
	m.cleareditem_has_owner = false
	m.removeditem_has_owner = nil
}

// Where appends a list predicates to the ProductQuoteMutation builder.
func (m *ProductQuoteMutation) Where(ps ...predicate.ProductQuote) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProductQuoteMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProductQuoteMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ProductQuote, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProductQuoteMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProductQuoteMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ProductQuote).
func (m *ProductQuoteMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProductQuoteMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.create_time != nil {
		fields = append(fields, productquote.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, productquote.FieldUpdateTime)
	}
	if m.deleted_at != nil {
		fields = append(fields, productquote.FieldDeletedAt)
	}
	if m.price != nil {
		fields = append(fields, productquote.FieldPrice)
	}
	if m.is_active != nil {
		fields = append(fields, productquote.FieldIsActive)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProductQuoteMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case productquote.FieldCreateTime:
		return m.CreateTime()
	case productquote.FieldUpdateTime:
		return m.UpdateTime()
	case productquote.FieldDeletedAt:
		return m.DeletedAt()
	case productquote.FieldPrice:
		return m.Price()
	case productquote.FieldIsActive:
		return m.IsActive()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProductQuoteMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case productquote.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case productquote.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case productquote.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case productquote.FieldPrice:
		return m.OldPrice(ctx)
	case productquote.FieldIsActive:
		return m.OldIsActive(ctx)
	}
	return nil, fmt.Errorf("unknown ProductQuote field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProductQuoteMutation) SetField(name string, value ent.Value) error {
	switch name {
	case productquote.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case productquote.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case productquote.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case productquote.FieldPrice:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case productquote.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	}
	return fmt.Errorf("unknown ProductQuote field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProductQuoteMutation) AddedFields() []string {
	var fields []string
	if m.addprice != nil {
		fields = append(fields, productquote.FieldPrice)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProductQuoteMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case productquote.FieldPrice:
		return m.AddedPrice()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProductQuoteMutation) AddField(name string, value ent.Value) error {
	switch name {
	case productquote.FieldPrice:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	}
	return fmt.Errorf("unknown ProductQuote numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProductQuoteMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(productquote.FieldDeletedAt) {
		fields = append(fields, productquote.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProductQuoteMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProductQuoteMutation) ClearField(name string) error {
	switch name {
	case productquote.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown ProductQuote nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProductQuoteMutation) ResetField(name string) error {
	switch name {
	case productquote.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case productquote.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case productquote.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case productquote.FieldPrice:
		m.ResetPrice()
		return nil
	case productquote.FieldIsActive:
		m.ResetIsActive()
		return nil
	}
	return fmt.Errorf("unknown ProductQuote field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProductQuoteMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.user != nil {
		edges = append(edges, productquote.EdgeUser)
	}
	if m.goods != nil {
		edges = append(edges, productquote.EdgeGoods)
	}
	if m.image_of_user != nil {
		edges = append(edges, productquote.EdgeImageOfUser)
	}
	if m.item_has_owner != nil {
		edges = append(edges, productquote.EdgeItemHasOwner)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProductQuoteMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case productquote.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case productquote.EdgeGoods:
		if id := m.goods; id != nil {
			return []ent.Value{*id}
		}
	case productquote.EdgeImageOfUser:
		if id := m.image_of_user; id != nil {
			return []ent.Value{*id}
		}
	case productquote.EdgeItemHasOwner:
		ids := make([]ent.Value, 0, len(m.item_has_owner))
		for id := range m.item_has_owner {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProductQuoteMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removeditem_has_owner != nil {
		edges = append(edges, productquote.EdgeItemHasOwner)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProductQuoteMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case productquote.EdgeItemHasOwner:
		ids := make([]ent.Value, 0, len(m.removeditem_has_owner))
		for id := range m.removeditem_has_owner {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProductQuoteMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.cleareduser {
		edges = append(edges, productquote.EdgeUser)
	}
	if m.clearedgoods {
		edges = append(edges, productquote.EdgeGoods)
	}
	if m.clearedimage_of_user {
		edges = append(edges, productquote.EdgeImageOfUser)
	}
	if m.cleareditem_has_owner {
		edges = append(edges, productquote.EdgeItemHasOwner)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProductQuoteMutation) EdgeCleared(name string) bool {
	switch name {
	case productquote.EdgeUser:
		return m.cleareduser
	case productquote.EdgeGoods:
		return m.clearedgoods
	case productquote.EdgeImageOfUser:
		return m.clearedimage_of_user
	case productquote.EdgeItemHasOwner:
		return m.cleareditem_has_owner
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProductQuoteMutation) ClearEdge(name string) error {
	switch name {
	case productquote.EdgeUser:
		m.ClearUser()
		return nil
	case productquote.EdgeGoods:
		m.ClearGoods()
		return nil
	case productquote.EdgeImageOfUser:
		m.ClearImageOfUser()
		return nil
	}
	return fmt.Errorf("unknown ProductQuote unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProductQuoteMutation) ResetEdge(name string) error {
	switch name {
	case productquote.EdgeUser:
		m.ResetUser()
		return nil
	case productquote.EdgeGoods:
		m.ResetGoods()
		return nil
	case productquote.EdgeImageOfUser:
		m.ResetImageOfUser()
		return nil
	case productquote.EdgeItemHasOwner:
		m.ResetItemHasOwner()
		return nil
	}
	return fmt.Errorf("unknown ProductQuote edge %s", name)
}

// TypeOfGoodsMutation represents an operation that mutates the TypeOfGoods nodes in the graph.
type TypeOfGoodsMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	create_time   *time.Time
	update_time   *time.Time
	deleted_at    *time.Time
	name          *string
	_type         *string
	description   *string
	clearedFields map[string]struct{}
	goods         *uuid.UUID
	clearedgoods  bool
	done          bool
	oldValue      func(context.Context) (*TypeOfGoods, error)
	predicates    []predicate.TypeOfGoods
}

var _ ent.Mutation = (*TypeOfGoodsMutation)(nil)

// typeofgoodsOption allows management of the mutation configuration using functional options.
type typeofgoodsOption func(*TypeOfGoodsMutation)

// newTypeOfGoodsMutation creates new mutation for the TypeOfGoods entity.
func newTypeOfGoodsMutation(c config, op Op, opts ...typeofgoodsOption) *TypeOfGoodsMutation {
	m := &TypeOfGoodsMutation{
		config:        c,
		op:            op,
		typ:           TypeTypeOfGoods,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTypeOfGoodsID sets the ID field of the mutation.
func withTypeOfGoodsID(id uuid.UUID) typeofgoodsOption {
	return func(m *TypeOfGoodsMutation) {
		var (
			err   error
			once  sync.Once
			value *TypeOfGoods
		)
		m.oldValue = func(ctx context.Context) (*TypeOfGoods, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TypeOfGoods.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTypeOfGoods sets the old TypeOfGoods of the mutation.
func withTypeOfGoods(node *TypeOfGoods) typeofgoodsOption {
	return func(m *TypeOfGoodsMutation) {
		m.oldValue = func(context.Context) (*TypeOfGoods, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TypeOfGoodsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TypeOfGoodsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TypeOfGoods entities.
func (m *TypeOfGoodsMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TypeOfGoodsMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TypeOfGoodsMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TypeOfGoods.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *TypeOfGoodsMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *TypeOfGoodsMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the TypeOfGoods entity.
// If the TypeOfGoods object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TypeOfGoodsMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *TypeOfGoodsMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *TypeOfGoodsMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *TypeOfGoodsMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the TypeOfGoods entity.
// If the TypeOfGoods object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TypeOfGoodsMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *TypeOfGoodsMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *TypeOfGoodsMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *TypeOfGoodsMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the TypeOfGoods entity.
// If the TypeOfGoods object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TypeOfGoodsMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *TypeOfGoodsMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[typeofgoods.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *TypeOfGoodsMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[typeofgoods.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *TypeOfGoodsMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, typeofgoods.FieldDeletedAt)
}

// SetName sets the "name" field.
func (m *TypeOfGoodsMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TypeOfGoodsMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the TypeOfGoods entity.
// If the TypeOfGoods object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TypeOfGoodsMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TypeOfGoodsMutation) ResetName() {
	m.name = nil
}

// SetType sets the "type" field.
func (m *TypeOfGoodsMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *TypeOfGoodsMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the TypeOfGoods entity.
// If the TypeOfGoods object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TypeOfGoodsMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *TypeOfGoodsMutation) ResetType() {
	m._type = nil
}

// SetDescription sets the "description" field.
func (m *TypeOfGoodsMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *TypeOfGoodsMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the TypeOfGoods entity.
// If the TypeOfGoods object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TypeOfGoodsMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *TypeOfGoodsMutation) ResetDescription() {
	m.description = nil
}

// SetGoodsID sets the "goods" edge to the Goods entity by id.
func (m *TypeOfGoodsMutation) SetGoodsID(id uuid.UUID) {
	m.goods = &id
}

// ClearGoods clears the "goods" edge to the Goods entity.
func (m *TypeOfGoodsMutation) ClearGoods() {
	m.clearedgoods = true
}

// GoodsCleared reports if the "goods" edge to the Goods entity was cleared.
func (m *TypeOfGoodsMutation) GoodsCleared() bool {
	return m.clearedgoods
}

// GoodsID returns the "goods" edge ID in the mutation.
func (m *TypeOfGoodsMutation) GoodsID() (id uuid.UUID, exists bool) {
	if m.goods != nil {
		return *m.goods, true
	}
	return
}

// GoodsIDs returns the "goods" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GoodsID instead. It exists only for internal usage by the builders.
func (m *TypeOfGoodsMutation) GoodsIDs() (ids []uuid.UUID) {
	if id := m.goods; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGoods resets all changes to the "goods" edge.
func (m *TypeOfGoodsMutation) ResetGoods() {
	m.goods = nil
	m.clearedgoods = false
}

// Where appends a list predicates to the TypeOfGoodsMutation builder.
func (m *TypeOfGoodsMutation) Where(ps ...predicate.TypeOfGoods) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TypeOfGoodsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TypeOfGoodsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TypeOfGoods, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TypeOfGoodsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TypeOfGoodsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TypeOfGoods).
func (m *TypeOfGoodsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TypeOfGoodsMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.create_time != nil {
		fields = append(fields, typeofgoods.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, typeofgoods.FieldUpdateTime)
	}
	if m.deleted_at != nil {
		fields = append(fields, typeofgoods.FieldDeletedAt)
	}
	if m.name != nil {
		fields = append(fields, typeofgoods.FieldName)
	}
	if m._type != nil {
		fields = append(fields, typeofgoods.FieldType)
	}
	if m.description != nil {
		fields = append(fields, typeofgoods.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TypeOfGoodsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case typeofgoods.FieldCreateTime:
		return m.CreateTime()
	case typeofgoods.FieldUpdateTime:
		return m.UpdateTime()
	case typeofgoods.FieldDeletedAt:
		return m.DeletedAt()
	case typeofgoods.FieldName:
		return m.Name()
	case typeofgoods.FieldType:
		return m.GetType()
	case typeofgoods.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TypeOfGoodsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case typeofgoods.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case typeofgoods.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case typeofgoods.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case typeofgoods.FieldName:
		return m.OldName(ctx)
	case typeofgoods.FieldType:
		return m.OldType(ctx)
	case typeofgoods.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown TypeOfGoods field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TypeOfGoodsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case typeofgoods.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case typeofgoods.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case typeofgoods.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case typeofgoods.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case typeofgoods.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case typeofgoods.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown TypeOfGoods field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TypeOfGoodsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TypeOfGoodsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TypeOfGoodsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown TypeOfGoods numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TypeOfGoodsMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(typeofgoods.FieldDeletedAt) {
		fields = append(fields, typeofgoods.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TypeOfGoodsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TypeOfGoodsMutation) ClearField(name string) error {
	switch name {
	case typeofgoods.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown TypeOfGoods nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TypeOfGoodsMutation) ResetField(name string) error {
	switch name {
	case typeofgoods.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case typeofgoods.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case typeofgoods.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case typeofgoods.FieldName:
		m.ResetName()
		return nil
	case typeofgoods.FieldType:
		m.ResetType()
		return nil
	case typeofgoods.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown TypeOfGoods field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TypeOfGoodsMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.goods != nil {
		edges = append(edges, typeofgoods.EdgeGoods)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TypeOfGoodsMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case typeofgoods.EdgeGoods:
		if id := m.goods; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TypeOfGoodsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TypeOfGoodsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TypeOfGoodsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedgoods {
		edges = append(edges, typeofgoods.EdgeGoods)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TypeOfGoodsMutation) EdgeCleared(name string) bool {
	switch name {
	case typeofgoods.EdgeGoods:
		return m.clearedgoods
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TypeOfGoodsMutation) ClearEdge(name string) error {
	switch name {
	case typeofgoods.EdgeGoods:
		m.ClearGoods()
		return nil
	}
	return fmt.Errorf("unknown TypeOfGoods unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TypeOfGoodsMutation) ResetEdge(name string) error {
	switch name {
	case typeofgoods.EdgeGoods:
		m.ResetGoods()
		return nil
	}
	return fmt.Errorf("unknown TypeOfGoods edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                    Op
	typ                   string
	id                    *uuid.UUID
	create_time           *time.Time
	update_time           *time.Time
	deleted_at            *time.Time
	username              *string
	is_active             *bool
	hashed_pwd            *string
	is_superuser          *bool
	name                  *string
	email                 *string
	phone                 *string
	address               *string
	clearedFields         map[string]struct{}
	image_of_user         map[uuid.UUID]struct{}
	removedimage_of_user  map[uuid.UUID]struct{}
	clearedimage_of_user  bool
	product_quote         map[uuid.UUID]struct{}
	removedproduct_quote  map[uuid.UUID]struct{}
	clearedproduct_quote  bool
	item_has_owner        map[uuid.UUID]struct{}
	removeditem_has_owner map[uuid.UUID]struct{}
	cleareditem_has_owner bool
	done                  bool
	oldValue              func(context.Context) (*User, error)
	predicates            []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *UserMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *UserMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *UserMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *UserMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *UserMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *UserMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *UserMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *UserMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *UserMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[user.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *UserMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[user.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *UserMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, user.FieldDeletedAt)
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetIsActive sets the "is_active" field.
func (m *UserMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *UserMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *UserMutation) ResetIsActive() {
	m.is_active = nil
}

// SetHashedPwd sets the "hashed_pwd" field.
func (m *UserMutation) SetHashedPwd(s string) {
	m.hashed_pwd = &s
}

// HashedPwd returns the value of the "hashed_pwd" field in the mutation.
func (m *UserMutation) HashedPwd() (r string, exists bool) {
	v := m.hashed_pwd
	if v == nil {
		return
	}
	return *v, true
}

// OldHashedPwd returns the old "hashed_pwd" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldHashedPwd(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHashedPwd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHashedPwd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHashedPwd: %w", err)
	}
	return oldValue.HashedPwd, nil
}

// ResetHashedPwd resets all changes to the "hashed_pwd" field.
func (m *UserMutation) ResetHashedPwd() {
	m.hashed_pwd = nil
}

// SetIsSuperuser sets the "is_superuser" field.
func (m *UserMutation) SetIsSuperuser(b bool) {
	m.is_superuser = &b
}

// IsSuperuser returns the value of the "is_superuser" field in the mutation.
func (m *UserMutation) IsSuperuser() (r bool, exists bool) {
	v := m.is_superuser
	if v == nil {
		return
	}
	return *v, true
}

// OldIsSuperuser returns the old "is_superuser" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldIsSuperuser(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsSuperuser is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsSuperuser requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsSuperuser: %w", err)
	}
	return oldValue.IsSuperuser, nil
}

// ResetIsSuperuser resets all changes to the "is_superuser" field.
func (m *UserMutation) ResetIsSuperuser() {
	m.is_superuser = nil
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ClearEmail clears the value of the "email" field.
func (m *UserMutation) ClearEmail() {
	m.email = nil
	m.clearedFields[user.FieldEmail] = struct{}{}
}

// EmailCleared returns if the "email" field was cleared in this mutation.
func (m *UserMutation) EmailCleared() bool {
	_, ok := m.clearedFields[user.FieldEmail]
	return ok
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
	delete(m.clearedFields, user.FieldEmail)
}

// SetPhone sets the "phone" field.
func (m *UserMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *UserMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ClearPhone clears the value of the "phone" field.
func (m *UserMutation) ClearPhone() {
	m.phone = nil
	m.clearedFields[user.FieldPhone] = struct{}{}
}

// PhoneCleared returns if the "phone" field was cleared in this mutation.
func (m *UserMutation) PhoneCleared() bool {
	_, ok := m.clearedFields[user.FieldPhone]
	return ok
}

// ResetPhone resets all changes to the "phone" field.
func (m *UserMutation) ResetPhone() {
	m.phone = nil
	delete(m.clearedFields, user.FieldPhone)
}

// SetAddress sets the "address" field.
func (m *UserMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *UserMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ClearAddress clears the value of the "address" field.
func (m *UserMutation) ClearAddress() {
	m.address = nil
	m.clearedFields[user.FieldAddress] = struct{}{}
}

// AddressCleared returns if the "address" field was cleared in this mutation.
func (m *UserMutation) AddressCleared() bool {
	_, ok := m.clearedFields[user.FieldAddress]
	return ok
}

// ResetAddress resets all changes to the "address" field.
func (m *UserMutation) ResetAddress() {
	m.address = nil
	delete(m.clearedFields, user.FieldAddress)
}

// AddImageOfUserIDs adds the "image_of_user" edge to the ImageOfUser entity by ids.
func (m *UserMutation) AddImageOfUserIDs(ids ...uuid.UUID) {
	if m.image_of_user == nil {
		m.image_of_user = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.image_of_user[ids[i]] = struct{}{}
	}
}

// ClearImageOfUser clears the "image_of_user" edge to the ImageOfUser entity.
func (m *UserMutation) ClearImageOfUser() {
	m.clearedimage_of_user = true
}

// ImageOfUserCleared reports if the "image_of_user" edge to the ImageOfUser entity was cleared.
func (m *UserMutation) ImageOfUserCleared() bool {
	return m.clearedimage_of_user
}

// RemoveImageOfUserIDs removes the "image_of_user" edge to the ImageOfUser entity by IDs.
func (m *UserMutation) RemoveImageOfUserIDs(ids ...uuid.UUID) {
	if m.removedimage_of_user == nil {
		m.removedimage_of_user = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.image_of_user, ids[i])
		m.removedimage_of_user[ids[i]] = struct{}{}
	}
}

// RemovedImageOfUser returns the removed IDs of the "image_of_user" edge to the ImageOfUser entity.
func (m *UserMutation) RemovedImageOfUserIDs() (ids []uuid.UUID) {
	for id := range m.removedimage_of_user {
		ids = append(ids, id)
	}
	return
}

// ImageOfUserIDs returns the "image_of_user" edge IDs in the mutation.
func (m *UserMutation) ImageOfUserIDs() (ids []uuid.UUID) {
	for id := range m.image_of_user {
		ids = append(ids, id)
	}
	return
}

// ResetImageOfUser resets all changes to the "image_of_user" edge.
func (m *UserMutation) ResetImageOfUser() {
	m.image_of_user = nil
	m.clearedimage_of_user = false
	m.removedimage_of_user = nil
}

// AddProductQuoteIDs adds the "product_quote" edge to the ProductQuote entity by ids.
func (m *UserMutation) AddProductQuoteIDs(ids ...uuid.UUID) {
	if m.product_quote == nil {
		m.product_quote = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.product_quote[ids[i]] = struct{}{}
	}
}

// ClearProductQuote clears the "product_quote" edge to the ProductQuote entity.
func (m *UserMutation) ClearProductQuote() {
	m.clearedproduct_quote = true
}

// ProductQuoteCleared reports if the "product_quote" edge to the ProductQuote entity was cleared.
func (m *UserMutation) ProductQuoteCleared() bool {
	return m.clearedproduct_quote
}

// RemoveProductQuoteIDs removes the "product_quote" edge to the ProductQuote entity by IDs.
func (m *UserMutation) RemoveProductQuoteIDs(ids ...uuid.UUID) {
	if m.removedproduct_quote == nil {
		m.removedproduct_quote = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.product_quote, ids[i])
		m.removedproduct_quote[ids[i]] = struct{}{}
	}
}

// RemovedProductQuote returns the removed IDs of the "product_quote" edge to the ProductQuote entity.
func (m *UserMutation) RemovedProductQuoteIDs() (ids []uuid.UUID) {
	for id := range m.removedproduct_quote {
		ids = append(ids, id)
	}
	return
}

// ProductQuoteIDs returns the "product_quote" edge IDs in the mutation.
func (m *UserMutation) ProductQuoteIDs() (ids []uuid.UUID) {
	for id := range m.product_quote {
		ids = append(ids, id)
	}
	return
}

// ResetProductQuote resets all changes to the "product_quote" edge.
func (m *UserMutation) ResetProductQuote() {
	m.product_quote = nil
	m.clearedproduct_quote = false
	m.removedproduct_quote = nil
}

// AddItemHasOwnerIDs adds the "item_has_owner" edge to the ItemHasOwner entity by ids.
func (m *UserMutation) AddItemHasOwnerIDs(ids ...uuid.UUID) {
	if m.item_has_owner == nil {
		m.item_has_owner = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.item_has_owner[ids[i]] = struct{}{}
	}
}

// ClearItemHasOwner clears the "item_has_owner" edge to the ItemHasOwner entity.
func (m *UserMutation) ClearItemHasOwner() {
	m.cleareditem_has_owner = true
}

// ItemHasOwnerCleared reports if the "item_has_owner" edge to the ItemHasOwner entity was cleared.
func (m *UserMutation) ItemHasOwnerCleared() bool {
	return m.cleareditem_has_owner
}

// RemoveItemHasOwnerIDs removes the "item_has_owner" edge to the ItemHasOwner entity by IDs.
func (m *UserMutation) RemoveItemHasOwnerIDs(ids ...uuid.UUID) {
	if m.removeditem_has_owner == nil {
		m.removeditem_has_owner = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.item_has_owner, ids[i])
		m.removeditem_has_owner[ids[i]] = struct{}{}
	}
}

// RemovedItemHasOwner returns the removed IDs of the "item_has_owner" edge to the ItemHasOwner entity.
func (m *UserMutation) RemovedItemHasOwnerIDs() (ids []uuid.UUID) {
	for id := range m.removeditem_has_owner {
		ids = append(ids, id)
	}
	return
}

// ItemHasOwnerIDs returns the "item_has_owner" edge IDs in the mutation.
func (m *UserMutation) ItemHasOwnerIDs() (ids []uuid.UUID) {
	for id := range m.item_has_owner {
		ids = append(ids, id)
	}
	return
}

// ResetItemHasOwner resets all changes to the "item_has_owner" edge.
func (m *UserMutation) ResetItemHasOwner() {
	m.item_has_owner = nil
	m.cleareditem_has_owner = false
	m.removeditem_has_owner = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.create_time != nil {
		fields = append(fields, user.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, user.FieldUpdateTime)
	}
	if m.deleted_at != nil {
		fields = append(fields, user.FieldDeletedAt)
	}
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.is_active != nil {
		fields = append(fields, user.FieldIsActive)
	}
	if m.hashed_pwd != nil {
		fields = append(fields, user.FieldHashedPwd)
	}
	if m.is_superuser != nil {
		fields = append(fields, user.FieldIsSuperuser)
	}
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.phone != nil {
		fields = append(fields, user.FieldPhone)
	}
	if m.address != nil {
		fields = append(fields, user.FieldAddress)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreateTime:
		return m.CreateTime()
	case user.FieldUpdateTime:
		return m.UpdateTime()
	case user.FieldDeletedAt:
		return m.DeletedAt()
	case user.FieldUsername:
		return m.Username()
	case user.FieldIsActive:
		return m.IsActive()
	case user.FieldHashedPwd:
		return m.HashedPwd()
	case user.FieldIsSuperuser:
		return m.IsSuperuser()
	case user.FieldName:
		return m.Name()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPhone:
		return m.Phone()
	case user.FieldAddress:
		return m.Address()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case user.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case user.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldIsActive:
		return m.OldIsActive(ctx)
	case user.FieldHashedPwd:
		return m.OldHashedPwd(ctx)
	case user.FieldIsSuperuser:
		return m.OldIsSuperuser(ctx)
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPhone:
		return m.OldPhone(ctx)
	case user.FieldAddress:
		return m.OldAddress(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case user.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case user.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	case user.FieldHashedPwd:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHashedPwd(v)
		return nil
	case user.FieldIsSuperuser:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsSuperuser(v)
		return nil
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case user.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldDeletedAt) {
		fields = append(fields, user.FieldDeletedAt)
	}
	if m.FieldCleared(user.FieldEmail) {
		fields = append(fields, user.FieldEmail)
	}
	if m.FieldCleared(user.FieldPhone) {
		fields = append(fields, user.FieldPhone)
	}
	if m.FieldCleared(user.FieldAddress) {
		fields = append(fields, user.FieldAddress)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case user.FieldEmail:
		m.ClearEmail()
		return nil
	case user.FieldPhone:
		m.ClearPhone()
		return nil
	case user.FieldAddress:
		m.ClearAddress()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case user.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case user.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldIsActive:
		m.ResetIsActive()
		return nil
	case user.FieldHashedPwd:
		m.ResetHashedPwd()
		return nil
	case user.FieldIsSuperuser:
		m.ResetIsSuperuser()
		return nil
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPhone:
		m.ResetPhone()
		return nil
	case user.FieldAddress:
		m.ResetAddress()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.image_of_user != nil {
		edges = append(edges, user.EdgeImageOfUser)
	}
	if m.product_quote != nil {
		edges = append(edges, user.EdgeProductQuote)
	}
	if m.item_has_owner != nil {
		edges = append(edges, user.EdgeItemHasOwner)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeImageOfUser:
		ids := make([]ent.Value, 0, len(m.image_of_user))
		for id := range m.image_of_user {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeProductQuote:
		ids := make([]ent.Value, 0, len(m.product_quote))
		for id := range m.product_quote {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeItemHasOwner:
		ids := make([]ent.Value, 0, len(m.item_has_owner))
		for id := range m.item_has_owner {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedimage_of_user != nil {
		edges = append(edges, user.EdgeImageOfUser)
	}
	if m.removedproduct_quote != nil {
		edges = append(edges, user.EdgeProductQuote)
	}
	if m.removeditem_has_owner != nil {
		edges = append(edges, user.EdgeItemHasOwner)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeImageOfUser:
		ids := make([]ent.Value, 0, len(m.removedimage_of_user))
		for id := range m.removedimage_of_user {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeProductQuote:
		ids := make([]ent.Value, 0, len(m.removedproduct_quote))
		for id := range m.removedproduct_quote {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeItemHasOwner:
		ids := make([]ent.Value, 0, len(m.removeditem_has_owner))
		for id := range m.removeditem_has_owner {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedimage_of_user {
		edges = append(edges, user.EdgeImageOfUser)
	}
	if m.clearedproduct_quote {
		edges = append(edges, user.EdgeProductQuote)
	}
	if m.cleareditem_has_owner {
		edges = append(edges, user.EdgeItemHasOwner)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeImageOfUser:
		return m.clearedimage_of_user
	case user.EdgeProductQuote:
		return m.clearedproduct_quote
	case user.EdgeItemHasOwner:
		return m.cleareditem_has_owner
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeImageOfUser:
		m.ResetImageOfUser()
		return nil
	case user.EdgeProductQuote:
		m.ResetProductQuote()
		return nil
	case user.EdgeItemHasOwner:
		m.ResetItemHasOwner()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
