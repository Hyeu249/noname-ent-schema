// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Hyeu249/noname-ent-schema/ent/goods"
	"github.com/Hyeu249/noname-ent-schema/ent/image"
	"github.com/Hyeu249/noname-ent-schema/ent/imageofuser"
	"github.com/Hyeu249/noname-ent-schema/ent/predicate"
	"github.com/Hyeu249/noname-ent-schema/ent/productquote"
	"github.com/Hyeu249/noname-ent-schema/ent/user"
	"github.com/google/uuid"
)

// ImageOfUserUpdate is the builder for updating ImageOfUser entities.
type ImageOfUserUpdate struct {
	config
	hooks    []Hook
	mutation *ImageOfUserMutation
}

// Where appends a list predicates to the ImageOfUserUpdate builder.
func (iouu *ImageOfUserUpdate) Where(ps ...predicate.ImageOfUser) *ImageOfUserUpdate {
	iouu.mutation.Where(ps...)
	return iouu
}

// SetUpdateTime sets the "update_time" field.
func (iouu *ImageOfUserUpdate) SetUpdateTime(t time.Time) *ImageOfUserUpdate {
	iouu.mutation.SetUpdateTime(t)
	return iouu
}

// SetDeletedAt sets the "deleted_at" field.
func (iouu *ImageOfUserUpdate) SetDeletedAt(t time.Time) *ImageOfUserUpdate {
	iouu.mutation.SetDeletedAt(t)
	return iouu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (iouu *ImageOfUserUpdate) SetNillableDeletedAt(t *time.Time) *ImageOfUserUpdate {
	if t != nil {
		iouu.SetDeletedAt(*t)
	}
	return iouu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (iouu *ImageOfUserUpdate) ClearDeletedAt() *ImageOfUserUpdate {
	iouu.mutation.ClearDeletedAt()
	return iouu
}

// SetRoyalty sets the "royalty" field.
func (iouu *ImageOfUserUpdate) SetRoyalty(f float32) *ImageOfUserUpdate {
	iouu.mutation.ResetRoyalty()
	iouu.mutation.SetRoyalty(f)
	return iouu
}

// SetNillableRoyalty sets the "royalty" field if the given value is not nil.
func (iouu *ImageOfUserUpdate) SetNillableRoyalty(f *float32) *ImageOfUserUpdate {
	if f != nil {
		iouu.SetRoyalty(*f)
	}
	return iouu
}

// AddRoyalty adds f to the "royalty" field.
func (iouu *ImageOfUserUpdate) AddRoyalty(f float32) *ImageOfUserUpdate {
	iouu.mutation.AddRoyalty(f)
	return iouu
}

// ClearRoyalty clears the value of the "royalty" field.
func (iouu *ImageOfUserUpdate) ClearRoyalty() *ImageOfUserUpdate {
	iouu.mutation.ClearRoyalty()
	return iouu
}

// SetIsImagePublished sets the "is_image_published" field.
func (iouu *ImageOfUserUpdate) SetIsImagePublished(b bool) *ImageOfUserUpdate {
	iouu.mutation.SetIsImagePublished(b)
	return iouu
}

// SetNillableIsImagePublished sets the "is_image_published" field if the given value is not nil.
func (iouu *ImageOfUserUpdate) SetNillableIsImagePublished(b *bool) *ImageOfUserUpdate {
	if b != nil {
		iouu.SetIsImagePublished(*b)
	}
	return iouu
}

// SetImageID sets the "image" edge to the Image entity by ID.
func (iouu *ImageOfUserUpdate) SetImageID(id uuid.UUID) *ImageOfUserUpdate {
	iouu.mutation.SetImageID(id)
	return iouu
}

// SetImage sets the "image" edge to the Image entity.
func (iouu *ImageOfUserUpdate) SetImage(i *Image) *ImageOfUserUpdate {
	return iouu.SetImageID(i.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (iouu *ImageOfUserUpdate) SetUserID(id uuid.UUID) *ImageOfUserUpdate {
	iouu.mutation.SetUserID(id)
	return iouu
}

// SetUser sets the "user" edge to the User entity.
func (iouu *ImageOfUserUpdate) SetUser(u *User) *ImageOfUserUpdate {
	return iouu.SetUserID(u.ID)
}

// SetGoodsID sets the "goods" edge to the Goods entity by ID.
func (iouu *ImageOfUserUpdate) SetGoodsID(id uuid.UUID) *ImageOfUserUpdate {
	iouu.mutation.SetGoodsID(id)
	return iouu
}

// SetNillableGoodsID sets the "goods" edge to the Goods entity by ID if the given value is not nil.
func (iouu *ImageOfUserUpdate) SetNillableGoodsID(id *uuid.UUID) *ImageOfUserUpdate {
	if id != nil {
		iouu = iouu.SetGoodsID(*id)
	}
	return iouu
}

// SetGoods sets the "goods" edge to the Goods entity.
func (iouu *ImageOfUserUpdate) SetGoods(g *Goods) *ImageOfUserUpdate {
	return iouu.SetGoodsID(g.ID)
}

// AddProductQuoteIDs adds the "product_quote" edge to the ProductQuote entity by IDs.
func (iouu *ImageOfUserUpdate) AddProductQuoteIDs(ids ...uuid.UUID) *ImageOfUserUpdate {
	iouu.mutation.AddProductQuoteIDs(ids...)
	return iouu
}

// AddProductQuote adds the "product_quote" edges to the ProductQuote entity.
func (iouu *ImageOfUserUpdate) AddProductQuote(p ...*ProductQuote) *ImageOfUserUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iouu.AddProductQuoteIDs(ids...)
}

// Mutation returns the ImageOfUserMutation object of the builder.
func (iouu *ImageOfUserUpdate) Mutation() *ImageOfUserMutation {
	return iouu.mutation
}

// ClearImage clears the "image" edge to the Image entity.
func (iouu *ImageOfUserUpdate) ClearImage() *ImageOfUserUpdate {
	iouu.mutation.ClearImage()
	return iouu
}

// ClearUser clears the "user" edge to the User entity.
func (iouu *ImageOfUserUpdate) ClearUser() *ImageOfUserUpdate {
	iouu.mutation.ClearUser()
	return iouu
}

// ClearGoods clears the "goods" edge to the Goods entity.
func (iouu *ImageOfUserUpdate) ClearGoods() *ImageOfUserUpdate {
	iouu.mutation.ClearGoods()
	return iouu
}

// ClearProductQuote clears all "product_quote" edges to the ProductQuote entity.
func (iouu *ImageOfUserUpdate) ClearProductQuote() *ImageOfUserUpdate {
	iouu.mutation.ClearProductQuote()
	return iouu
}

// RemoveProductQuoteIDs removes the "product_quote" edge to ProductQuote entities by IDs.
func (iouu *ImageOfUserUpdate) RemoveProductQuoteIDs(ids ...uuid.UUID) *ImageOfUserUpdate {
	iouu.mutation.RemoveProductQuoteIDs(ids...)
	return iouu
}

// RemoveProductQuote removes "product_quote" edges to ProductQuote entities.
func (iouu *ImageOfUserUpdate) RemoveProductQuote(p ...*ProductQuote) *ImageOfUserUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iouu.RemoveProductQuoteIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iouu *ImageOfUserUpdate) Save(ctx context.Context) (int, error) {
	iouu.defaults()
	return withHooks[int, ImageOfUserMutation](ctx, iouu.sqlSave, iouu.mutation, iouu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iouu *ImageOfUserUpdate) SaveX(ctx context.Context) int {
	affected, err := iouu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iouu *ImageOfUserUpdate) Exec(ctx context.Context) error {
	_, err := iouu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iouu *ImageOfUserUpdate) ExecX(ctx context.Context) {
	if err := iouu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iouu *ImageOfUserUpdate) defaults() {
	if _, ok := iouu.mutation.UpdateTime(); !ok {
		v := imageofuser.UpdateDefaultUpdateTime()
		iouu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iouu *ImageOfUserUpdate) check() error {
	if _, ok := iouu.mutation.ImageID(); iouu.mutation.ImageCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ImageOfUser.image"`)
	}
	if _, ok := iouu.mutation.UserID(); iouu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ImageOfUser.user"`)
	}
	return nil
}

func (iouu *ImageOfUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iouu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   imageofuser.Table,
			Columns: imageofuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: imageofuser.FieldID,
			},
		},
	}
	if ps := iouu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iouu.mutation.UpdateTime(); ok {
		_spec.SetField(imageofuser.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := iouu.mutation.DeletedAt(); ok {
		_spec.SetField(imageofuser.FieldDeletedAt, field.TypeTime, value)
	}
	if iouu.mutation.DeletedAtCleared() {
		_spec.ClearField(imageofuser.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := iouu.mutation.Royalty(); ok {
		_spec.SetField(imageofuser.FieldRoyalty, field.TypeFloat32, value)
	}
	if value, ok := iouu.mutation.AddedRoyalty(); ok {
		_spec.AddField(imageofuser.FieldRoyalty, field.TypeFloat32, value)
	}
	if iouu.mutation.RoyaltyCleared() {
		_spec.ClearField(imageofuser.FieldRoyalty, field.TypeFloat32)
	}
	if value, ok := iouu.mutation.IsImagePublished(); ok {
		_spec.SetField(imageofuser.FieldIsImagePublished, field.TypeBool, value)
	}
	if iouu.mutation.ImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   imageofuser.ImageTable,
			Columns: []string{imageofuser.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: image.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iouu.mutation.ImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   imageofuser.ImageTable,
			Columns: []string{imageofuser.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: image.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iouu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   imageofuser.UserTable,
			Columns: []string{imageofuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iouu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   imageofuser.UserTable,
			Columns: []string{imageofuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iouu.mutation.GoodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   imageofuser.GoodsTable,
			Columns: []string{imageofuser.GoodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: goods.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iouu.mutation.GoodsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   imageofuser.GoodsTable,
			Columns: []string{imageofuser.GoodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: goods.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iouu.mutation.ProductQuoteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   imageofuser.ProductQuoteTable,
			Columns: []string{imageofuser.ProductQuoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: productquote.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iouu.mutation.RemovedProductQuoteIDs(); len(nodes) > 0 && !iouu.mutation.ProductQuoteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   imageofuser.ProductQuoteTable,
			Columns: []string{imageofuser.ProductQuoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: productquote.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iouu.mutation.ProductQuoteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   imageofuser.ProductQuoteTable,
			Columns: []string{imageofuser.ProductQuoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: productquote.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iouu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{imageofuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iouu.mutation.done = true
	return n, nil
}

// ImageOfUserUpdateOne is the builder for updating a single ImageOfUser entity.
type ImageOfUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ImageOfUserMutation
}

// SetUpdateTime sets the "update_time" field.
func (iouuo *ImageOfUserUpdateOne) SetUpdateTime(t time.Time) *ImageOfUserUpdateOne {
	iouuo.mutation.SetUpdateTime(t)
	return iouuo
}

// SetDeletedAt sets the "deleted_at" field.
func (iouuo *ImageOfUserUpdateOne) SetDeletedAt(t time.Time) *ImageOfUserUpdateOne {
	iouuo.mutation.SetDeletedAt(t)
	return iouuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (iouuo *ImageOfUserUpdateOne) SetNillableDeletedAt(t *time.Time) *ImageOfUserUpdateOne {
	if t != nil {
		iouuo.SetDeletedAt(*t)
	}
	return iouuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (iouuo *ImageOfUserUpdateOne) ClearDeletedAt() *ImageOfUserUpdateOne {
	iouuo.mutation.ClearDeletedAt()
	return iouuo
}

// SetRoyalty sets the "royalty" field.
func (iouuo *ImageOfUserUpdateOne) SetRoyalty(f float32) *ImageOfUserUpdateOne {
	iouuo.mutation.ResetRoyalty()
	iouuo.mutation.SetRoyalty(f)
	return iouuo
}

// SetNillableRoyalty sets the "royalty" field if the given value is not nil.
func (iouuo *ImageOfUserUpdateOne) SetNillableRoyalty(f *float32) *ImageOfUserUpdateOne {
	if f != nil {
		iouuo.SetRoyalty(*f)
	}
	return iouuo
}

// AddRoyalty adds f to the "royalty" field.
func (iouuo *ImageOfUserUpdateOne) AddRoyalty(f float32) *ImageOfUserUpdateOne {
	iouuo.mutation.AddRoyalty(f)
	return iouuo
}

// ClearRoyalty clears the value of the "royalty" field.
func (iouuo *ImageOfUserUpdateOne) ClearRoyalty() *ImageOfUserUpdateOne {
	iouuo.mutation.ClearRoyalty()
	return iouuo
}

// SetIsImagePublished sets the "is_image_published" field.
func (iouuo *ImageOfUserUpdateOne) SetIsImagePublished(b bool) *ImageOfUserUpdateOne {
	iouuo.mutation.SetIsImagePublished(b)
	return iouuo
}

// SetNillableIsImagePublished sets the "is_image_published" field if the given value is not nil.
func (iouuo *ImageOfUserUpdateOne) SetNillableIsImagePublished(b *bool) *ImageOfUserUpdateOne {
	if b != nil {
		iouuo.SetIsImagePublished(*b)
	}
	return iouuo
}

// SetImageID sets the "image" edge to the Image entity by ID.
func (iouuo *ImageOfUserUpdateOne) SetImageID(id uuid.UUID) *ImageOfUserUpdateOne {
	iouuo.mutation.SetImageID(id)
	return iouuo
}

// SetImage sets the "image" edge to the Image entity.
func (iouuo *ImageOfUserUpdateOne) SetImage(i *Image) *ImageOfUserUpdateOne {
	return iouuo.SetImageID(i.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (iouuo *ImageOfUserUpdateOne) SetUserID(id uuid.UUID) *ImageOfUserUpdateOne {
	iouuo.mutation.SetUserID(id)
	return iouuo
}

// SetUser sets the "user" edge to the User entity.
func (iouuo *ImageOfUserUpdateOne) SetUser(u *User) *ImageOfUserUpdateOne {
	return iouuo.SetUserID(u.ID)
}

// SetGoodsID sets the "goods" edge to the Goods entity by ID.
func (iouuo *ImageOfUserUpdateOne) SetGoodsID(id uuid.UUID) *ImageOfUserUpdateOne {
	iouuo.mutation.SetGoodsID(id)
	return iouuo
}

// SetNillableGoodsID sets the "goods" edge to the Goods entity by ID if the given value is not nil.
func (iouuo *ImageOfUserUpdateOne) SetNillableGoodsID(id *uuid.UUID) *ImageOfUserUpdateOne {
	if id != nil {
		iouuo = iouuo.SetGoodsID(*id)
	}
	return iouuo
}

// SetGoods sets the "goods" edge to the Goods entity.
func (iouuo *ImageOfUserUpdateOne) SetGoods(g *Goods) *ImageOfUserUpdateOne {
	return iouuo.SetGoodsID(g.ID)
}

// AddProductQuoteIDs adds the "product_quote" edge to the ProductQuote entity by IDs.
func (iouuo *ImageOfUserUpdateOne) AddProductQuoteIDs(ids ...uuid.UUID) *ImageOfUserUpdateOne {
	iouuo.mutation.AddProductQuoteIDs(ids...)
	return iouuo
}

// AddProductQuote adds the "product_quote" edges to the ProductQuote entity.
func (iouuo *ImageOfUserUpdateOne) AddProductQuote(p ...*ProductQuote) *ImageOfUserUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iouuo.AddProductQuoteIDs(ids...)
}

// Mutation returns the ImageOfUserMutation object of the builder.
func (iouuo *ImageOfUserUpdateOne) Mutation() *ImageOfUserMutation {
	return iouuo.mutation
}

// ClearImage clears the "image" edge to the Image entity.
func (iouuo *ImageOfUserUpdateOne) ClearImage() *ImageOfUserUpdateOne {
	iouuo.mutation.ClearImage()
	return iouuo
}

// ClearUser clears the "user" edge to the User entity.
func (iouuo *ImageOfUserUpdateOne) ClearUser() *ImageOfUserUpdateOne {
	iouuo.mutation.ClearUser()
	return iouuo
}

// ClearGoods clears the "goods" edge to the Goods entity.
func (iouuo *ImageOfUserUpdateOne) ClearGoods() *ImageOfUserUpdateOne {
	iouuo.mutation.ClearGoods()
	return iouuo
}

// ClearProductQuote clears all "product_quote" edges to the ProductQuote entity.
func (iouuo *ImageOfUserUpdateOne) ClearProductQuote() *ImageOfUserUpdateOne {
	iouuo.mutation.ClearProductQuote()
	return iouuo
}

// RemoveProductQuoteIDs removes the "product_quote" edge to ProductQuote entities by IDs.
func (iouuo *ImageOfUserUpdateOne) RemoveProductQuoteIDs(ids ...uuid.UUID) *ImageOfUserUpdateOne {
	iouuo.mutation.RemoveProductQuoteIDs(ids...)
	return iouuo
}

// RemoveProductQuote removes "product_quote" edges to ProductQuote entities.
func (iouuo *ImageOfUserUpdateOne) RemoveProductQuote(p ...*ProductQuote) *ImageOfUserUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iouuo.RemoveProductQuoteIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iouuo *ImageOfUserUpdateOne) Select(field string, fields ...string) *ImageOfUserUpdateOne {
	iouuo.fields = append([]string{field}, fields...)
	return iouuo
}

// Save executes the query and returns the updated ImageOfUser entity.
func (iouuo *ImageOfUserUpdateOne) Save(ctx context.Context) (*ImageOfUser, error) {
	iouuo.defaults()
	return withHooks[*ImageOfUser, ImageOfUserMutation](ctx, iouuo.sqlSave, iouuo.mutation, iouuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iouuo *ImageOfUserUpdateOne) SaveX(ctx context.Context) *ImageOfUser {
	node, err := iouuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iouuo *ImageOfUserUpdateOne) Exec(ctx context.Context) error {
	_, err := iouuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iouuo *ImageOfUserUpdateOne) ExecX(ctx context.Context) {
	if err := iouuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iouuo *ImageOfUserUpdateOne) defaults() {
	if _, ok := iouuo.mutation.UpdateTime(); !ok {
		v := imageofuser.UpdateDefaultUpdateTime()
		iouuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iouuo *ImageOfUserUpdateOne) check() error {
	if _, ok := iouuo.mutation.ImageID(); iouuo.mutation.ImageCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ImageOfUser.image"`)
	}
	if _, ok := iouuo.mutation.UserID(); iouuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ImageOfUser.user"`)
	}
	return nil
}

func (iouuo *ImageOfUserUpdateOne) sqlSave(ctx context.Context) (_node *ImageOfUser, err error) {
	if err := iouuo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   imageofuser.Table,
			Columns: imageofuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: imageofuser.FieldID,
			},
		},
	}
	id, ok := iouuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ImageOfUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iouuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, imageofuser.FieldID)
		for _, f := range fields {
			if !imageofuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != imageofuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iouuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iouuo.mutation.UpdateTime(); ok {
		_spec.SetField(imageofuser.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := iouuo.mutation.DeletedAt(); ok {
		_spec.SetField(imageofuser.FieldDeletedAt, field.TypeTime, value)
	}
	if iouuo.mutation.DeletedAtCleared() {
		_spec.ClearField(imageofuser.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := iouuo.mutation.Royalty(); ok {
		_spec.SetField(imageofuser.FieldRoyalty, field.TypeFloat32, value)
	}
	if value, ok := iouuo.mutation.AddedRoyalty(); ok {
		_spec.AddField(imageofuser.FieldRoyalty, field.TypeFloat32, value)
	}
	if iouuo.mutation.RoyaltyCleared() {
		_spec.ClearField(imageofuser.FieldRoyalty, field.TypeFloat32)
	}
	if value, ok := iouuo.mutation.IsImagePublished(); ok {
		_spec.SetField(imageofuser.FieldIsImagePublished, field.TypeBool, value)
	}
	if iouuo.mutation.ImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   imageofuser.ImageTable,
			Columns: []string{imageofuser.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: image.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iouuo.mutation.ImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   imageofuser.ImageTable,
			Columns: []string{imageofuser.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: image.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iouuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   imageofuser.UserTable,
			Columns: []string{imageofuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iouuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   imageofuser.UserTable,
			Columns: []string{imageofuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iouuo.mutation.GoodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   imageofuser.GoodsTable,
			Columns: []string{imageofuser.GoodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: goods.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iouuo.mutation.GoodsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   imageofuser.GoodsTable,
			Columns: []string{imageofuser.GoodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: goods.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iouuo.mutation.ProductQuoteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   imageofuser.ProductQuoteTable,
			Columns: []string{imageofuser.ProductQuoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: productquote.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iouuo.mutation.RemovedProductQuoteIDs(); len(nodes) > 0 && !iouuo.mutation.ProductQuoteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   imageofuser.ProductQuoteTable,
			Columns: []string{imageofuser.ProductQuoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: productquote.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iouuo.mutation.ProductQuoteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   imageofuser.ProductQuoteTable,
			Columns: []string{imageofuser.ProductQuoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: productquote.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ImageOfUser{config: iouuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iouuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{imageofuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iouuo.mutation.done = true
	return _node, nil
}
