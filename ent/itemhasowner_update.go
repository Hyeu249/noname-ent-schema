// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Hyeu249/noname-ent-schema/ent/itemhasowner"
	"github.com/Hyeu249/noname-ent-schema/ent/order"
	"github.com/Hyeu249/noname-ent-schema/ent/predicate"
	"github.com/Hyeu249/noname-ent-schema/ent/productquote"
	"github.com/Hyeu249/noname-ent-schema/ent/user"
	"github.com/google/uuid"
)

// ItemHasOwnerUpdate is the builder for updating ItemHasOwner entities.
type ItemHasOwnerUpdate struct {
	config
	hooks    []Hook
	mutation *ItemHasOwnerMutation
}

// Where appends a list predicates to the ItemHasOwnerUpdate builder.
func (ihou *ItemHasOwnerUpdate) Where(ps ...predicate.ItemHasOwner) *ItemHasOwnerUpdate {
	ihou.mutation.Where(ps...)
	return ihou
}

// SetUpdateTime sets the "update_time" field.
func (ihou *ItemHasOwnerUpdate) SetUpdateTime(t time.Time) *ItemHasOwnerUpdate {
	ihou.mutation.SetUpdateTime(t)
	return ihou
}

// SetDeletedAt sets the "deleted_at" field.
func (ihou *ItemHasOwnerUpdate) SetDeletedAt(t time.Time) *ItemHasOwnerUpdate {
	ihou.mutation.SetDeletedAt(t)
	return ihou
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ihou *ItemHasOwnerUpdate) SetNillableDeletedAt(t *time.Time) *ItemHasOwnerUpdate {
	if t != nil {
		ihou.SetDeletedAt(*t)
	}
	return ihou
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ihou *ItemHasOwnerUpdate) ClearDeletedAt() *ItemHasOwnerUpdate {
	ihou.mutation.ClearDeletedAt()
	return ihou
}

// SetProductQuoteID sets the "product_quote" edge to the ProductQuote entity by ID.
func (ihou *ItemHasOwnerUpdate) SetProductQuoteID(id uuid.UUID) *ItemHasOwnerUpdate {
	ihou.mutation.SetProductQuoteID(id)
	return ihou
}

// SetProductQuote sets the "product_quote" edge to the ProductQuote entity.
func (ihou *ItemHasOwnerUpdate) SetProductQuote(p *ProductQuote) *ItemHasOwnerUpdate {
	return ihou.SetProductQuoteID(p.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ihou *ItemHasOwnerUpdate) SetUserID(id uuid.UUID) *ItemHasOwnerUpdate {
	ihou.mutation.SetUserID(id)
	return ihou
}

// SetUser sets the "user" edge to the User entity.
func (ihou *ItemHasOwnerUpdate) SetUser(u *User) *ItemHasOwnerUpdate {
	return ihou.SetUserID(u.ID)
}

// AddOrderIDs adds the "order" edge to the Order entity by IDs.
func (ihou *ItemHasOwnerUpdate) AddOrderIDs(ids ...uuid.UUID) *ItemHasOwnerUpdate {
	ihou.mutation.AddOrderIDs(ids...)
	return ihou
}

// AddOrder adds the "order" edges to the Order entity.
func (ihou *ItemHasOwnerUpdate) AddOrder(o ...*Order) *ItemHasOwnerUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ihou.AddOrderIDs(ids...)
}

// Mutation returns the ItemHasOwnerMutation object of the builder.
func (ihou *ItemHasOwnerUpdate) Mutation() *ItemHasOwnerMutation {
	return ihou.mutation
}

// ClearProductQuote clears the "product_quote" edge to the ProductQuote entity.
func (ihou *ItemHasOwnerUpdate) ClearProductQuote() *ItemHasOwnerUpdate {
	ihou.mutation.ClearProductQuote()
	return ihou
}

// ClearUser clears the "user" edge to the User entity.
func (ihou *ItemHasOwnerUpdate) ClearUser() *ItemHasOwnerUpdate {
	ihou.mutation.ClearUser()
	return ihou
}

// ClearOrder clears all "order" edges to the Order entity.
func (ihou *ItemHasOwnerUpdate) ClearOrder() *ItemHasOwnerUpdate {
	ihou.mutation.ClearOrder()
	return ihou
}

// RemoveOrderIDs removes the "order" edge to Order entities by IDs.
func (ihou *ItemHasOwnerUpdate) RemoveOrderIDs(ids ...uuid.UUID) *ItemHasOwnerUpdate {
	ihou.mutation.RemoveOrderIDs(ids...)
	return ihou
}

// RemoveOrder removes "order" edges to Order entities.
func (ihou *ItemHasOwnerUpdate) RemoveOrder(o ...*Order) *ItemHasOwnerUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ihou.RemoveOrderIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ihou *ItemHasOwnerUpdate) Save(ctx context.Context) (int, error) {
	ihou.defaults()
	return withHooks[int, ItemHasOwnerMutation](ctx, ihou.sqlSave, ihou.mutation, ihou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ihou *ItemHasOwnerUpdate) SaveX(ctx context.Context) int {
	affected, err := ihou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ihou *ItemHasOwnerUpdate) Exec(ctx context.Context) error {
	_, err := ihou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ihou *ItemHasOwnerUpdate) ExecX(ctx context.Context) {
	if err := ihou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ihou *ItemHasOwnerUpdate) defaults() {
	if _, ok := ihou.mutation.UpdateTime(); !ok {
		v := itemhasowner.UpdateDefaultUpdateTime()
		ihou.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ihou *ItemHasOwnerUpdate) check() error {
	if _, ok := ihou.mutation.ProductQuoteID(); ihou.mutation.ProductQuoteCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ItemHasOwner.product_quote"`)
	}
	if _, ok := ihou.mutation.UserID(); ihou.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ItemHasOwner.user"`)
	}
	return nil
}

func (ihou *ItemHasOwnerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ihou.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   itemhasowner.Table,
			Columns: itemhasowner.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: itemhasowner.FieldID,
			},
		},
	}
	if ps := ihou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ihou.mutation.UpdateTime(); ok {
		_spec.SetField(itemhasowner.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := ihou.mutation.DeletedAt(); ok {
		_spec.SetField(itemhasowner.FieldDeletedAt, field.TypeTime, value)
	}
	if ihou.mutation.DeletedAtCleared() {
		_spec.ClearField(itemhasowner.FieldDeletedAt, field.TypeTime)
	}
	if ihou.mutation.ProductQuoteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   itemhasowner.ProductQuoteTable,
			Columns: []string{itemhasowner.ProductQuoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: productquote.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ihou.mutation.ProductQuoteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   itemhasowner.ProductQuoteTable,
			Columns: []string{itemhasowner.ProductQuoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: productquote.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ihou.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   itemhasowner.UserTable,
			Columns: []string{itemhasowner.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ihou.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   itemhasowner.UserTable,
			Columns: []string{itemhasowner.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ihou.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   itemhasowner.OrderTable,
			Columns: []string{itemhasowner.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ihou.mutation.RemovedOrderIDs(); len(nodes) > 0 && !ihou.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   itemhasowner.OrderTable,
			Columns: []string{itemhasowner.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ihou.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   itemhasowner.OrderTable,
			Columns: []string{itemhasowner.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ihou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{itemhasowner.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ihou.mutation.done = true
	return n, nil
}

// ItemHasOwnerUpdateOne is the builder for updating a single ItemHasOwner entity.
type ItemHasOwnerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ItemHasOwnerMutation
}

// SetUpdateTime sets the "update_time" field.
func (ihouo *ItemHasOwnerUpdateOne) SetUpdateTime(t time.Time) *ItemHasOwnerUpdateOne {
	ihouo.mutation.SetUpdateTime(t)
	return ihouo
}

// SetDeletedAt sets the "deleted_at" field.
func (ihouo *ItemHasOwnerUpdateOne) SetDeletedAt(t time.Time) *ItemHasOwnerUpdateOne {
	ihouo.mutation.SetDeletedAt(t)
	return ihouo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ihouo *ItemHasOwnerUpdateOne) SetNillableDeletedAt(t *time.Time) *ItemHasOwnerUpdateOne {
	if t != nil {
		ihouo.SetDeletedAt(*t)
	}
	return ihouo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ihouo *ItemHasOwnerUpdateOne) ClearDeletedAt() *ItemHasOwnerUpdateOne {
	ihouo.mutation.ClearDeletedAt()
	return ihouo
}

// SetProductQuoteID sets the "product_quote" edge to the ProductQuote entity by ID.
func (ihouo *ItemHasOwnerUpdateOne) SetProductQuoteID(id uuid.UUID) *ItemHasOwnerUpdateOne {
	ihouo.mutation.SetProductQuoteID(id)
	return ihouo
}

// SetProductQuote sets the "product_quote" edge to the ProductQuote entity.
func (ihouo *ItemHasOwnerUpdateOne) SetProductQuote(p *ProductQuote) *ItemHasOwnerUpdateOne {
	return ihouo.SetProductQuoteID(p.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ihouo *ItemHasOwnerUpdateOne) SetUserID(id uuid.UUID) *ItemHasOwnerUpdateOne {
	ihouo.mutation.SetUserID(id)
	return ihouo
}

// SetUser sets the "user" edge to the User entity.
func (ihouo *ItemHasOwnerUpdateOne) SetUser(u *User) *ItemHasOwnerUpdateOne {
	return ihouo.SetUserID(u.ID)
}

// AddOrderIDs adds the "order" edge to the Order entity by IDs.
func (ihouo *ItemHasOwnerUpdateOne) AddOrderIDs(ids ...uuid.UUID) *ItemHasOwnerUpdateOne {
	ihouo.mutation.AddOrderIDs(ids...)
	return ihouo
}

// AddOrder adds the "order" edges to the Order entity.
func (ihouo *ItemHasOwnerUpdateOne) AddOrder(o ...*Order) *ItemHasOwnerUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ihouo.AddOrderIDs(ids...)
}

// Mutation returns the ItemHasOwnerMutation object of the builder.
func (ihouo *ItemHasOwnerUpdateOne) Mutation() *ItemHasOwnerMutation {
	return ihouo.mutation
}

// ClearProductQuote clears the "product_quote" edge to the ProductQuote entity.
func (ihouo *ItemHasOwnerUpdateOne) ClearProductQuote() *ItemHasOwnerUpdateOne {
	ihouo.mutation.ClearProductQuote()
	return ihouo
}

// ClearUser clears the "user" edge to the User entity.
func (ihouo *ItemHasOwnerUpdateOne) ClearUser() *ItemHasOwnerUpdateOne {
	ihouo.mutation.ClearUser()
	return ihouo
}

// ClearOrder clears all "order" edges to the Order entity.
func (ihouo *ItemHasOwnerUpdateOne) ClearOrder() *ItemHasOwnerUpdateOne {
	ihouo.mutation.ClearOrder()
	return ihouo
}

// RemoveOrderIDs removes the "order" edge to Order entities by IDs.
func (ihouo *ItemHasOwnerUpdateOne) RemoveOrderIDs(ids ...uuid.UUID) *ItemHasOwnerUpdateOne {
	ihouo.mutation.RemoveOrderIDs(ids...)
	return ihouo
}

// RemoveOrder removes "order" edges to Order entities.
func (ihouo *ItemHasOwnerUpdateOne) RemoveOrder(o ...*Order) *ItemHasOwnerUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ihouo.RemoveOrderIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ihouo *ItemHasOwnerUpdateOne) Select(field string, fields ...string) *ItemHasOwnerUpdateOne {
	ihouo.fields = append([]string{field}, fields...)
	return ihouo
}

// Save executes the query and returns the updated ItemHasOwner entity.
func (ihouo *ItemHasOwnerUpdateOne) Save(ctx context.Context) (*ItemHasOwner, error) {
	ihouo.defaults()
	return withHooks[*ItemHasOwner, ItemHasOwnerMutation](ctx, ihouo.sqlSave, ihouo.mutation, ihouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ihouo *ItemHasOwnerUpdateOne) SaveX(ctx context.Context) *ItemHasOwner {
	node, err := ihouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ihouo *ItemHasOwnerUpdateOne) Exec(ctx context.Context) error {
	_, err := ihouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ihouo *ItemHasOwnerUpdateOne) ExecX(ctx context.Context) {
	if err := ihouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ihouo *ItemHasOwnerUpdateOne) defaults() {
	if _, ok := ihouo.mutation.UpdateTime(); !ok {
		v := itemhasowner.UpdateDefaultUpdateTime()
		ihouo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ihouo *ItemHasOwnerUpdateOne) check() error {
	if _, ok := ihouo.mutation.ProductQuoteID(); ihouo.mutation.ProductQuoteCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ItemHasOwner.product_quote"`)
	}
	if _, ok := ihouo.mutation.UserID(); ihouo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ItemHasOwner.user"`)
	}
	return nil
}

func (ihouo *ItemHasOwnerUpdateOne) sqlSave(ctx context.Context) (_node *ItemHasOwner, err error) {
	if err := ihouo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   itemhasowner.Table,
			Columns: itemhasowner.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: itemhasowner.FieldID,
			},
		},
	}
	id, ok := ihouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ItemHasOwner.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ihouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, itemhasowner.FieldID)
		for _, f := range fields {
			if !itemhasowner.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != itemhasowner.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ihouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ihouo.mutation.UpdateTime(); ok {
		_spec.SetField(itemhasowner.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := ihouo.mutation.DeletedAt(); ok {
		_spec.SetField(itemhasowner.FieldDeletedAt, field.TypeTime, value)
	}
	if ihouo.mutation.DeletedAtCleared() {
		_spec.ClearField(itemhasowner.FieldDeletedAt, field.TypeTime)
	}
	if ihouo.mutation.ProductQuoteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   itemhasowner.ProductQuoteTable,
			Columns: []string{itemhasowner.ProductQuoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: productquote.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ihouo.mutation.ProductQuoteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   itemhasowner.ProductQuoteTable,
			Columns: []string{itemhasowner.ProductQuoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: productquote.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ihouo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   itemhasowner.UserTable,
			Columns: []string{itemhasowner.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ihouo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   itemhasowner.UserTable,
			Columns: []string{itemhasowner.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ihouo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   itemhasowner.OrderTable,
			Columns: []string{itemhasowner.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ihouo.mutation.RemovedOrderIDs(); len(nodes) > 0 && !ihouo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   itemhasowner.OrderTable,
			Columns: []string{itemhasowner.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ihouo.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   itemhasowner.OrderTable,
			Columns: []string{itemhasowner.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ItemHasOwner{config: ihouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ihouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{itemhasowner.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ihouo.mutation.done = true
	return _node, nil
}
