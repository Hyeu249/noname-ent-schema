// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Hyeu249/noname-ent-schema/ent/goods"
	"github.com/Hyeu249/noname-ent-schema/ent/typeofgoods"
	"github.com/google/uuid"
)

// TypeOfGoodsCreate is the builder for creating a TypeOfGoods entity.
type TypeOfGoodsCreate struct {
	config
	mutation *TypeOfGoodsMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (togc *TypeOfGoodsCreate) SetCreateTime(t time.Time) *TypeOfGoodsCreate {
	togc.mutation.SetCreateTime(t)
	return togc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (togc *TypeOfGoodsCreate) SetNillableCreateTime(t *time.Time) *TypeOfGoodsCreate {
	if t != nil {
		togc.SetCreateTime(*t)
	}
	return togc
}

// SetUpdateTime sets the "update_time" field.
func (togc *TypeOfGoodsCreate) SetUpdateTime(t time.Time) *TypeOfGoodsCreate {
	togc.mutation.SetUpdateTime(t)
	return togc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (togc *TypeOfGoodsCreate) SetNillableUpdateTime(t *time.Time) *TypeOfGoodsCreate {
	if t != nil {
		togc.SetUpdateTime(*t)
	}
	return togc
}

// SetDeletedAt sets the "deleted_at" field.
func (togc *TypeOfGoodsCreate) SetDeletedAt(t time.Time) *TypeOfGoodsCreate {
	togc.mutation.SetDeletedAt(t)
	return togc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (togc *TypeOfGoodsCreate) SetNillableDeletedAt(t *time.Time) *TypeOfGoodsCreate {
	if t != nil {
		togc.SetDeletedAt(*t)
	}
	return togc
}

// SetName sets the "name" field.
func (togc *TypeOfGoodsCreate) SetName(s string) *TypeOfGoodsCreate {
	togc.mutation.SetName(s)
	return togc
}

// SetType sets the "type" field.
func (togc *TypeOfGoodsCreate) SetType(s string) *TypeOfGoodsCreate {
	togc.mutation.SetType(s)
	return togc
}

// SetDescription sets the "description" field.
func (togc *TypeOfGoodsCreate) SetDescription(s string) *TypeOfGoodsCreate {
	togc.mutation.SetDescription(s)
	return togc
}

// SetID sets the "id" field.
func (togc *TypeOfGoodsCreate) SetID(u uuid.UUID) *TypeOfGoodsCreate {
	togc.mutation.SetID(u)
	return togc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (togc *TypeOfGoodsCreate) SetNillableID(u *uuid.UUID) *TypeOfGoodsCreate {
	if u != nil {
		togc.SetID(*u)
	}
	return togc
}

// SetGoodsID sets the "goods" edge to the Goods entity by ID.
func (togc *TypeOfGoodsCreate) SetGoodsID(id uuid.UUID) *TypeOfGoodsCreate {
	togc.mutation.SetGoodsID(id)
	return togc
}

// SetNillableGoodsID sets the "goods" edge to the Goods entity by ID if the given value is not nil.
func (togc *TypeOfGoodsCreate) SetNillableGoodsID(id *uuid.UUID) *TypeOfGoodsCreate {
	if id != nil {
		togc = togc.SetGoodsID(*id)
	}
	return togc
}

// SetGoods sets the "goods" edge to the Goods entity.
func (togc *TypeOfGoodsCreate) SetGoods(g *Goods) *TypeOfGoodsCreate {
	return togc.SetGoodsID(g.ID)
}

// Mutation returns the TypeOfGoodsMutation object of the builder.
func (togc *TypeOfGoodsCreate) Mutation() *TypeOfGoodsMutation {
	return togc.mutation
}

// Save creates the TypeOfGoods in the database.
func (togc *TypeOfGoodsCreate) Save(ctx context.Context) (*TypeOfGoods, error) {
	togc.defaults()
	return withHooks[*TypeOfGoods, TypeOfGoodsMutation](ctx, togc.sqlSave, togc.mutation, togc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (togc *TypeOfGoodsCreate) SaveX(ctx context.Context) *TypeOfGoods {
	v, err := togc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (togc *TypeOfGoodsCreate) Exec(ctx context.Context) error {
	_, err := togc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (togc *TypeOfGoodsCreate) ExecX(ctx context.Context) {
	if err := togc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (togc *TypeOfGoodsCreate) defaults() {
	if _, ok := togc.mutation.CreateTime(); !ok {
		v := typeofgoods.DefaultCreateTime()
		togc.mutation.SetCreateTime(v)
	}
	if _, ok := togc.mutation.UpdateTime(); !ok {
		v := typeofgoods.DefaultUpdateTime()
		togc.mutation.SetUpdateTime(v)
	}
	if _, ok := togc.mutation.ID(); !ok {
		v := typeofgoods.DefaultID()
		togc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (togc *TypeOfGoodsCreate) check() error {
	if _, ok := togc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "TypeOfGoods.create_time"`)}
	}
	if _, ok := togc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "TypeOfGoods.update_time"`)}
	}
	if _, ok := togc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "TypeOfGoods.name"`)}
	}
	if v, ok := togc.mutation.Name(); ok {
		if err := typeofgoods.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "TypeOfGoods.name": %w`, err)}
		}
	}
	if _, ok := togc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "TypeOfGoods.type"`)}
	}
	if v, ok := togc.mutation.GetType(); ok {
		if err := typeofgoods.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "TypeOfGoods.type": %w`, err)}
		}
	}
	if _, ok := togc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "TypeOfGoods.description"`)}
	}
	return nil
}

func (togc *TypeOfGoodsCreate) sqlSave(ctx context.Context) (*TypeOfGoods, error) {
	if err := togc.check(); err != nil {
		return nil, err
	}
	_node, _spec := togc.createSpec()
	if err := sqlgraph.CreateNode(ctx, togc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	togc.mutation.id = &_node.ID
	togc.mutation.done = true
	return _node, nil
}

func (togc *TypeOfGoodsCreate) createSpec() (*TypeOfGoods, *sqlgraph.CreateSpec) {
	var (
		_node = &TypeOfGoods{config: togc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: typeofgoods.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: typeofgoods.FieldID,
			},
		}
	)
	if id, ok := togc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := togc.mutation.CreateTime(); ok {
		_spec.SetField(typeofgoods.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := togc.mutation.UpdateTime(); ok {
		_spec.SetField(typeofgoods.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := togc.mutation.DeletedAt(); ok {
		_spec.SetField(typeofgoods.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := togc.mutation.Name(); ok {
		_spec.SetField(typeofgoods.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := togc.mutation.GetType(); ok {
		_spec.SetField(typeofgoods.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := togc.mutation.Description(); ok {
		_spec.SetField(typeofgoods.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if nodes := togc.mutation.GoodsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   typeofgoods.GoodsTable,
			Columns: []string{typeofgoods.GoodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: goods.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.goods_type_of_goods = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TypeOfGoodsCreateBulk is the builder for creating many TypeOfGoods entities in bulk.
type TypeOfGoodsCreateBulk struct {
	config
	builders []*TypeOfGoodsCreate
}

// Save creates the TypeOfGoods entities in the database.
func (togcb *TypeOfGoodsCreateBulk) Save(ctx context.Context) ([]*TypeOfGoods, error) {
	specs := make([]*sqlgraph.CreateSpec, len(togcb.builders))
	nodes := make([]*TypeOfGoods, len(togcb.builders))
	mutators := make([]Mutator, len(togcb.builders))
	for i := range togcb.builders {
		func(i int, root context.Context) {
			builder := togcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TypeOfGoodsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, togcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, togcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, togcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (togcb *TypeOfGoodsCreateBulk) SaveX(ctx context.Context) []*TypeOfGoods {
	v, err := togcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (togcb *TypeOfGoodsCreateBulk) Exec(ctx context.Context) error {
	_, err := togcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (togcb *TypeOfGoodsCreateBulk) ExecX(ctx context.Context) {
	if err := togcb.Exec(ctx); err != nil {
		panic(err)
	}
}
