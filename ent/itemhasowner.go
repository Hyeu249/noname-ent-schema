// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Hyeu249/noname-ent-schema/ent/itemhasowner"
	"github.com/Hyeu249/noname-ent-schema/ent/productquote"
	"github.com/Hyeu249/noname-ent-schema/ent/user"
	"github.com/google/uuid"
)

// ItemHasOwner is the model entity for the ItemHasOwner schema.
type ItemHasOwner struct {
	config `json:"-"`
	// ID of the ent.
	// UUID of Item Has Owner (UUID hàng đã có chủ)
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ItemHasOwnerQuery when eager-loading is set.
	Edges                        ItemHasOwnerEdges `json:"edges"`
	item_has_owner_product_quote *uuid.UUID
	item_has_owner_user          *uuid.UUID
}

// ItemHasOwnerEdges holds the relations/edges for other nodes in the graph.
type ItemHasOwnerEdges struct {
	// ProductQuote holds the value of the product_quote edge.
	ProductQuote *ProductQuote `json:"product_quote,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Order holds the value of the order edge.
	Order []*Order `json:"order,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ProductQuoteOrErr returns the ProductQuote value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ItemHasOwnerEdges) ProductQuoteOrErr() (*ProductQuote, error) {
	if e.loadedTypes[0] {
		if e.ProductQuote == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: productquote.Label}
		}
		return e.ProductQuote, nil
	}
	return nil, &NotLoadedError{edge: "product_quote"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ItemHasOwnerEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// OrderOrErr returns the Order value or an error if the edge
// was not loaded in eager-loading.
func (e ItemHasOwnerEdges) OrderOrErr() ([]*Order, error) {
	if e.loadedTypes[2] {
		return e.Order, nil
	}
	return nil, &NotLoadedError{edge: "order"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ItemHasOwner) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case itemhasowner.FieldCreateTime, itemhasowner.FieldUpdateTime, itemhasowner.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case itemhasowner.FieldID:
			values[i] = new(uuid.UUID)
		case itemhasowner.ForeignKeys[0]: // item_has_owner_product_quote
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case itemhasowner.ForeignKeys[1]: // item_has_owner_user
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type ItemHasOwner", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ItemHasOwner fields.
func (iho *ItemHasOwner) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case itemhasowner.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				iho.ID = *value
			}
		case itemhasowner.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				iho.CreateTime = value.Time
			}
		case itemhasowner.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				iho.UpdateTime = value.Time
			}
		case itemhasowner.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				iho.DeletedAt = new(time.Time)
				*iho.DeletedAt = value.Time
			}
		case itemhasowner.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field item_has_owner_product_quote", values[i])
			} else if value.Valid {
				iho.item_has_owner_product_quote = new(uuid.UUID)
				*iho.item_has_owner_product_quote = *value.S.(*uuid.UUID)
			}
		case itemhasowner.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field item_has_owner_user", values[i])
			} else if value.Valid {
				iho.item_has_owner_user = new(uuid.UUID)
				*iho.item_has_owner_user = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryProductQuote queries the "product_quote" edge of the ItemHasOwner entity.
func (iho *ItemHasOwner) QueryProductQuote() *ProductQuoteQuery {
	return NewItemHasOwnerClient(iho.config).QueryProductQuote(iho)
}

// QueryUser queries the "user" edge of the ItemHasOwner entity.
func (iho *ItemHasOwner) QueryUser() *UserQuery {
	return NewItemHasOwnerClient(iho.config).QueryUser(iho)
}

// QueryOrder queries the "order" edge of the ItemHasOwner entity.
func (iho *ItemHasOwner) QueryOrder() *OrderQuery {
	return NewItemHasOwnerClient(iho.config).QueryOrder(iho)
}

// Update returns a builder for updating this ItemHasOwner.
// Note that you need to call ItemHasOwner.Unwrap() before calling this method if this ItemHasOwner
// was returned from a transaction, and the transaction was committed or rolled back.
func (iho *ItemHasOwner) Update() *ItemHasOwnerUpdateOne {
	return NewItemHasOwnerClient(iho.config).UpdateOne(iho)
}

// Unwrap unwraps the ItemHasOwner entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (iho *ItemHasOwner) Unwrap() *ItemHasOwner {
	_tx, ok := iho.config.driver.(*txDriver)
	if !ok {
		panic("ent: ItemHasOwner is not a transactional entity")
	}
	iho.config.driver = _tx.drv
	return iho
}

// String implements the fmt.Stringer.
func (iho *ItemHasOwner) String() string {
	var builder strings.Builder
	builder.WriteString("ItemHasOwner(")
	builder.WriteString(fmt.Sprintf("id=%v, ", iho.ID))
	builder.WriteString("create_time=")
	builder.WriteString(iho.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(iho.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := iho.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// ItemHasOwners is a parsable slice of ItemHasOwner.
type ItemHasOwners []*ItemHasOwner

func (iho ItemHasOwners) config(cfg config) {
	for _i := range iho {
		iho[_i].config = cfg
	}
}
