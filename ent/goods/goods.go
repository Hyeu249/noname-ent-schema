// Code generated by ent, DO NOT EDIT.

package goods

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the goods type in the database.
	Label = "goods"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// EdgeTypeOfGoods holds the string denoting the type_of_goods edge name in mutations.
	EdgeTypeOfGoods = "type_of_goods"
	// EdgeImageOfUser holds the string denoting the image_of_user edge name in mutations.
	EdgeImageOfUser = "image_of_user"
	// EdgeProductQuote holds the string denoting the product_quote edge name in mutations.
	EdgeProductQuote = "product_quote"
	// Table holds the table name of the goods in the database.
	Table = "goods"
	// TypeOfGoodsTable is the table that holds the type_of_goods relation/edge.
	TypeOfGoodsTable = "type_of_goods"
	// TypeOfGoodsInverseTable is the table name for the TypeOfGoods entity.
	// It exists in this package in order to avoid circular dependency with the "typeofgoods" package.
	TypeOfGoodsInverseTable = "type_of_goods"
	// TypeOfGoodsColumn is the table column denoting the type_of_goods relation/edge.
	TypeOfGoodsColumn = "goods_type_of_goods"
	// ImageOfUserTable is the table that holds the image_of_user relation/edge.
	ImageOfUserTable = "image_of_users"
	// ImageOfUserInverseTable is the table name for the ImageOfUser entity.
	// It exists in this package in order to avoid circular dependency with the "imageofuser" package.
	ImageOfUserInverseTable = "image_of_users"
	// ImageOfUserColumn is the table column denoting the image_of_user relation/edge.
	ImageOfUserColumn = "goods_image_of_user"
	// ProductQuoteTable is the table that holds the product_quote relation/edge.
	ProductQuoteTable = "product_quotes"
	// ProductQuoteInverseTable is the table name for the ProductQuote entity.
	// It exists in this package in order to avoid circular dependency with the "productquote" package.
	ProductQuoteInverseTable = "product_quotes"
	// ProductQuoteColumn is the table column denoting the product_quote relation/edge.
	ProductQuoteColumn = "product_quote_goods"
)

// Columns holds all SQL columns for goods fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldDeletedAt,
	FieldDescription,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
