// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Hyeu249/noname-ent-schema/ent/goods"
	"github.com/Hyeu249/noname-ent-schema/ent/imageofuser"
	"github.com/Hyeu249/noname-ent-schema/ent/predicate"
	"github.com/Hyeu249/noname-ent-schema/ent/productquote"
	"github.com/Hyeu249/noname-ent-schema/ent/typeofgoods"
	"github.com/google/uuid"
)

// GoodsUpdate is the builder for updating Goods entities.
type GoodsUpdate struct {
	config
	hooks    []Hook
	mutation *GoodsMutation
}

// Where appends a list predicates to the GoodsUpdate builder.
func (gu *GoodsUpdate) Where(ps ...predicate.Goods) *GoodsUpdate {
	gu.mutation.Where(ps...)
	return gu
}

// SetUpdateTime sets the "update_time" field.
func (gu *GoodsUpdate) SetUpdateTime(t time.Time) *GoodsUpdate {
	gu.mutation.SetUpdateTime(t)
	return gu
}

// SetDeletedAt sets the "deleted_at" field.
func (gu *GoodsUpdate) SetDeletedAt(t time.Time) *GoodsUpdate {
	gu.mutation.SetDeletedAt(t)
	return gu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gu *GoodsUpdate) SetNillableDeletedAt(t *time.Time) *GoodsUpdate {
	if t != nil {
		gu.SetDeletedAt(*t)
	}
	return gu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (gu *GoodsUpdate) ClearDeletedAt() *GoodsUpdate {
	gu.mutation.ClearDeletedAt()
	return gu
}

// SetDescription sets the "description" field.
func (gu *GoodsUpdate) SetDescription(s string) *GoodsUpdate {
	gu.mutation.SetDescription(s)
	return gu
}

// SetTypeOfGoodsID sets the "type_of_goods" edge to the TypeOfGoods entity by ID.
func (gu *GoodsUpdate) SetTypeOfGoodsID(id uuid.UUID) *GoodsUpdate {
	gu.mutation.SetTypeOfGoodsID(id)
	return gu
}

// SetTypeOfGoods sets the "type_of_goods" edge to the TypeOfGoods entity.
func (gu *GoodsUpdate) SetTypeOfGoods(t *TypeOfGoods) *GoodsUpdate {
	return gu.SetTypeOfGoodsID(t.ID)
}

// SetImageOfUserID sets the "image_of_user" edge to the ImageOfUser entity by ID.
func (gu *GoodsUpdate) SetImageOfUserID(id uuid.UUID) *GoodsUpdate {
	gu.mutation.SetImageOfUserID(id)
	return gu
}

// SetImageOfUser sets the "image_of_user" edge to the ImageOfUser entity.
func (gu *GoodsUpdate) SetImageOfUser(i *ImageOfUser) *GoodsUpdate {
	return gu.SetImageOfUserID(i.ID)
}

// AddProductQuoteIDs adds the "product_quote" edge to the ProductQuote entity by IDs.
func (gu *GoodsUpdate) AddProductQuoteIDs(ids ...uuid.UUID) *GoodsUpdate {
	gu.mutation.AddProductQuoteIDs(ids...)
	return gu
}

// AddProductQuote adds the "product_quote" edges to the ProductQuote entity.
func (gu *GoodsUpdate) AddProductQuote(p ...*ProductQuote) *GoodsUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gu.AddProductQuoteIDs(ids...)
}

// Mutation returns the GoodsMutation object of the builder.
func (gu *GoodsUpdate) Mutation() *GoodsMutation {
	return gu.mutation
}

// ClearTypeOfGoods clears the "type_of_goods" edge to the TypeOfGoods entity.
func (gu *GoodsUpdate) ClearTypeOfGoods() *GoodsUpdate {
	gu.mutation.ClearTypeOfGoods()
	return gu
}

// ClearImageOfUser clears the "image_of_user" edge to the ImageOfUser entity.
func (gu *GoodsUpdate) ClearImageOfUser() *GoodsUpdate {
	gu.mutation.ClearImageOfUser()
	return gu
}

// ClearProductQuote clears all "product_quote" edges to the ProductQuote entity.
func (gu *GoodsUpdate) ClearProductQuote() *GoodsUpdate {
	gu.mutation.ClearProductQuote()
	return gu
}

// RemoveProductQuoteIDs removes the "product_quote" edge to ProductQuote entities by IDs.
func (gu *GoodsUpdate) RemoveProductQuoteIDs(ids ...uuid.UUID) *GoodsUpdate {
	gu.mutation.RemoveProductQuoteIDs(ids...)
	return gu
}

// RemoveProductQuote removes "product_quote" edges to ProductQuote entities.
func (gu *GoodsUpdate) RemoveProductQuote(p ...*ProductQuote) *GoodsUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gu.RemoveProductQuoteIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gu *GoodsUpdate) Save(ctx context.Context) (int, error) {
	gu.defaults()
	return withHooks[int, GoodsMutation](ctx, gu.sqlSave, gu.mutation, gu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GoodsUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GoodsUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GoodsUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gu *GoodsUpdate) defaults() {
	if _, ok := gu.mutation.UpdateTime(); !ok {
		v := goods.UpdateDefaultUpdateTime()
		gu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gu *GoodsUpdate) check() error {
	if _, ok := gu.mutation.TypeOfGoodsID(); gu.mutation.TypeOfGoodsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Goods.type_of_goods"`)
	}
	if _, ok := gu.mutation.ImageOfUserID(); gu.mutation.ImageOfUserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Goods.image_of_user"`)
	}
	return nil
}

func (gu *GoodsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goods.Table,
			Columns: goods.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: goods.FieldID,
			},
		},
	}
	if ps := gu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gu.mutation.UpdateTime(); ok {
		_spec.SetField(goods.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := gu.mutation.DeletedAt(); ok {
		_spec.SetField(goods.FieldDeletedAt, field.TypeTime, value)
	}
	if gu.mutation.DeletedAtCleared() {
		_spec.ClearField(goods.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := gu.mutation.Description(); ok {
		_spec.SetField(goods.FieldDescription, field.TypeString, value)
	}
	if gu.mutation.TypeOfGoodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   goods.TypeOfGoodsTable,
			Columns: []string{goods.TypeOfGoodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: typeofgoods.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.TypeOfGoodsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   goods.TypeOfGoodsTable,
			Columns: []string{goods.TypeOfGoodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: typeofgoods.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.ImageOfUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   goods.ImageOfUserTable,
			Columns: []string{goods.ImageOfUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: imageofuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.ImageOfUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   goods.ImageOfUserTable,
			Columns: []string{goods.ImageOfUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: imageofuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.ProductQuoteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   goods.ProductQuoteTable,
			Columns: []string{goods.ProductQuoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: productquote.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedProductQuoteIDs(); len(nodes) > 0 && !gu.mutation.ProductQuoteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   goods.ProductQuoteTable,
			Columns: []string{goods.ProductQuoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: productquote.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.ProductQuoteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   goods.ProductQuoteTable,
			Columns: []string{goods.ProductQuoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: productquote.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goods.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gu.mutation.done = true
	return n, nil
}

// GoodsUpdateOne is the builder for updating a single Goods entity.
type GoodsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GoodsMutation
}

// SetUpdateTime sets the "update_time" field.
func (guo *GoodsUpdateOne) SetUpdateTime(t time.Time) *GoodsUpdateOne {
	guo.mutation.SetUpdateTime(t)
	return guo
}

// SetDeletedAt sets the "deleted_at" field.
func (guo *GoodsUpdateOne) SetDeletedAt(t time.Time) *GoodsUpdateOne {
	guo.mutation.SetDeletedAt(t)
	return guo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (guo *GoodsUpdateOne) SetNillableDeletedAt(t *time.Time) *GoodsUpdateOne {
	if t != nil {
		guo.SetDeletedAt(*t)
	}
	return guo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (guo *GoodsUpdateOne) ClearDeletedAt() *GoodsUpdateOne {
	guo.mutation.ClearDeletedAt()
	return guo
}

// SetDescription sets the "description" field.
func (guo *GoodsUpdateOne) SetDescription(s string) *GoodsUpdateOne {
	guo.mutation.SetDescription(s)
	return guo
}

// SetTypeOfGoodsID sets the "type_of_goods" edge to the TypeOfGoods entity by ID.
func (guo *GoodsUpdateOne) SetTypeOfGoodsID(id uuid.UUID) *GoodsUpdateOne {
	guo.mutation.SetTypeOfGoodsID(id)
	return guo
}

// SetTypeOfGoods sets the "type_of_goods" edge to the TypeOfGoods entity.
func (guo *GoodsUpdateOne) SetTypeOfGoods(t *TypeOfGoods) *GoodsUpdateOne {
	return guo.SetTypeOfGoodsID(t.ID)
}

// SetImageOfUserID sets the "image_of_user" edge to the ImageOfUser entity by ID.
func (guo *GoodsUpdateOne) SetImageOfUserID(id uuid.UUID) *GoodsUpdateOne {
	guo.mutation.SetImageOfUserID(id)
	return guo
}

// SetImageOfUser sets the "image_of_user" edge to the ImageOfUser entity.
func (guo *GoodsUpdateOne) SetImageOfUser(i *ImageOfUser) *GoodsUpdateOne {
	return guo.SetImageOfUserID(i.ID)
}

// AddProductQuoteIDs adds the "product_quote" edge to the ProductQuote entity by IDs.
func (guo *GoodsUpdateOne) AddProductQuoteIDs(ids ...uuid.UUID) *GoodsUpdateOne {
	guo.mutation.AddProductQuoteIDs(ids...)
	return guo
}

// AddProductQuote adds the "product_quote" edges to the ProductQuote entity.
func (guo *GoodsUpdateOne) AddProductQuote(p ...*ProductQuote) *GoodsUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return guo.AddProductQuoteIDs(ids...)
}

// Mutation returns the GoodsMutation object of the builder.
func (guo *GoodsUpdateOne) Mutation() *GoodsMutation {
	return guo.mutation
}

// ClearTypeOfGoods clears the "type_of_goods" edge to the TypeOfGoods entity.
func (guo *GoodsUpdateOne) ClearTypeOfGoods() *GoodsUpdateOne {
	guo.mutation.ClearTypeOfGoods()
	return guo
}

// ClearImageOfUser clears the "image_of_user" edge to the ImageOfUser entity.
func (guo *GoodsUpdateOne) ClearImageOfUser() *GoodsUpdateOne {
	guo.mutation.ClearImageOfUser()
	return guo
}

// ClearProductQuote clears all "product_quote" edges to the ProductQuote entity.
func (guo *GoodsUpdateOne) ClearProductQuote() *GoodsUpdateOne {
	guo.mutation.ClearProductQuote()
	return guo
}

// RemoveProductQuoteIDs removes the "product_quote" edge to ProductQuote entities by IDs.
func (guo *GoodsUpdateOne) RemoveProductQuoteIDs(ids ...uuid.UUID) *GoodsUpdateOne {
	guo.mutation.RemoveProductQuoteIDs(ids...)
	return guo
}

// RemoveProductQuote removes "product_quote" edges to ProductQuote entities.
func (guo *GoodsUpdateOne) RemoveProductQuote(p ...*ProductQuote) *GoodsUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return guo.RemoveProductQuoteIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guo *GoodsUpdateOne) Select(field string, fields ...string) *GoodsUpdateOne {
	guo.fields = append([]string{field}, fields...)
	return guo
}

// Save executes the query and returns the updated Goods entity.
func (guo *GoodsUpdateOne) Save(ctx context.Context) (*Goods, error) {
	guo.defaults()
	return withHooks[*Goods, GoodsMutation](ctx, guo.sqlSave, guo.mutation, guo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GoodsUpdateOne) SaveX(ctx context.Context) *Goods {
	node, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guo *GoodsUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GoodsUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (guo *GoodsUpdateOne) defaults() {
	if _, ok := guo.mutation.UpdateTime(); !ok {
		v := goods.UpdateDefaultUpdateTime()
		guo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (guo *GoodsUpdateOne) check() error {
	if _, ok := guo.mutation.TypeOfGoodsID(); guo.mutation.TypeOfGoodsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Goods.type_of_goods"`)
	}
	if _, ok := guo.mutation.ImageOfUserID(); guo.mutation.ImageOfUserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Goods.image_of_user"`)
	}
	return nil
}

func (guo *GoodsUpdateOne) sqlSave(ctx context.Context) (_node *Goods, err error) {
	if err := guo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goods.Table,
			Columns: goods.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: goods.FieldID,
			},
		},
	}
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Goods.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := guo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, goods.FieldID)
		for _, f := range fields {
			if !goods.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != goods.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guo.mutation.UpdateTime(); ok {
		_spec.SetField(goods.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := guo.mutation.DeletedAt(); ok {
		_spec.SetField(goods.FieldDeletedAt, field.TypeTime, value)
	}
	if guo.mutation.DeletedAtCleared() {
		_spec.ClearField(goods.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := guo.mutation.Description(); ok {
		_spec.SetField(goods.FieldDescription, field.TypeString, value)
	}
	if guo.mutation.TypeOfGoodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   goods.TypeOfGoodsTable,
			Columns: []string{goods.TypeOfGoodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: typeofgoods.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.TypeOfGoodsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   goods.TypeOfGoodsTable,
			Columns: []string{goods.TypeOfGoodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: typeofgoods.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.ImageOfUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   goods.ImageOfUserTable,
			Columns: []string{goods.ImageOfUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: imageofuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.ImageOfUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   goods.ImageOfUserTable,
			Columns: []string{goods.ImageOfUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: imageofuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.ProductQuoteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   goods.ProductQuoteTable,
			Columns: []string{goods.ProductQuoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: productquote.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedProductQuoteIDs(); len(nodes) > 0 && !guo.mutation.ProductQuoteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   goods.ProductQuoteTable,
			Columns: []string{goods.ProductQuoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: productquote.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.ProductQuoteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   goods.ProductQuoteTable,
			Columns: []string{goods.ProductQuoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: productquote.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Goods{config: guo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goods.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	guo.mutation.done = true
	return _node, nil
}
