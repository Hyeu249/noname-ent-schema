// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Hyeu249/noname-ent-schema/ent/itemhasowner"
	"github.com/Hyeu249/noname-ent-schema/ent/order"
	"github.com/Hyeu249/noname-ent-schema/ent/productquote"
	"github.com/Hyeu249/noname-ent-schema/ent/user"
	"github.com/google/uuid"
)

// ItemHasOwnerCreate is the builder for creating a ItemHasOwner entity.
type ItemHasOwnerCreate struct {
	config
	mutation *ItemHasOwnerMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (ihoc *ItemHasOwnerCreate) SetCreateTime(t time.Time) *ItemHasOwnerCreate {
	ihoc.mutation.SetCreateTime(t)
	return ihoc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ihoc *ItemHasOwnerCreate) SetNillableCreateTime(t *time.Time) *ItemHasOwnerCreate {
	if t != nil {
		ihoc.SetCreateTime(*t)
	}
	return ihoc
}

// SetUpdateTime sets the "update_time" field.
func (ihoc *ItemHasOwnerCreate) SetUpdateTime(t time.Time) *ItemHasOwnerCreate {
	ihoc.mutation.SetUpdateTime(t)
	return ihoc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ihoc *ItemHasOwnerCreate) SetNillableUpdateTime(t *time.Time) *ItemHasOwnerCreate {
	if t != nil {
		ihoc.SetUpdateTime(*t)
	}
	return ihoc
}

// SetDeletedAt sets the "deleted_at" field.
func (ihoc *ItemHasOwnerCreate) SetDeletedAt(t time.Time) *ItemHasOwnerCreate {
	ihoc.mutation.SetDeletedAt(t)
	return ihoc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ihoc *ItemHasOwnerCreate) SetNillableDeletedAt(t *time.Time) *ItemHasOwnerCreate {
	if t != nil {
		ihoc.SetDeletedAt(*t)
	}
	return ihoc
}

// SetID sets the "id" field.
func (ihoc *ItemHasOwnerCreate) SetID(u uuid.UUID) *ItemHasOwnerCreate {
	ihoc.mutation.SetID(u)
	return ihoc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ihoc *ItemHasOwnerCreate) SetNillableID(u *uuid.UUID) *ItemHasOwnerCreate {
	if u != nil {
		ihoc.SetID(*u)
	}
	return ihoc
}

// SetProductQuoteID sets the "product_quote" edge to the ProductQuote entity by ID.
func (ihoc *ItemHasOwnerCreate) SetProductQuoteID(id uuid.UUID) *ItemHasOwnerCreate {
	ihoc.mutation.SetProductQuoteID(id)
	return ihoc
}

// SetProductQuote sets the "product_quote" edge to the ProductQuote entity.
func (ihoc *ItemHasOwnerCreate) SetProductQuote(p *ProductQuote) *ItemHasOwnerCreate {
	return ihoc.SetProductQuoteID(p.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ihoc *ItemHasOwnerCreate) SetUserID(id uuid.UUID) *ItemHasOwnerCreate {
	ihoc.mutation.SetUserID(id)
	return ihoc
}

// SetUser sets the "user" edge to the User entity.
func (ihoc *ItemHasOwnerCreate) SetUser(u *User) *ItemHasOwnerCreate {
	return ihoc.SetUserID(u.ID)
}

// AddOrderIDs adds the "order" edge to the Order entity by IDs.
func (ihoc *ItemHasOwnerCreate) AddOrderIDs(ids ...uuid.UUID) *ItemHasOwnerCreate {
	ihoc.mutation.AddOrderIDs(ids...)
	return ihoc
}

// AddOrder adds the "order" edges to the Order entity.
func (ihoc *ItemHasOwnerCreate) AddOrder(o ...*Order) *ItemHasOwnerCreate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ihoc.AddOrderIDs(ids...)
}

// Mutation returns the ItemHasOwnerMutation object of the builder.
func (ihoc *ItemHasOwnerCreate) Mutation() *ItemHasOwnerMutation {
	return ihoc.mutation
}

// Save creates the ItemHasOwner in the database.
func (ihoc *ItemHasOwnerCreate) Save(ctx context.Context) (*ItemHasOwner, error) {
	ihoc.defaults()
	return withHooks[*ItemHasOwner, ItemHasOwnerMutation](ctx, ihoc.sqlSave, ihoc.mutation, ihoc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ihoc *ItemHasOwnerCreate) SaveX(ctx context.Context) *ItemHasOwner {
	v, err := ihoc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ihoc *ItemHasOwnerCreate) Exec(ctx context.Context) error {
	_, err := ihoc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ihoc *ItemHasOwnerCreate) ExecX(ctx context.Context) {
	if err := ihoc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ihoc *ItemHasOwnerCreate) defaults() {
	if _, ok := ihoc.mutation.CreateTime(); !ok {
		v := itemhasowner.DefaultCreateTime()
		ihoc.mutation.SetCreateTime(v)
	}
	if _, ok := ihoc.mutation.UpdateTime(); !ok {
		v := itemhasowner.DefaultUpdateTime()
		ihoc.mutation.SetUpdateTime(v)
	}
	if _, ok := ihoc.mutation.ID(); !ok {
		v := itemhasowner.DefaultID()
		ihoc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ihoc *ItemHasOwnerCreate) check() error {
	if _, ok := ihoc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "ItemHasOwner.create_time"`)}
	}
	if _, ok := ihoc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "ItemHasOwner.update_time"`)}
	}
	if _, ok := ihoc.mutation.ProductQuoteID(); !ok {
		return &ValidationError{Name: "product_quote", err: errors.New(`ent: missing required edge "ItemHasOwner.product_quote"`)}
	}
	if _, ok := ihoc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "ItemHasOwner.user"`)}
	}
	return nil
}

func (ihoc *ItemHasOwnerCreate) sqlSave(ctx context.Context) (*ItemHasOwner, error) {
	if err := ihoc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ihoc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ihoc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ihoc.mutation.id = &_node.ID
	ihoc.mutation.done = true
	return _node, nil
}

func (ihoc *ItemHasOwnerCreate) createSpec() (*ItemHasOwner, *sqlgraph.CreateSpec) {
	var (
		_node = &ItemHasOwner{config: ihoc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: itemhasowner.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: itemhasowner.FieldID,
			},
		}
	)
	if id, ok := ihoc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ihoc.mutation.CreateTime(); ok {
		_spec.SetField(itemhasowner.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := ihoc.mutation.UpdateTime(); ok {
		_spec.SetField(itemhasowner.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := ihoc.mutation.DeletedAt(); ok {
		_spec.SetField(itemhasowner.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if nodes := ihoc.mutation.ProductQuoteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   itemhasowner.ProductQuoteTable,
			Columns: []string{itemhasowner.ProductQuoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: productquote.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.item_has_owner_product_quote = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ihoc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   itemhasowner.UserTable,
			Columns: []string{itemhasowner.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.item_has_owner_user = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ihoc.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   itemhasowner.OrderTable,
			Columns: []string{itemhasowner.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ItemHasOwnerCreateBulk is the builder for creating many ItemHasOwner entities in bulk.
type ItemHasOwnerCreateBulk struct {
	config
	builders []*ItemHasOwnerCreate
}

// Save creates the ItemHasOwner entities in the database.
func (ihocb *ItemHasOwnerCreateBulk) Save(ctx context.Context) ([]*ItemHasOwner, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ihocb.builders))
	nodes := make([]*ItemHasOwner, len(ihocb.builders))
	mutators := make([]Mutator, len(ihocb.builders))
	for i := range ihocb.builders {
		func(i int, root context.Context) {
			builder := ihocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ItemHasOwnerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ihocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ihocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ihocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ihocb *ItemHasOwnerCreateBulk) SaveX(ctx context.Context) []*ItemHasOwner {
	v, err := ihocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ihocb *ItemHasOwnerCreateBulk) Exec(ctx context.Context) error {
	_, err := ihocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ihocb *ItemHasOwnerCreateBulk) ExecX(ctx context.Context) {
	if err := ihocb.Exec(ctx); err != nil {
		panic(err)
	}
}
