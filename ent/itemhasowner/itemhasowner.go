// Code generated by ent, DO NOT EDIT.

package itemhasowner

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the itemhasowner type in the database.
	Label = "item_has_owner"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// EdgeProductQuote holds the string denoting the product_quote edge name in mutations.
	EdgeProductQuote = "product_quote"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeOrder holds the string denoting the order edge name in mutations.
	EdgeOrder = "order"
	// Table holds the table name of the itemhasowner in the database.
	Table = "item_has_owners"
	// ProductQuoteTable is the table that holds the product_quote relation/edge.
	ProductQuoteTable = "item_has_owners"
	// ProductQuoteInverseTable is the table name for the ProductQuote entity.
	// It exists in this package in order to avoid circular dependency with the "productquote" package.
	ProductQuoteInverseTable = "product_quotes"
	// ProductQuoteColumn is the table column denoting the product_quote relation/edge.
	ProductQuoteColumn = "item_has_owner_product_quote"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "item_has_owners"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "item_has_owner_user"
	// OrderTable is the table that holds the order relation/edge.
	OrderTable = "orders"
	// OrderInverseTable is the table name for the Order entity.
	// It exists in this package in order to avoid circular dependency with the "order" package.
	OrderInverseTable = "orders"
	// OrderColumn is the table column denoting the order relation/edge.
	OrderColumn = "order_item_has_owner"
)

// Columns holds all SQL columns for itemhasowner fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldDeletedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "item_has_owners"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"item_has_owner_product_quote",
	"item_has_owner_user",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
