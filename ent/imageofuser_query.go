// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Hyeu249/noname-ent-schema/ent/goods"
	"github.com/Hyeu249/noname-ent-schema/ent/image"
	"github.com/Hyeu249/noname-ent-schema/ent/imageofuser"
	"github.com/Hyeu249/noname-ent-schema/ent/predicate"
	"github.com/Hyeu249/noname-ent-schema/ent/productquote"
	"github.com/Hyeu249/noname-ent-schema/ent/user"
	"github.com/google/uuid"
)

// ImageOfUserQuery is the builder for querying ImageOfUser entities.
type ImageOfUserQuery struct {
	config
	ctx              *QueryContext
	order            []OrderFunc
	inters           []Interceptor
	predicates       []predicate.ImageOfUser
	withImage        *ImageQuery
	withUser         *UserQuery
	withGoods        *GoodsQuery
	withProductQuote *ProductQuoteQuery
	withFKs          bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ImageOfUserQuery builder.
func (iouq *ImageOfUserQuery) Where(ps ...predicate.ImageOfUser) *ImageOfUserQuery {
	iouq.predicates = append(iouq.predicates, ps...)
	return iouq
}

// Limit the number of records to be returned by this query.
func (iouq *ImageOfUserQuery) Limit(limit int) *ImageOfUserQuery {
	iouq.ctx.Limit = &limit
	return iouq
}

// Offset to start from.
func (iouq *ImageOfUserQuery) Offset(offset int) *ImageOfUserQuery {
	iouq.ctx.Offset = &offset
	return iouq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (iouq *ImageOfUserQuery) Unique(unique bool) *ImageOfUserQuery {
	iouq.ctx.Unique = &unique
	return iouq
}

// Order specifies how the records should be ordered.
func (iouq *ImageOfUserQuery) Order(o ...OrderFunc) *ImageOfUserQuery {
	iouq.order = append(iouq.order, o...)
	return iouq
}

// QueryImage chains the current query on the "image" edge.
func (iouq *ImageOfUserQuery) QueryImage() *ImageQuery {
	query := (&ImageClient{config: iouq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iouq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iouq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(imageofuser.Table, imageofuser.FieldID, selector),
			sqlgraph.To(image.Table, image.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, imageofuser.ImageTable, imageofuser.ImageColumn),
		)
		fromU = sqlgraph.SetNeighbors(iouq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUser chains the current query on the "user" edge.
func (iouq *ImageOfUserQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: iouq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iouq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iouq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(imageofuser.Table, imageofuser.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, imageofuser.UserTable, imageofuser.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(iouq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGoods chains the current query on the "goods" edge.
func (iouq *ImageOfUserQuery) QueryGoods() *GoodsQuery {
	query := (&GoodsClient{config: iouq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iouq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iouq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(imageofuser.Table, imageofuser.FieldID, selector),
			sqlgraph.To(goods.Table, goods.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, imageofuser.GoodsTable, imageofuser.GoodsColumn),
		)
		fromU = sqlgraph.SetNeighbors(iouq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProductQuote chains the current query on the "product_quote" edge.
func (iouq *ImageOfUserQuery) QueryProductQuote() *ProductQuoteQuery {
	query := (&ProductQuoteClient{config: iouq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iouq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iouq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(imageofuser.Table, imageofuser.FieldID, selector),
			sqlgraph.To(productquote.Table, productquote.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, imageofuser.ProductQuoteTable, imageofuser.ProductQuoteColumn),
		)
		fromU = sqlgraph.SetNeighbors(iouq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ImageOfUser entity from the query.
// Returns a *NotFoundError when no ImageOfUser was found.
func (iouq *ImageOfUserQuery) First(ctx context.Context) (*ImageOfUser, error) {
	nodes, err := iouq.Limit(1).All(setContextOp(ctx, iouq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{imageofuser.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (iouq *ImageOfUserQuery) FirstX(ctx context.Context) *ImageOfUser {
	node, err := iouq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ImageOfUser ID from the query.
// Returns a *NotFoundError when no ImageOfUser ID was found.
func (iouq *ImageOfUserQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = iouq.Limit(1).IDs(setContextOp(ctx, iouq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{imageofuser.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (iouq *ImageOfUserQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := iouq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ImageOfUser entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ImageOfUser entity is found.
// Returns a *NotFoundError when no ImageOfUser entities are found.
func (iouq *ImageOfUserQuery) Only(ctx context.Context) (*ImageOfUser, error) {
	nodes, err := iouq.Limit(2).All(setContextOp(ctx, iouq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{imageofuser.Label}
	default:
		return nil, &NotSingularError{imageofuser.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (iouq *ImageOfUserQuery) OnlyX(ctx context.Context) *ImageOfUser {
	node, err := iouq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ImageOfUser ID in the query.
// Returns a *NotSingularError when more than one ImageOfUser ID is found.
// Returns a *NotFoundError when no entities are found.
func (iouq *ImageOfUserQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = iouq.Limit(2).IDs(setContextOp(ctx, iouq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{imageofuser.Label}
	default:
		err = &NotSingularError{imageofuser.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (iouq *ImageOfUserQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := iouq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ImageOfUsers.
func (iouq *ImageOfUserQuery) All(ctx context.Context) ([]*ImageOfUser, error) {
	ctx = setContextOp(ctx, iouq.ctx, "All")
	if err := iouq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ImageOfUser, *ImageOfUserQuery]()
	return withInterceptors[[]*ImageOfUser](ctx, iouq, qr, iouq.inters)
}

// AllX is like All, but panics if an error occurs.
func (iouq *ImageOfUserQuery) AllX(ctx context.Context) []*ImageOfUser {
	nodes, err := iouq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ImageOfUser IDs.
func (iouq *ImageOfUserQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	ctx = setContextOp(ctx, iouq.ctx, "IDs")
	if err := iouq.Select(imageofuser.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (iouq *ImageOfUserQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := iouq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (iouq *ImageOfUserQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, iouq.ctx, "Count")
	if err := iouq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, iouq, querierCount[*ImageOfUserQuery](), iouq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (iouq *ImageOfUserQuery) CountX(ctx context.Context) int {
	count, err := iouq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (iouq *ImageOfUserQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, iouq.ctx, "Exist")
	switch _, err := iouq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (iouq *ImageOfUserQuery) ExistX(ctx context.Context) bool {
	exist, err := iouq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ImageOfUserQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (iouq *ImageOfUserQuery) Clone() *ImageOfUserQuery {
	if iouq == nil {
		return nil
	}
	return &ImageOfUserQuery{
		config:           iouq.config,
		ctx:              iouq.ctx.Clone(),
		order:            append([]OrderFunc{}, iouq.order...),
		inters:           append([]Interceptor{}, iouq.inters...),
		predicates:       append([]predicate.ImageOfUser{}, iouq.predicates...),
		withImage:        iouq.withImage.Clone(),
		withUser:         iouq.withUser.Clone(),
		withGoods:        iouq.withGoods.Clone(),
		withProductQuote: iouq.withProductQuote.Clone(),
		// clone intermediate query.
		sql:  iouq.sql.Clone(),
		path: iouq.path,
	}
}

// WithImage tells the query-builder to eager-load the nodes that are connected to
// the "image" edge. The optional arguments are used to configure the query builder of the edge.
func (iouq *ImageOfUserQuery) WithImage(opts ...func(*ImageQuery)) *ImageOfUserQuery {
	query := (&ImageClient{config: iouq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iouq.withImage = query
	return iouq
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (iouq *ImageOfUserQuery) WithUser(opts ...func(*UserQuery)) *ImageOfUserQuery {
	query := (&UserClient{config: iouq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iouq.withUser = query
	return iouq
}

// WithGoods tells the query-builder to eager-load the nodes that are connected to
// the "goods" edge. The optional arguments are used to configure the query builder of the edge.
func (iouq *ImageOfUserQuery) WithGoods(opts ...func(*GoodsQuery)) *ImageOfUserQuery {
	query := (&GoodsClient{config: iouq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iouq.withGoods = query
	return iouq
}

// WithProductQuote tells the query-builder to eager-load the nodes that are connected to
// the "product_quote" edge. The optional arguments are used to configure the query builder of the edge.
func (iouq *ImageOfUserQuery) WithProductQuote(opts ...func(*ProductQuoteQuery)) *ImageOfUserQuery {
	query := (&ProductQuoteClient{config: iouq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iouq.withProductQuote = query
	return iouq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ImageOfUser.Query().
//		GroupBy(imageofuser.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (iouq *ImageOfUserQuery) GroupBy(field string, fields ...string) *ImageOfUserGroupBy {
	iouq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ImageOfUserGroupBy{build: iouq}
	grbuild.flds = &iouq.ctx.Fields
	grbuild.label = imageofuser.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.ImageOfUser.Query().
//		Select(imageofuser.FieldCreateTime).
//		Scan(ctx, &v)
func (iouq *ImageOfUserQuery) Select(fields ...string) *ImageOfUserSelect {
	iouq.ctx.Fields = append(iouq.ctx.Fields, fields...)
	sbuild := &ImageOfUserSelect{ImageOfUserQuery: iouq}
	sbuild.label = imageofuser.Label
	sbuild.flds, sbuild.scan = &iouq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ImageOfUserSelect configured with the given aggregations.
func (iouq *ImageOfUserQuery) Aggregate(fns ...AggregateFunc) *ImageOfUserSelect {
	return iouq.Select().Aggregate(fns...)
}

func (iouq *ImageOfUserQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range iouq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, iouq); err != nil {
				return err
			}
		}
	}
	for _, f := range iouq.ctx.Fields {
		if !imageofuser.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if iouq.path != nil {
		prev, err := iouq.path(ctx)
		if err != nil {
			return err
		}
		iouq.sql = prev
	}
	return nil
}

func (iouq *ImageOfUserQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ImageOfUser, error) {
	var (
		nodes       = []*ImageOfUser{}
		withFKs     = iouq.withFKs
		_spec       = iouq.querySpec()
		loadedTypes = [4]bool{
			iouq.withImage != nil,
			iouq.withUser != nil,
			iouq.withGoods != nil,
			iouq.withProductQuote != nil,
		}
	)
	if iouq.withUser != nil || iouq.withGoods != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, imageofuser.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ImageOfUser).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ImageOfUser{config: iouq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, iouq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := iouq.withImage; query != nil {
		if err := iouq.loadImage(ctx, query, nodes, nil,
			func(n *ImageOfUser, e *Image) { n.Edges.Image = e }); err != nil {
			return nil, err
		}
	}
	if query := iouq.withUser; query != nil {
		if err := iouq.loadUser(ctx, query, nodes, nil,
			func(n *ImageOfUser, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := iouq.withGoods; query != nil {
		if err := iouq.loadGoods(ctx, query, nodes, nil,
			func(n *ImageOfUser, e *Goods) { n.Edges.Goods = e }); err != nil {
			return nil, err
		}
	}
	if query := iouq.withProductQuote; query != nil {
		if err := iouq.loadProductQuote(ctx, query, nodes,
			func(n *ImageOfUser) { n.Edges.ProductQuote = []*ProductQuote{} },
			func(n *ImageOfUser, e *ProductQuote) { n.Edges.ProductQuote = append(n.Edges.ProductQuote, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (iouq *ImageOfUserQuery) loadImage(ctx context.Context, query *ImageQuery, nodes []*ImageOfUser, init func(*ImageOfUser), assign func(*ImageOfUser, *Image)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*ImageOfUser)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.Image(func(s *sql.Selector) {
		s.Where(sql.InValues(imageofuser.ImageColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.image_of_user_image
		if fk == nil {
			return fmt.Errorf(`foreign-key "image_of_user_image" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "image_of_user_image" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (iouq *ImageOfUserQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*ImageOfUser, init func(*ImageOfUser), assign func(*ImageOfUser, *User)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ImageOfUser)
	for i := range nodes {
		if nodes[i].image_of_user_user == nil {
			continue
		}
		fk := *nodes[i].image_of_user_user
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "image_of_user_user" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (iouq *ImageOfUserQuery) loadGoods(ctx context.Context, query *GoodsQuery, nodes []*ImageOfUser, init func(*ImageOfUser), assign func(*ImageOfUser, *Goods)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ImageOfUser)
	for i := range nodes {
		if nodes[i].goods_image_of_user == nil {
			continue
		}
		fk := *nodes[i].goods_image_of_user
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(goods.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "goods_image_of_user" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (iouq *ImageOfUserQuery) loadProductQuote(ctx context.Context, query *ProductQuoteQuery, nodes []*ImageOfUser, init func(*ImageOfUser), assign func(*ImageOfUser, *ProductQuote)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*ImageOfUser)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ProductQuote(func(s *sql.Selector) {
		s.Where(sql.InValues(imageofuser.ProductQuoteColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.product_quote_image_of_user
		if fk == nil {
			return fmt.Errorf(`foreign-key "product_quote_image_of_user" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "product_quote_image_of_user" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (iouq *ImageOfUserQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := iouq.querySpec()
	_spec.Node.Columns = iouq.ctx.Fields
	if len(iouq.ctx.Fields) > 0 {
		_spec.Unique = iouq.ctx.Unique != nil && *iouq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, iouq.driver, _spec)
}

func (iouq *ImageOfUserQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   imageofuser.Table,
			Columns: imageofuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: imageofuser.FieldID,
			},
		},
		From:   iouq.sql,
		Unique: true,
	}
	if unique := iouq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := iouq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, imageofuser.FieldID)
		for i := range fields {
			if fields[i] != imageofuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := iouq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := iouq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := iouq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := iouq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (iouq *ImageOfUserQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(iouq.driver.Dialect())
	t1 := builder.Table(imageofuser.Table)
	columns := iouq.ctx.Fields
	if len(columns) == 0 {
		columns = imageofuser.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if iouq.sql != nil {
		selector = iouq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if iouq.ctx.Unique != nil && *iouq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range iouq.predicates {
		p(selector)
	}
	for _, p := range iouq.order {
		p(selector)
	}
	if offset := iouq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := iouq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ImageOfUserGroupBy is the group-by builder for ImageOfUser entities.
type ImageOfUserGroupBy struct {
	selector
	build *ImageOfUserQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (iougb *ImageOfUserGroupBy) Aggregate(fns ...AggregateFunc) *ImageOfUserGroupBy {
	iougb.fns = append(iougb.fns, fns...)
	return iougb
}

// Scan applies the selector query and scans the result into the given value.
func (iougb *ImageOfUserGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, iougb.build.ctx, "GroupBy")
	if err := iougb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ImageOfUserQuery, *ImageOfUserGroupBy](ctx, iougb.build, iougb, iougb.build.inters, v)
}

func (iougb *ImageOfUserGroupBy) sqlScan(ctx context.Context, root *ImageOfUserQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(iougb.fns))
	for _, fn := range iougb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*iougb.flds)+len(iougb.fns))
		for _, f := range *iougb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*iougb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := iougb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ImageOfUserSelect is the builder for selecting fields of ImageOfUser entities.
type ImageOfUserSelect struct {
	*ImageOfUserQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ious *ImageOfUserSelect) Aggregate(fns ...AggregateFunc) *ImageOfUserSelect {
	ious.fns = append(ious.fns, fns...)
	return ious
}

// Scan applies the selector query and scans the result into the given value.
func (ious *ImageOfUserSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ious.ctx, "Select")
	if err := ious.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ImageOfUserQuery, *ImageOfUserSelect](ctx, ious.ImageOfUserQuery, ious, ious.inters, v)
}

func (ious *ImageOfUserSelect) sqlScan(ctx context.Context, root *ImageOfUserQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ious.fns))
	for _, fn := range ious.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ious.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ious.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
