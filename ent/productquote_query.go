// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Hyeu249/noname-ent-schema/ent/goods"
	"github.com/Hyeu249/noname-ent-schema/ent/imageofuser"
	"github.com/Hyeu249/noname-ent-schema/ent/itemhasowner"
	"github.com/Hyeu249/noname-ent-schema/ent/predicate"
	"github.com/Hyeu249/noname-ent-schema/ent/productquote"
	"github.com/Hyeu249/noname-ent-schema/ent/user"
	"github.com/google/uuid"
)

// ProductQuoteQuery is the builder for querying ProductQuote entities.
type ProductQuoteQuery struct {
	config
	ctx              *QueryContext
	order            []OrderFunc
	inters           []Interceptor
	predicates       []predicate.ProductQuote
	withUser         *UserQuery
	withGoods        *GoodsQuery
	withImageOfUser  *ImageOfUserQuery
	withItemHasOwner *ItemHasOwnerQuery
	withFKs          bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ProductQuoteQuery builder.
func (pqq *ProductQuoteQuery) Where(ps ...predicate.ProductQuote) *ProductQuoteQuery {
	pqq.predicates = append(pqq.predicates, ps...)
	return pqq
}

// Limit the number of records to be returned by this query.
func (pqq *ProductQuoteQuery) Limit(limit int) *ProductQuoteQuery {
	pqq.ctx.Limit = &limit
	return pqq
}

// Offset to start from.
func (pqq *ProductQuoteQuery) Offset(offset int) *ProductQuoteQuery {
	pqq.ctx.Offset = &offset
	return pqq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pqq *ProductQuoteQuery) Unique(unique bool) *ProductQuoteQuery {
	pqq.ctx.Unique = &unique
	return pqq
}

// Order specifies how the records should be ordered.
func (pqq *ProductQuoteQuery) Order(o ...OrderFunc) *ProductQuoteQuery {
	pqq.order = append(pqq.order, o...)
	return pqq
}

// QueryUser chains the current query on the "user" edge.
func (pqq *ProductQuoteQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: pqq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pqq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pqq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productquote.Table, productquote.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, productquote.UserTable, productquote.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(pqq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGoods chains the current query on the "goods" edge.
func (pqq *ProductQuoteQuery) QueryGoods() *GoodsQuery {
	query := (&GoodsClient{config: pqq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pqq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pqq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productquote.Table, productquote.FieldID, selector),
			sqlgraph.To(goods.Table, goods.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, productquote.GoodsTable, productquote.GoodsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pqq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryImageOfUser chains the current query on the "image_of_user" edge.
func (pqq *ProductQuoteQuery) QueryImageOfUser() *ImageOfUserQuery {
	query := (&ImageOfUserClient{config: pqq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pqq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pqq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productquote.Table, productquote.FieldID, selector),
			sqlgraph.To(imageofuser.Table, imageofuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, productquote.ImageOfUserTable, productquote.ImageOfUserColumn),
		)
		fromU = sqlgraph.SetNeighbors(pqq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryItemHasOwner chains the current query on the "item_has_owner" edge.
func (pqq *ProductQuoteQuery) QueryItemHasOwner() *ItemHasOwnerQuery {
	query := (&ItemHasOwnerClient{config: pqq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pqq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pqq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productquote.Table, productquote.FieldID, selector),
			sqlgraph.To(itemhasowner.Table, itemhasowner.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, productquote.ItemHasOwnerTable, productquote.ItemHasOwnerColumn),
		)
		fromU = sqlgraph.SetNeighbors(pqq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ProductQuote entity from the query.
// Returns a *NotFoundError when no ProductQuote was found.
func (pqq *ProductQuoteQuery) First(ctx context.Context) (*ProductQuote, error) {
	nodes, err := pqq.Limit(1).All(setContextOp(ctx, pqq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{productquote.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pqq *ProductQuoteQuery) FirstX(ctx context.Context) *ProductQuote {
	node, err := pqq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ProductQuote ID from the query.
// Returns a *NotFoundError when no ProductQuote ID was found.
func (pqq *ProductQuoteQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = pqq.Limit(1).IDs(setContextOp(ctx, pqq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{productquote.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pqq *ProductQuoteQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := pqq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ProductQuote entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ProductQuote entity is found.
// Returns a *NotFoundError when no ProductQuote entities are found.
func (pqq *ProductQuoteQuery) Only(ctx context.Context) (*ProductQuote, error) {
	nodes, err := pqq.Limit(2).All(setContextOp(ctx, pqq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{productquote.Label}
	default:
		return nil, &NotSingularError{productquote.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pqq *ProductQuoteQuery) OnlyX(ctx context.Context) *ProductQuote {
	node, err := pqq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ProductQuote ID in the query.
// Returns a *NotSingularError when more than one ProductQuote ID is found.
// Returns a *NotFoundError when no entities are found.
func (pqq *ProductQuoteQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = pqq.Limit(2).IDs(setContextOp(ctx, pqq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{productquote.Label}
	default:
		err = &NotSingularError{productquote.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pqq *ProductQuoteQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := pqq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ProductQuotes.
func (pqq *ProductQuoteQuery) All(ctx context.Context) ([]*ProductQuote, error) {
	ctx = setContextOp(ctx, pqq.ctx, "All")
	if err := pqq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ProductQuote, *ProductQuoteQuery]()
	return withInterceptors[[]*ProductQuote](ctx, pqq, qr, pqq.inters)
}

// AllX is like All, but panics if an error occurs.
func (pqq *ProductQuoteQuery) AllX(ctx context.Context) []*ProductQuote {
	nodes, err := pqq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ProductQuote IDs.
func (pqq *ProductQuoteQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	ctx = setContextOp(ctx, pqq.ctx, "IDs")
	if err := pqq.Select(productquote.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pqq *ProductQuoteQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := pqq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pqq *ProductQuoteQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, pqq.ctx, "Count")
	if err := pqq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, pqq, querierCount[*ProductQuoteQuery](), pqq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (pqq *ProductQuoteQuery) CountX(ctx context.Context) int {
	count, err := pqq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pqq *ProductQuoteQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, pqq.ctx, "Exist")
	switch _, err := pqq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (pqq *ProductQuoteQuery) ExistX(ctx context.Context) bool {
	exist, err := pqq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ProductQuoteQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pqq *ProductQuoteQuery) Clone() *ProductQuoteQuery {
	if pqq == nil {
		return nil
	}
	return &ProductQuoteQuery{
		config:           pqq.config,
		ctx:              pqq.ctx.Clone(),
		order:            append([]OrderFunc{}, pqq.order...),
		inters:           append([]Interceptor{}, pqq.inters...),
		predicates:       append([]predicate.ProductQuote{}, pqq.predicates...),
		withUser:         pqq.withUser.Clone(),
		withGoods:        pqq.withGoods.Clone(),
		withImageOfUser:  pqq.withImageOfUser.Clone(),
		withItemHasOwner: pqq.withItemHasOwner.Clone(),
		// clone intermediate query.
		sql:  pqq.sql.Clone(),
		path: pqq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (pqq *ProductQuoteQuery) WithUser(opts ...func(*UserQuery)) *ProductQuoteQuery {
	query := (&UserClient{config: pqq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pqq.withUser = query
	return pqq
}

// WithGoods tells the query-builder to eager-load the nodes that are connected to
// the "goods" edge. The optional arguments are used to configure the query builder of the edge.
func (pqq *ProductQuoteQuery) WithGoods(opts ...func(*GoodsQuery)) *ProductQuoteQuery {
	query := (&GoodsClient{config: pqq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pqq.withGoods = query
	return pqq
}

// WithImageOfUser tells the query-builder to eager-load the nodes that are connected to
// the "image_of_user" edge. The optional arguments are used to configure the query builder of the edge.
func (pqq *ProductQuoteQuery) WithImageOfUser(opts ...func(*ImageOfUserQuery)) *ProductQuoteQuery {
	query := (&ImageOfUserClient{config: pqq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pqq.withImageOfUser = query
	return pqq
}

// WithItemHasOwner tells the query-builder to eager-load the nodes that are connected to
// the "item_has_owner" edge. The optional arguments are used to configure the query builder of the edge.
func (pqq *ProductQuoteQuery) WithItemHasOwner(opts ...func(*ItemHasOwnerQuery)) *ProductQuoteQuery {
	query := (&ItemHasOwnerClient{config: pqq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pqq.withItemHasOwner = query
	return pqq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ProductQuote.Query().
//		GroupBy(productquote.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (pqq *ProductQuoteQuery) GroupBy(field string, fields ...string) *ProductQuoteGroupBy {
	pqq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ProductQuoteGroupBy{build: pqq}
	grbuild.flds = &pqq.ctx.Fields
	grbuild.label = productquote.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.ProductQuote.Query().
//		Select(productquote.FieldCreateTime).
//		Scan(ctx, &v)
func (pqq *ProductQuoteQuery) Select(fields ...string) *ProductQuoteSelect {
	pqq.ctx.Fields = append(pqq.ctx.Fields, fields...)
	sbuild := &ProductQuoteSelect{ProductQuoteQuery: pqq}
	sbuild.label = productquote.Label
	sbuild.flds, sbuild.scan = &pqq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ProductQuoteSelect configured with the given aggregations.
func (pqq *ProductQuoteQuery) Aggregate(fns ...AggregateFunc) *ProductQuoteSelect {
	return pqq.Select().Aggregate(fns...)
}

func (pqq *ProductQuoteQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range pqq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, pqq); err != nil {
				return err
			}
		}
	}
	for _, f := range pqq.ctx.Fields {
		if !productquote.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pqq.path != nil {
		prev, err := pqq.path(ctx)
		if err != nil {
			return err
		}
		pqq.sql = prev
	}
	return nil
}

func (pqq *ProductQuoteQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ProductQuote, error) {
	var (
		nodes       = []*ProductQuote{}
		withFKs     = pqq.withFKs
		_spec       = pqq.querySpec()
		loadedTypes = [4]bool{
			pqq.withUser != nil,
			pqq.withGoods != nil,
			pqq.withImageOfUser != nil,
			pqq.withItemHasOwner != nil,
		}
	)
	if pqq.withUser != nil || pqq.withGoods != nil || pqq.withImageOfUser != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, productquote.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ProductQuote).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ProductQuote{config: pqq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pqq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := pqq.withUser; query != nil {
		if err := pqq.loadUser(ctx, query, nodes, nil,
			func(n *ProductQuote, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := pqq.withGoods; query != nil {
		if err := pqq.loadGoods(ctx, query, nodes, nil,
			func(n *ProductQuote, e *Goods) { n.Edges.Goods = e }); err != nil {
			return nil, err
		}
	}
	if query := pqq.withImageOfUser; query != nil {
		if err := pqq.loadImageOfUser(ctx, query, nodes, nil,
			func(n *ProductQuote, e *ImageOfUser) { n.Edges.ImageOfUser = e }); err != nil {
			return nil, err
		}
	}
	if query := pqq.withItemHasOwner; query != nil {
		if err := pqq.loadItemHasOwner(ctx, query, nodes,
			func(n *ProductQuote) { n.Edges.ItemHasOwner = []*ItemHasOwner{} },
			func(n *ProductQuote, e *ItemHasOwner) { n.Edges.ItemHasOwner = append(n.Edges.ItemHasOwner, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (pqq *ProductQuoteQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*ProductQuote, init func(*ProductQuote), assign func(*ProductQuote, *User)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ProductQuote)
	for i := range nodes {
		if nodes[i].product_quote_user == nil {
			continue
		}
		fk := *nodes[i].product_quote_user
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "product_quote_user" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pqq *ProductQuoteQuery) loadGoods(ctx context.Context, query *GoodsQuery, nodes []*ProductQuote, init func(*ProductQuote), assign func(*ProductQuote, *Goods)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ProductQuote)
	for i := range nodes {
		if nodes[i].product_quote_goods == nil {
			continue
		}
		fk := *nodes[i].product_quote_goods
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(goods.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "product_quote_goods" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pqq *ProductQuoteQuery) loadImageOfUser(ctx context.Context, query *ImageOfUserQuery, nodes []*ProductQuote, init func(*ProductQuote), assign func(*ProductQuote, *ImageOfUser)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ProductQuote)
	for i := range nodes {
		if nodes[i].product_quote_image_of_user == nil {
			continue
		}
		fk := *nodes[i].product_quote_image_of_user
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(imageofuser.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "product_quote_image_of_user" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pqq *ProductQuoteQuery) loadItemHasOwner(ctx context.Context, query *ItemHasOwnerQuery, nodes []*ProductQuote, init func(*ProductQuote), assign func(*ProductQuote, *ItemHasOwner)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*ProductQuote)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ItemHasOwner(func(s *sql.Selector) {
		s.Where(sql.InValues(productquote.ItemHasOwnerColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.item_has_owner_product_quote
		if fk == nil {
			return fmt.Errorf(`foreign-key "item_has_owner_product_quote" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "item_has_owner_product_quote" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (pqq *ProductQuoteQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pqq.querySpec()
	_spec.Node.Columns = pqq.ctx.Fields
	if len(pqq.ctx.Fields) > 0 {
		_spec.Unique = pqq.ctx.Unique != nil && *pqq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, pqq.driver, _spec)
}

func (pqq *ProductQuoteQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productquote.Table,
			Columns: productquote.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: productquote.FieldID,
			},
		},
		From:   pqq.sql,
		Unique: true,
	}
	if unique := pqq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := pqq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productquote.FieldID)
		for i := range fields {
			if fields[i] != productquote.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := pqq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pqq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pqq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pqq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pqq *ProductQuoteQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pqq.driver.Dialect())
	t1 := builder.Table(productquote.Table)
	columns := pqq.ctx.Fields
	if len(columns) == 0 {
		columns = productquote.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pqq.sql != nil {
		selector = pqq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pqq.ctx.Unique != nil && *pqq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range pqq.predicates {
		p(selector)
	}
	for _, p := range pqq.order {
		p(selector)
	}
	if offset := pqq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pqq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ProductQuoteGroupBy is the group-by builder for ProductQuote entities.
type ProductQuoteGroupBy struct {
	selector
	build *ProductQuoteQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pqgb *ProductQuoteGroupBy) Aggregate(fns ...AggregateFunc) *ProductQuoteGroupBy {
	pqgb.fns = append(pqgb.fns, fns...)
	return pqgb
}

// Scan applies the selector query and scans the result into the given value.
func (pqgb *ProductQuoteGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pqgb.build.ctx, "GroupBy")
	if err := pqgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProductQuoteQuery, *ProductQuoteGroupBy](ctx, pqgb.build, pqgb, pqgb.build.inters, v)
}

func (pqgb *ProductQuoteGroupBy) sqlScan(ctx context.Context, root *ProductQuoteQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pqgb.fns))
	for _, fn := range pqgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pqgb.flds)+len(pqgb.fns))
		for _, f := range *pqgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pqgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pqgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ProductQuoteSelect is the builder for selecting fields of ProductQuote entities.
type ProductQuoteSelect struct {
	*ProductQuoteQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pqs *ProductQuoteSelect) Aggregate(fns ...AggregateFunc) *ProductQuoteSelect {
	pqs.fns = append(pqs.fns, fns...)
	return pqs
}

// Scan applies the selector query and scans the result into the given value.
func (pqs *ProductQuoteSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pqs.ctx, "Select")
	if err := pqs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProductQuoteQuery, *ProductQuoteSelect](ctx, pqs.ProductQuoteQuery, pqs, pqs.inters, v)
}

func (pqs *ProductQuoteSelect) sqlScan(ctx context.Context, root *ProductQuoteQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(pqs.fns))
	for _, fn := range pqs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*pqs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pqs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
