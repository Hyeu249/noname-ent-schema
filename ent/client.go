// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/Hyeu249/noname-ent-schema/ent/migrate"
	"github.com/google/uuid"

	"github.com/Hyeu249/noname-ent-schema/ent/goods"
	"github.com/Hyeu249/noname-ent-schema/ent/image"
	"github.com/Hyeu249/noname-ent-schema/ent/imageofuser"
	"github.com/Hyeu249/noname-ent-schema/ent/itemhasowner"
	"github.com/Hyeu249/noname-ent-schema/ent/order"
	"github.com/Hyeu249/noname-ent-schema/ent/productquote"
	"github.com/Hyeu249/noname-ent-schema/ent/typeofgoods"
	"github.com/Hyeu249/noname-ent-schema/ent/user"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Goods is the client for interacting with the Goods builders.
	Goods *GoodsClient
	// Image is the client for interacting with the Image builders.
	Image *ImageClient
	// ImageOfUser is the client for interacting with the ImageOfUser builders.
	ImageOfUser *ImageOfUserClient
	// ItemHasOwner is the client for interacting with the ItemHasOwner builders.
	ItemHasOwner *ItemHasOwnerClient
	// Order is the client for interacting with the Order builders.
	Order *OrderClient
	// ProductQuote is the client for interacting with the ProductQuote builders.
	ProductQuote *ProductQuoteClient
	// TypeOfGoods is the client for interacting with the TypeOfGoods builders.
	TypeOfGoods *TypeOfGoodsClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Goods = NewGoodsClient(c.config)
	c.Image = NewImageClient(c.config)
	c.ImageOfUser = NewImageOfUserClient(c.config)
	c.ItemHasOwner = NewItemHasOwnerClient(c.config)
	c.Order = NewOrderClient(c.config)
	c.ProductQuote = NewProductQuoteClient(c.config)
	c.TypeOfGoods = NewTypeOfGoodsClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Goods:        NewGoodsClient(cfg),
		Image:        NewImageClient(cfg),
		ImageOfUser:  NewImageOfUserClient(cfg),
		ItemHasOwner: NewItemHasOwnerClient(cfg),
		Order:        NewOrderClient(cfg),
		ProductQuote: NewProductQuoteClient(cfg),
		TypeOfGoods:  NewTypeOfGoodsClient(cfg),
		User:         NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Goods:        NewGoodsClient(cfg),
		Image:        NewImageClient(cfg),
		ImageOfUser:  NewImageOfUserClient(cfg),
		ItemHasOwner: NewItemHasOwnerClient(cfg),
		Order:        NewOrderClient(cfg),
		ProductQuote: NewProductQuoteClient(cfg),
		TypeOfGoods:  NewTypeOfGoodsClient(cfg),
		User:         NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Goods.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Goods.Use(hooks...)
	c.Image.Use(hooks...)
	c.ImageOfUser.Use(hooks...)
	c.ItemHasOwner.Use(hooks...)
	c.Order.Use(hooks...)
	c.ProductQuote.Use(hooks...)
	c.TypeOfGoods.Use(hooks...)
	c.User.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Goods.Intercept(interceptors...)
	c.Image.Intercept(interceptors...)
	c.ImageOfUser.Intercept(interceptors...)
	c.ItemHasOwner.Intercept(interceptors...)
	c.Order.Intercept(interceptors...)
	c.ProductQuote.Intercept(interceptors...)
	c.TypeOfGoods.Intercept(interceptors...)
	c.User.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *GoodsMutation:
		return c.Goods.mutate(ctx, m)
	case *ImageMutation:
		return c.Image.mutate(ctx, m)
	case *ImageOfUserMutation:
		return c.ImageOfUser.mutate(ctx, m)
	case *ItemHasOwnerMutation:
		return c.ItemHasOwner.mutate(ctx, m)
	case *OrderMutation:
		return c.Order.mutate(ctx, m)
	case *ProductQuoteMutation:
		return c.ProductQuote.mutate(ctx, m)
	case *TypeOfGoodsMutation:
		return c.TypeOfGoods.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// GoodsClient is a client for the Goods schema.
type GoodsClient struct {
	config
}

// NewGoodsClient returns a client for the Goods from the given config.
func NewGoodsClient(c config) *GoodsClient {
	return &GoodsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `goods.Hooks(f(g(h())))`.
func (c *GoodsClient) Use(hooks ...Hook) {
	c.hooks.Goods = append(c.hooks.Goods, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `goods.Intercept(f(g(h())))`.
func (c *GoodsClient) Intercept(interceptors ...Interceptor) {
	c.inters.Goods = append(c.inters.Goods, interceptors...)
}

// Create returns a builder for creating a Goods entity.
func (c *GoodsClient) Create() *GoodsCreate {
	mutation := newGoodsMutation(c.config, OpCreate)
	return &GoodsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Goods entities.
func (c *GoodsClient) CreateBulk(builders ...*GoodsCreate) *GoodsCreateBulk {
	return &GoodsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Goods.
func (c *GoodsClient) Update() *GoodsUpdate {
	mutation := newGoodsMutation(c.config, OpUpdate)
	return &GoodsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GoodsClient) UpdateOne(_go *Goods) *GoodsUpdateOne {
	mutation := newGoodsMutation(c.config, OpUpdateOne, withGoods(_go))
	return &GoodsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GoodsClient) UpdateOneID(id uuid.UUID) *GoodsUpdateOne {
	mutation := newGoodsMutation(c.config, OpUpdateOne, withGoodsID(id))
	return &GoodsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Goods.
func (c *GoodsClient) Delete() *GoodsDelete {
	mutation := newGoodsMutation(c.config, OpDelete)
	return &GoodsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GoodsClient) DeleteOne(_go *Goods) *GoodsDeleteOne {
	return c.DeleteOneID(_go.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GoodsClient) DeleteOneID(id uuid.UUID) *GoodsDeleteOne {
	builder := c.Delete().Where(goods.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GoodsDeleteOne{builder}
}

// Query returns a query builder for Goods.
func (c *GoodsClient) Query() *GoodsQuery {
	return &GoodsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGoods},
		inters: c.Interceptors(),
	}
}

// Get returns a Goods entity by its id.
func (c *GoodsClient) Get(ctx context.Context, id uuid.UUID) (*Goods, error) {
	return c.Query().Where(goods.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GoodsClient) GetX(ctx context.Context, id uuid.UUID) *Goods {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTypeOfGoods queries the type_of_goods edge of a Goods.
func (c *GoodsClient) QueryTypeOfGoods(_go *Goods) *TypeOfGoodsQuery {
	query := (&TypeOfGoodsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _go.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(goods.Table, goods.FieldID, id),
			sqlgraph.To(typeofgoods.Table, typeofgoods.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, goods.TypeOfGoodsTable, goods.TypeOfGoodsColumn),
		)
		fromV = sqlgraph.Neighbors(_go.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryImageOfUser queries the image_of_user edge of a Goods.
func (c *GoodsClient) QueryImageOfUser(_go *Goods) *ImageOfUserQuery {
	query := (&ImageOfUserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _go.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(goods.Table, goods.FieldID, id),
			sqlgraph.To(imageofuser.Table, imageofuser.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, goods.ImageOfUserTable, goods.ImageOfUserColumn),
		)
		fromV = sqlgraph.Neighbors(_go.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProductQuote queries the product_quote edge of a Goods.
func (c *GoodsClient) QueryProductQuote(_go *Goods) *ProductQuoteQuery {
	query := (&ProductQuoteClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _go.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(goods.Table, goods.FieldID, id),
			sqlgraph.To(productquote.Table, productquote.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, goods.ProductQuoteTable, goods.ProductQuoteColumn),
		)
		fromV = sqlgraph.Neighbors(_go.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GoodsClient) Hooks() []Hook {
	return c.hooks.Goods
}

// Interceptors returns the client interceptors.
func (c *GoodsClient) Interceptors() []Interceptor {
	return c.inters.Goods
}

func (c *GoodsClient) mutate(ctx context.Context, m *GoodsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GoodsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GoodsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GoodsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GoodsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Goods mutation op: %q", m.Op())
	}
}

// ImageClient is a client for the Image schema.
type ImageClient struct {
	config
}

// NewImageClient returns a client for the Image from the given config.
func NewImageClient(c config) *ImageClient {
	return &ImageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `image.Hooks(f(g(h())))`.
func (c *ImageClient) Use(hooks ...Hook) {
	c.hooks.Image = append(c.hooks.Image, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `image.Intercept(f(g(h())))`.
func (c *ImageClient) Intercept(interceptors ...Interceptor) {
	c.inters.Image = append(c.inters.Image, interceptors...)
}

// Create returns a builder for creating a Image entity.
func (c *ImageClient) Create() *ImageCreate {
	mutation := newImageMutation(c.config, OpCreate)
	return &ImageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Image entities.
func (c *ImageClient) CreateBulk(builders ...*ImageCreate) *ImageCreateBulk {
	return &ImageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Image.
func (c *ImageClient) Update() *ImageUpdate {
	mutation := newImageMutation(c.config, OpUpdate)
	return &ImageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ImageClient) UpdateOne(i *Image) *ImageUpdateOne {
	mutation := newImageMutation(c.config, OpUpdateOne, withImage(i))
	return &ImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ImageClient) UpdateOneID(id uuid.UUID) *ImageUpdateOne {
	mutation := newImageMutation(c.config, OpUpdateOne, withImageID(id))
	return &ImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Image.
func (c *ImageClient) Delete() *ImageDelete {
	mutation := newImageMutation(c.config, OpDelete)
	return &ImageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ImageClient) DeleteOne(i *Image) *ImageDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ImageClient) DeleteOneID(id uuid.UUID) *ImageDeleteOne {
	builder := c.Delete().Where(image.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ImageDeleteOne{builder}
}

// Query returns a query builder for Image.
func (c *ImageClient) Query() *ImageQuery {
	return &ImageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeImage},
		inters: c.Interceptors(),
	}
}

// Get returns a Image entity by its id.
func (c *ImageClient) Get(ctx context.Context, id uuid.UUID) (*Image, error) {
	return c.Query().Where(image.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ImageClient) GetX(ctx context.Context, id uuid.UUID) *Image {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryImageOfUser queries the image_of_user edge of a Image.
func (c *ImageClient) QueryImageOfUser(i *Image) *ImageOfUserQuery {
	query := (&ImageOfUserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(image.Table, image.FieldID, id),
			sqlgraph.To(imageofuser.Table, imageofuser.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, image.ImageOfUserTable, image.ImageOfUserColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ImageClient) Hooks() []Hook {
	return c.hooks.Image
}

// Interceptors returns the client interceptors.
func (c *ImageClient) Interceptors() []Interceptor {
	return c.inters.Image
}

func (c *ImageClient) mutate(ctx context.Context, m *ImageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ImageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ImageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ImageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Image mutation op: %q", m.Op())
	}
}

// ImageOfUserClient is a client for the ImageOfUser schema.
type ImageOfUserClient struct {
	config
}

// NewImageOfUserClient returns a client for the ImageOfUser from the given config.
func NewImageOfUserClient(c config) *ImageOfUserClient {
	return &ImageOfUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `imageofuser.Hooks(f(g(h())))`.
func (c *ImageOfUserClient) Use(hooks ...Hook) {
	c.hooks.ImageOfUser = append(c.hooks.ImageOfUser, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `imageofuser.Intercept(f(g(h())))`.
func (c *ImageOfUserClient) Intercept(interceptors ...Interceptor) {
	c.inters.ImageOfUser = append(c.inters.ImageOfUser, interceptors...)
}

// Create returns a builder for creating a ImageOfUser entity.
func (c *ImageOfUserClient) Create() *ImageOfUserCreate {
	mutation := newImageOfUserMutation(c.config, OpCreate)
	return &ImageOfUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ImageOfUser entities.
func (c *ImageOfUserClient) CreateBulk(builders ...*ImageOfUserCreate) *ImageOfUserCreateBulk {
	return &ImageOfUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ImageOfUser.
func (c *ImageOfUserClient) Update() *ImageOfUserUpdate {
	mutation := newImageOfUserMutation(c.config, OpUpdate)
	return &ImageOfUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ImageOfUserClient) UpdateOne(iou *ImageOfUser) *ImageOfUserUpdateOne {
	mutation := newImageOfUserMutation(c.config, OpUpdateOne, withImageOfUser(iou))
	return &ImageOfUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ImageOfUserClient) UpdateOneID(id uuid.UUID) *ImageOfUserUpdateOne {
	mutation := newImageOfUserMutation(c.config, OpUpdateOne, withImageOfUserID(id))
	return &ImageOfUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ImageOfUser.
func (c *ImageOfUserClient) Delete() *ImageOfUserDelete {
	mutation := newImageOfUserMutation(c.config, OpDelete)
	return &ImageOfUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ImageOfUserClient) DeleteOne(iou *ImageOfUser) *ImageOfUserDeleteOne {
	return c.DeleteOneID(iou.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ImageOfUserClient) DeleteOneID(id uuid.UUID) *ImageOfUserDeleteOne {
	builder := c.Delete().Where(imageofuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ImageOfUserDeleteOne{builder}
}

// Query returns a query builder for ImageOfUser.
func (c *ImageOfUserClient) Query() *ImageOfUserQuery {
	return &ImageOfUserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeImageOfUser},
		inters: c.Interceptors(),
	}
}

// Get returns a ImageOfUser entity by its id.
func (c *ImageOfUserClient) Get(ctx context.Context, id uuid.UUID) (*ImageOfUser, error) {
	return c.Query().Where(imageofuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ImageOfUserClient) GetX(ctx context.Context, id uuid.UUID) *ImageOfUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryImage queries the image edge of a ImageOfUser.
func (c *ImageOfUserClient) QueryImage(iou *ImageOfUser) *ImageQuery {
	query := (&ImageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := iou.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(imageofuser.Table, imageofuser.FieldID, id),
			sqlgraph.To(image.Table, image.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, imageofuser.ImageTable, imageofuser.ImageColumn),
		)
		fromV = sqlgraph.Neighbors(iou.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a ImageOfUser.
func (c *ImageOfUserClient) QueryUser(iou *ImageOfUser) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := iou.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(imageofuser.Table, imageofuser.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, imageofuser.UserTable, imageofuser.UserColumn),
		)
		fromV = sqlgraph.Neighbors(iou.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGoods queries the goods edge of a ImageOfUser.
func (c *ImageOfUserClient) QueryGoods(iou *ImageOfUser) *GoodsQuery {
	query := (&GoodsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := iou.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(imageofuser.Table, imageofuser.FieldID, id),
			sqlgraph.To(goods.Table, goods.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, imageofuser.GoodsTable, imageofuser.GoodsColumn),
		)
		fromV = sqlgraph.Neighbors(iou.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProductQuote queries the product_quote edge of a ImageOfUser.
func (c *ImageOfUserClient) QueryProductQuote(iou *ImageOfUser) *ProductQuoteQuery {
	query := (&ProductQuoteClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := iou.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(imageofuser.Table, imageofuser.FieldID, id),
			sqlgraph.To(productquote.Table, productquote.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, imageofuser.ProductQuoteTable, imageofuser.ProductQuoteColumn),
		)
		fromV = sqlgraph.Neighbors(iou.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ImageOfUserClient) Hooks() []Hook {
	return c.hooks.ImageOfUser
}

// Interceptors returns the client interceptors.
func (c *ImageOfUserClient) Interceptors() []Interceptor {
	return c.inters.ImageOfUser
}

func (c *ImageOfUserClient) mutate(ctx context.Context, m *ImageOfUserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ImageOfUserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ImageOfUserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ImageOfUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ImageOfUserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ImageOfUser mutation op: %q", m.Op())
	}
}

// ItemHasOwnerClient is a client for the ItemHasOwner schema.
type ItemHasOwnerClient struct {
	config
}

// NewItemHasOwnerClient returns a client for the ItemHasOwner from the given config.
func NewItemHasOwnerClient(c config) *ItemHasOwnerClient {
	return &ItemHasOwnerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `itemhasowner.Hooks(f(g(h())))`.
func (c *ItemHasOwnerClient) Use(hooks ...Hook) {
	c.hooks.ItemHasOwner = append(c.hooks.ItemHasOwner, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `itemhasowner.Intercept(f(g(h())))`.
func (c *ItemHasOwnerClient) Intercept(interceptors ...Interceptor) {
	c.inters.ItemHasOwner = append(c.inters.ItemHasOwner, interceptors...)
}

// Create returns a builder for creating a ItemHasOwner entity.
func (c *ItemHasOwnerClient) Create() *ItemHasOwnerCreate {
	mutation := newItemHasOwnerMutation(c.config, OpCreate)
	return &ItemHasOwnerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ItemHasOwner entities.
func (c *ItemHasOwnerClient) CreateBulk(builders ...*ItemHasOwnerCreate) *ItemHasOwnerCreateBulk {
	return &ItemHasOwnerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ItemHasOwner.
func (c *ItemHasOwnerClient) Update() *ItemHasOwnerUpdate {
	mutation := newItemHasOwnerMutation(c.config, OpUpdate)
	return &ItemHasOwnerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ItemHasOwnerClient) UpdateOne(iho *ItemHasOwner) *ItemHasOwnerUpdateOne {
	mutation := newItemHasOwnerMutation(c.config, OpUpdateOne, withItemHasOwner(iho))
	return &ItemHasOwnerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ItemHasOwnerClient) UpdateOneID(id uuid.UUID) *ItemHasOwnerUpdateOne {
	mutation := newItemHasOwnerMutation(c.config, OpUpdateOne, withItemHasOwnerID(id))
	return &ItemHasOwnerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ItemHasOwner.
func (c *ItemHasOwnerClient) Delete() *ItemHasOwnerDelete {
	mutation := newItemHasOwnerMutation(c.config, OpDelete)
	return &ItemHasOwnerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ItemHasOwnerClient) DeleteOne(iho *ItemHasOwner) *ItemHasOwnerDeleteOne {
	return c.DeleteOneID(iho.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ItemHasOwnerClient) DeleteOneID(id uuid.UUID) *ItemHasOwnerDeleteOne {
	builder := c.Delete().Where(itemhasowner.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ItemHasOwnerDeleteOne{builder}
}

// Query returns a query builder for ItemHasOwner.
func (c *ItemHasOwnerClient) Query() *ItemHasOwnerQuery {
	return &ItemHasOwnerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeItemHasOwner},
		inters: c.Interceptors(),
	}
}

// Get returns a ItemHasOwner entity by its id.
func (c *ItemHasOwnerClient) Get(ctx context.Context, id uuid.UUID) (*ItemHasOwner, error) {
	return c.Query().Where(itemhasowner.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ItemHasOwnerClient) GetX(ctx context.Context, id uuid.UUID) *ItemHasOwner {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProductQuote queries the product_quote edge of a ItemHasOwner.
func (c *ItemHasOwnerClient) QueryProductQuote(iho *ItemHasOwner) *ProductQuoteQuery {
	query := (&ProductQuoteClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := iho.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(itemhasowner.Table, itemhasowner.FieldID, id),
			sqlgraph.To(productquote.Table, productquote.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, itemhasowner.ProductQuoteTable, itemhasowner.ProductQuoteColumn),
		)
		fromV = sqlgraph.Neighbors(iho.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a ItemHasOwner.
func (c *ItemHasOwnerClient) QueryUser(iho *ItemHasOwner) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := iho.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(itemhasowner.Table, itemhasowner.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, itemhasowner.UserTable, itemhasowner.UserColumn),
		)
		fromV = sqlgraph.Neighbors(iho.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrder queries the order edge of a ItemHasOwner.
func (c *ItemHasOwnerClient) QueryOrder(iho *ItemHasOwner) *OrderQuery {
	query := (&OrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := iho.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(itemhasowner.Table, itemhasowner.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, itemhasowner.OrderTable, itemhasowner.OrderColumn),
		)
		fromV = sqlgraph.Neighbors(iho.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ItemHasOwnerClient) Hooks() []Hook {
	return c.hooks.ItemHasOwner
}

// Interceptors returns the client interceptors.
func (c *ItemHasOwnerClient) Interceptors() []Interceptor {
	return c.inters.ItemHasOwner
}

func (c *ItemHasOwnerClient) mutate(ctx context.Context, m *ItemHasOwnerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ItemHasOwnerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ItemHasOwnerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ItemHasOwnerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ItemHasOwnerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ItemHasOwner mutation op: %q", m.Op())
	}
}

// OrderClient is a client for the Order schema.
type OrderClient struct {
	config
}

// NewOrderClient returns a client for the Order from the given config.
func NewOrderClient(c config) *OrderClient {
	return &OrderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `order.Hooks(f(g(h())))`.
func (c *OrderClient) Use(hooks ...Hook) {
	c.hooks.Order = append(c.hooks.Order, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `order.Intercept(f(g(h())))`.
func (c *OrderClient) Intercept(interceptors ...Interceptor) {
	c.inters.Order = append(c.inters.Order, interceptors...)
}

// Create returns a builder for creating a Order entity.
func (c *OrderClient) Create() *OrderCreate {
	mutation := newOrderMutation(c.config, OpCreate)
	return &OrderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Order entities.
func (c *OrderClient) CreateBulk(builders ...*OrderCreate) *OrderCreateBulk {
	return &OrderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Order.
func (c *OrderClient) Update() *OrderUpdate {
	mutation := newOrderMutation(c.config, OpUpdate)
	return &OrderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderClient) UpdateOne(o *Order) *OrderUpdateOne {
	mutation := newOrderMutation(c.config, OpUpdateOne, withOrder(o))
	return &OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderClient) UpdateOneID(id uuid.UUID) *OrderUpdateOne {
	mutation := newOrderMutation(c.config, OpUpdateOne, withOrderID(id))
	return &OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Order.
func (c *OrderClient) Delete() *OrderDelete {
	mutation := newOrderMutation(c.config, OpDelete)
	return &OrderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderClient) DeleteOne(o *Order) *OrderDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrderClient) DeleteOneID(id uuid.UUID) *OrderDeleteOne {
	builder := c.Delete().Where(order.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderDeleteOne{builder}
}

// Query returns a query builder for Order.
func (c *OrderClient) Query() *OrderQuery {
	return &OrderQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrder},
		inters: c.Interceptors(),
	}
}

// Get returns a Order entity by its id.
func (c *OrderClient) Get(ctx context.Context, id uuid.UUID) (*Order, error) {
	return c.Query().Where(order.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderClient) GetX(ctx context.Context, id uuid.UUID) *Order {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryItemHasOwner queries the item_has_owner edge of a Order.
func (c *OrderClient) QueryItemHasOwner(o *Order) *ItemHasOwnerQuery {
	query := (&ItemHasOwnerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(itemhasowner.Table, itemhasowner.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, order.ItemHasOwnerTable, order.ItemHasOwnerColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderClient) Hooks() []Hook {
	return c.hooks.Order
}

// Interceptors returns the client interceptors.
func (c *OrderClient) Interceptors() []Interceptor {
	return c.inters.Order
}

func (c *OrderClient) mutate(ctx context.Context, m *OrderMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrderCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrderUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrderDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Order mutation op: %q", m.Op())
	}
}

// ProductQuoteClient is a client for the ProductQuote schema.
type ProductQuoteClient struct {
	config
}

// NewProductQuoteClient returns a client for the ProductQuote from the given config.
func NewProductQuoteClient(c config) *ProductQuoteClient {
	return &ProductQuoteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productquote.Hooks(f(g(h())))`.
func (c *ProductQuoteClient) Use(hooks ...Hook) {
	c.hooks.ProductQuote = append(c.hooks.ProductQuote, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `productquote.Intercept(f(g(h())))`.
func (c *ProductQuoteClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProductQuote = append(c.inters.ProductQuote, interceptors...)
}

// Create returns a builder for creating a ProductQuote entity.
func (c *ProductQuoteClient) Create() *ProductQuoteCreate {
	mutation := newProductQuoteMutation(c.config, OpCreate)
	return &ProductQuoteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductQuote entities.
func (c *ProductQuoteClient) CreateBulk(builders ...*ProductQuoteCreate) *ProductQuoteCreateBulk {
	return &ProductQuoteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductQuote.
func (c *ProductQuoteClient) Update() *ProductQuoteUpdate {
	mutation := newProductQuoteMutation(c.config, OpUpdate)
	return &ProductQuoteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductQuoteClient) UpdateOne(pq *ProductQuote) *ProductQuoteUpdateOne {
	mutation := newProductQuoteMutation(c.config, OpUpdateOne, withProductQuote(pq))
	return &ProductQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductQuoteClient) UpdateOneID(id uuid.UUID) *ProductQuoteUpdateOne {
	mutation := newProductQuoteMutation(c.config, OpUpdateOne, withProductQuoteID(id))
	return &ProductQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductQuote.
func (c *ProductQuoteClient) Delete() *ProductQuoteDelete {
	mutation := newProductQuoteMutation(c.config, OpDelete)
	return &ProductQuoteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProductQuoteClient) DeleteOne(pq *ProductQuote) *ProductQuoteDeleteOne {
	return c.DeleteOneID(pq.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProductQuoteClient) DeleteOneID(id uuid.UUID) *ProductQuoteDeleteOne {
	builder := c.Delete().Where(productquote.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductQuoteDeleteOne{builder}
}

// Query returns a query builder for ProductQuote.
func (c *ProductQuoteClient) Query() *ProductQuoteQuery {
	return &ProductQuoteQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProductQuote},
		inters: c.Interceptors(),
	}
}

// Get returns a ProductQuote entity by its id.
func (c *ProductQuoteClient) Get(ctx context.Context, id uuid.UUID) (*ProductQuote, error) {
	return c.Query().Where(productquote.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductQuoteClient) GetX(ctx context.Context, id uuid.UUID) *ProductQuote {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a ProductQuote.
func (c *ProductQuoteClient) QueryUser(pq *ProductQuote) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pq.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productquote.Table, productquote.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, productquote.UserTable, productquote.UserColumn),
		)
		fromV = sqlgraph.Neighbors(pq.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGoods queries the goods edge of a ProductQuote.
func (c *ProductQuoteClient) QueryGoods(pq *ProductQuote) *GoodsQuery {
	query := (&GoodsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pq.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productquote.Table, productquote.FieldID, id),
			sqlgraph.To(goods.Table, goods.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, productquote.GoodsTable, productquote.GoodsColumn),
		)
		fromV = sqlgraph.Neighbors(pq.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryImageOfUser queries the image_of_user edge of a ProductQuote.
func (c *ProductQuoteClient) QueryImageOfUser(pq *ProductQuote) *ImageOfUserQuery {
	query := (&ImageOfUserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pq.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productquote.Table, productquote.FieldID, id),
			sqlgraph.To(imageofuser.Table, imageofuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, productquote.ImageOfUserTable, productquote.ImageOfUserColumn),
		)
		fromV = sqlgraph.Neighbors(pq.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryItemHasOwner queries the item_has_owner edge of a ProductQuote.
func (c *ProductQuoteClient) QueryItemHasOwner(pq *ProductQuote) *ItemHasOwnerQuery {
	query := (&ItemHasOwnerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pq.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productquote.Table, productquote.FieldID, id),
			sqlgraph.To(itemhasowner.Table, itemhasowner.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, productquote.ItemHasOwnerTable, productquote.ItemHasOwnerColumn),
		)
		fromV = sqlgraph.Neighbors(pq.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductQuoteClient) Hooks() []Hook {
	return c.hooks.ProductQuote
}

// Interceptors returns the client interceptors.
func (c *ProductQuoteClient) Interceptors() []Interceptor {
	return c.inters.ProductQuote
}

func (c *ProductQuoteClient) mutate(ctx context.Context, m *ProductQuoteMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProductQuoteCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProductQuoteUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProductQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProductQuoteDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProductQuote mutation op: %q", m.Op())
	}
}

// TypeOfGoodsClient is a client for the TypeOfGoods schema.
type TypeOfGoodsClient struct {
	config
}

// NewTypeOfGoodsClient returns a client for the TypeOfGoods from the given config.
func NewTypeOfGoodsClient(c config) *TypeOfGoodsClient {
	return &TypeOfGoodsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `typeofgoods.Hooks(f(g(h())))`.
func (c *TypeOfGoodsClient) Use(hooks ...Hook) {
	c.hooks.TypeOfGoods = append(c.hooks.TypeOfGoods, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `typeofgoods.Intercept(f(g(h())))`.
func (c *TypeOfGoodsClient) Intercept(interceptors ...Interceptor) {
	c.inters.TypeOfGoods = append(c.inters.TypeOfGoods, interceptors...)
}

// Create returns a builder for creating a TypeOfGoods entity.
func (c *TypeOfGoodsClient) Create() *TypeOfGoodsCreate {
	mutation := newTypeOfGoodsMutation(c.config, OpCreate)
	return &TypeOfGoodsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TypeOfGoods entities.
func (c *TypeOfGoodsClient) CreateBulk(builders ...*TypeOfGoodsCreate) *TypeOfGoodsCreateBulk {
	return &TypeOfGoodsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TypeOfGoods.
func (c *TypeOfGoodsClient) Update() *TypeOfGoodsUpdate {
	mutation := newTypeOfGoodsMutation(c.config, OpUpdate)
	return &TypeOfGoodsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TypeOfGoodsClient) UpdateOne(tog *TypeOfGoods) *TypeOfGoodsUpdateOne {
	mutation := newTypeOfGoodsMutation(c.config, OpUpdateOne, withTypeOfGoods(tog))
	return &TypeOfGoodsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TypeOfGoodsClient) UpdateOneID(id uuid.UUID) *TypeOfGoodsUpdateOne {
	mutation := newTypeOfGoodsMutation(c.config, OpUpdateOne, withTypeOfGoodsID(id))
	return &TypeOfGoodsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TypeOfGoods.
func (c *TypeOfGoodsClient) Delete() *TypeOfGoodsDelete {
	mutation := newTypeOfGoodsMutation(c.config, OpDelete)
	return &TypeOfGoodsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TypeOfGoodsClient) DeleteOne(tog *TypeOfGoods) *TypeOfGoodsDeleteOne {
	return c.DeleteOneID(tog.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TypeOfGoodsClient) DeleteOneID(id uuid.UUID) *TypeOfGoodsDeleteOne {
	builder := c.Delete().Where(typeofgoods.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TypeOfGoodsDeleteOne{builder}
}

// Query returns a query builder for TypeOfGoods.
func (c *TypeOfGoodsClient) Query() *TypeOfGoodsQuery {
	return &TypeOfGoodsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTypeOfGoods},
		inters: c.Interceptors(),
	}
}

// Get returns a TypeOfGoods entity by its id.
func (c *TypeOfGoodsClient) Get(ctx context.Context, id uuid.UUID) (*TypeOfGoods, error) {
	return c.Query().Where(typeofgoods.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TypeOfGoodsClient) GetX(ctx context.Context, id uuid.UUID) *TypeOfGoods {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGoods queries the goods edge of a TypeOfGoods.
func (c *TypeOfGoodsClient) QueryGoods(tog *TypeOfGoods) *GoodsQuery {
	query := (&GoodsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tog.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(typeofgoods.Table, typeofgoods.FieldID, id),
			sqlgraph.To(goods.Table, goods.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, typeofgoods.GoodsTable, typeofgoods.GoodsColumn),
		)
		fromV = sqlgraph.Neighbors(tog.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TypeOfGoodsClient) Hooks() []Hook {
	return c.hooks.TypeOfGoods
}

// Interceptors returns the client interceptors.
func (c *TypeOfGoodsClient) Interceptors() []Interceptor {
	return c.inters.TypeOfGoods
}

func (c *TypeOfGoodsClient) mutate(ctx context.Context, m *TypeOfGoodsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TypeOfGoodsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TypeOfGoodsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TypeOfGoodsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TypeOfGoodsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TypeOfGoods mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryImageOfUser queries the image_of_user edge of a User.
func (c *UserClient) QueryImageOfUser(u *User) *ImageOfUserQuery {
	query := (&ImageOfUserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(imageofuser.Table, imageofuser.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.ImageOfUserTable, user.ImageOfUserColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProductQuote queries the product_quote edge of a User.
func (c *UserClient) QueryProductQuote(u *User) *ProductQuoteQuery {
	query := (&ProductQuoteClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(productquote.Table, productquote.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.ProductQuoteTable, user.ProductQuoteColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryItemHasOwner queries the item_has_owner edge of a User.
func (c *UserClient) QueryItemHasOwner(u *User) *ItemHasOwnerQuery {
	query := (&ItemHasOwnerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(itemhasowner.Table, itemhasowner.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.ItemHasOwnerTable, user.ItemHasOwnerColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}
