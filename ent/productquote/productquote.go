// Code generated by ent, DO NOT EDIT.

package productquote

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the productquote type in the database.
	Label = "product_quote"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeGoods holds the string denoting the goods edge name in mutations.
	EdgeGoods = "goods"
	// EdgeImageOfUser holds the string denoting the image_of_user edge name in mutations.
	EdgeImageOfUser = "image_of_user"
	// EdgeItemHasOwner holds the string denoting the item_has_owner edge name in mutations.
	EdgeItemHasOwner = "item_has_owner"
	// Table holds the table name of the productquote in the database.
	Table = "product_quotes"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "product_quotes"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "product_quote_user"
	// GoodsTable is the table that holds the goods relation/edge.
	GoodsTable = "product_quotes"
	// GoodsInverseTable is the table name for the Goods entity.
	// It exists in this package in order to avoid circular dependency with the "goods" package.
	GoodsInverseTable = "goods"
	// GoodsColumn is the table column denoting the goods relation/edge.
	GoodsColumn = "product_quote_goods"
	// ImageOfUserTable is the table that holds the image_of_user relation/edge.
	ImageOfUserTable = "product_quotes"
	// ImageOfUserInverseTable is the table name for the ImageOfUser entity.
	// It exists in this package in order to avoid circular dependency with the "imageofuser" package.
	ImageOfUserInverseTable = "image_of_users"
	// ImageOfUserColumn is the table column denoting the image_of_user relation/edge.
	ImageOfUserColumn = "product_quote_image_of_user"
	// ItemHasOwnerTable is the table that holds the item_has_owner relation/edge.
	ItemHasOwnerTable = "item_has_owners"
	// ItemHasOwnerInverseTable is the table name for the ItemHasOwner entity.
	// It exists in this package in order to avoid circular dependency with the "itemhasowner" package.
	ItemHasOwnerInverseTable = "item_has_owners"
	// ItemHasOwnerColumn is the table column denoting the item_has_owner relation/edge.
	ItemHasOwnerColumn = "item_has_owner_product_quote"
)

// Columns holds all SQL columns for productquote fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldDeletedAt,
	FieldPrice,
	FieldIsActive,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "product_quotes"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"product_quote_user",
	"product_quote_goods",
	"product_quote_image_of_user",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
