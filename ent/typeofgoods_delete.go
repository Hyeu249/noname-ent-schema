// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Hyeu249/noname-ent-schema/ent/predicate"
	"github.com/Hyeu249/noname-ent-schema/ent/typeofgoods"
)

// TypeOfGoodsDelete is the builder for deleting a TypeOfGoods entity.
type TypeOfGoodsDelete struct {
	config
	hooks    []Hook
	mutation *TypeOfGoodsMutation
}

// Where appends a list predicates to the TypeOfGoodsDelete builder.
func (togd *TypeOfGoodsDelete) Where(ps ...predicate.TypeOfGoods) *TypeOfGoodsDelete {
	togd.mutation.Where(ps...)
	return togd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (togd *TypeOfGoodsDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, TypeOfGoodsMutation](ctx, togd.sqlExec, togd.mutation, togd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (togd *TypeOfGoodsDelete) ExecX(ctx context.Context) int {
	n, err := togd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (togd *TypeOfGoodsDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := &sqlgraph.DeleteSpec{
		Node: &sqlgraph.NodeSpec{
			Table: typeofgoods.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: typeofgoods.FieldID,
			},
		},
	}
	if ps := togd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, togd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	togd.mutation.done = true
	return affected, err
}

// TypeOfGoodsDeleteOne is the builder for deleting a single TypeOfGoods entity.
type TypeOfGoodsDeleteOne struct {
	togd *TypeOfGoodsDelete
}

// Where appends a list predicates to the TypeOfGoodsDelete builder.
func (togdo *TypeOfGoodsDeleteOne) Where(ps ...predicate.TypeOfGoods) *TypeOfGoodsDeleteOne {
	togdo.togd.mutation.Where(ps...)
	return togdo
}

// Exec executes the deletion query.
func (togdo *TypeOfGoodsDeleteOne) Exec(ctx context.Context) error {
	n, err := togdo.togd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{typeofgoods.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (togdo *TypeOfGoodsDeleteOne) ExecX(ctx context.Context) {
	if err := togdo.Exec(ctx); err != nil {
		panic(err)
	}
}
