// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Hyeu249/noname-ent-schema/ent/goods"
	"github.com/Hyeu249/noname-ent-schema/ent/predicate"
	"github.com/Hyeu249/noname-ent-schema/ent/typeofgoods"
	"github.com/google/uuid"
)

// TypeOfGoodsQuery is the builder for querying TypeOfGoods entities.
type TypeOfGoodsQuery struct {
	config
	ctx        *QueryContext
	order      []OrderFunc
	inters     []Interceptor
	predicates []predicate.TypeOfGoods
	withGoods  *GoodsQuery
	withFKs    bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TypeOfGoodsQuery builder.
func (togq *TypeOfGoodsQuery) Where(ps ...predicate.TypeOfGoods) *TypeOfGoodsQuery {
	togq.predicates = append(togq.predicates, ps...)
	return togq
}

// Limit the number of records to be returned by this query.
func (togq *TypeOfGoodsQuery) Limit(limit int) *TypeOfGoodsQuery {
	togq.ctx.Limit = &limit
	return togq
}

// Offset to start from.
func (togq *TypeOfGoodsQuery) Offset(offset int) *TypeOfGoodsQuery {
	togq.ctx.Offset = &offset
	return togq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (togq *TypeOfGoodsQuery) Unique(unique bool) *TypeOfGoodsQuery {
	togq.ctx.Unique = &unique
	return togq
}

// Order specifies how the records should be ordered.
func (togq *TypeOfGoodsQuery) Order(o ...OrderFunc) *TypeOfGoodsQuery {
	togq.order = append(togq.order, o...)
	return togq
}

// QueryGoods chains the current query on the "goods" edge.
func (togq *TypeOfGoodsQuery) QueryGoods() *GoodsQuery {
	query := (&GoodsClient{config: togq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := togq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := togq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(typeofgoods.Table, typeofgoods.FieldID, selector),
			sqlgraph.To(goods.Table, goods.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, typeofgoods.GoodsTable, typeofgoods.GoodsColumn),
		)
		fromU = sqlgraph.SetNeighbors(togq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TypeOfGoods entity from the query.
// Returns a *NotFoundError when no TypeOfGoods was found.
func (togq *TypeOfGoodsQuery) First(ctx context.Context) (*TypeOfGoods, error) {
	nodes, err := togq.Limit(1).All(setContextOp(ctx, togq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{typeofgoods.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (togq *TypeOfGoodsQuery) FirstX(ctx context.Context) *TypeOfGoods {
	node, err := togq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TypeOfGoods ID from the query.
// Returns a *NotFoundError when no TypeOfGoods ID was found.
func (togq *TypeOfGoodsQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = togq.Limit(1).IDs(setContextOp(ctx, togq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{typeofgoods.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (togq *TypeOfGoodsQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := togq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TypeOfGoods entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one TypeOfGoods entity is found.
// Returns a *NotFoundError when no TypeOfGoods entities are found.
func (togq *TypeOfGoodsQuery) Only(ctx context.Context) (*TypeOfGoods, error) {
	nodes, err := togq.Limit(2).All(setContextOp(ctx, togq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{typeofgoods.Label}
	default:
		return nil, &NotSingularError{typeofgoods.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (togq *TypeOfGoodsQuery) OnlyX(ctx context.Context) *TypeOfGoods {
	node, err := togq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TypeOfGoods ID in the query.
// Returns a *NotSingularError when more than one TypeOfGoods ID is found.
// Returns a *NotFoundError when no entities are found.
func (togq *TypeOfGoodsQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = togq.Limit(2).IDs(setContextOp(ctx, togq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{typeofgoods.Label}
	default:
		err = &NotSingularError{typeofgoods.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (togq *TypeOfGoodsQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := togq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TypeOfGoodsSlice.
func (togq *TypeOfGoodsQuery) All(ctx context.Context) ([]*TypeOfGoods, error) {
	ctx = setContextOp(ctx, togq.ctx, "All")
	if err := togq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*TypeOfGoods, *TypeOfGoodsQuery]()
	return withInterceptors[[]*TypeOfGoods](ctx, togq, qr, togq.inters)
}

// AllX is like All, but panics if an error occurs.
func (togq *TypeOfGoodsQuery) AllX(ctx context.Context) []*TypeOfGoods {
	nodes, err := togq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TypeOfGoods IDs.
func (togq *TypeOfGoodsQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	ctx = setContextOp(ctx, togq.ctx, "IDs")
	if err := togq.Select(typeofgoods.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (togq *TypeOfGoodsQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := togq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (togq *TypeOfGoodsQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, togq.ctx, "Count")
	if err := togq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, togq, querierCount[*TypeOfGoodsQuery](), togq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (togq *TypeOfGoodsQuery) CountX(ctx context.Context) int {
	count, err := togq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (togq *TypeOfGoodsQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, togq.ctx, "Exist")
	switch _, err := togq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (togq *TypeOfGoodsQuery) ExistX(ctx context.Context) bool {
	exist, err := togq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TypeOfGoodsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (togq *TypeOfGoodsQuery) Clone() *TypeOfGoodsQuery {
	if togq == nil {
		return nil
	}
	return &TypeOfGoodsQuery{
		config:     togq.config,
		ctx:        togq.ctx.Clone(),
		order:      append([]OrderFunc{}, togq.order...),
		inters:     append([]Interceptor{}, togq.inters...),
		predicates: append([]predicate.TypeOfGoods{}, togq.predicates...),
		withGoods:  togq.withGoods.Clone(),
		// clone intermediate query.
		sql:  togq.sql.Clone(),
		path: togq.path,
	}
}

// WithGoods tells the query-builder to eager-load the nodes that are connected to
// the "goods" edge. The optional arguments are used to configure the query builder of the edge.
func (togq *TypeOfGoodsQuery) WithGoods(opts ...func(*GoodsQuery)) *TypeOfGoodsQuery {
	query := (&GoodsClient{config: togq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	togq.withGoods = query
	return togq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TypeOfGoods.Query().
//		GroupBy(typeofgoods.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (togq *TypeOfGoodsQuery) GroupBy(field string, fields ...string) *TypeOfGoodsGroupBy {
	togq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &TypeOfGoodsGroupBy{build: togq}
	grbuild.flds = &togq.ctx.Fields
	grbuild.label = typeofgoods.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.TypeOfGoods.Query().
//		Select(typeofgoods.FieldCreateTime).
//		Scan(ctx, &v)
func (togq *TypeOfGoodsQuery) Select(fields ...string) *TypeOfGoodsSelect {
	togq.ctx.Fields = append(togq.ctx.Fields, fields...)
	sbuild := &TypeOfGoodsSelect{TypeOfGoodsQuery: togq}
	sbuild.label = typeofgoods.Label
	sbuild.flds, sbuild.scan = &togq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TypeOfGoodsSelect configured with the given aggregations.
func (togq *TypeOfGoodsQuery) Aggregate(fns ...AggregateFunc) *TypeOfGoodsSelect {
	return togq.Select().Aggregate(fns...)
}

func (togq *TypeOfGoodsQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range togq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, togq); err != nil {
				return err
			}
		}
	}
	for _, f := range togq.ctx.Fields {
		if !typeofgoods.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if togq.path != nil {
		prev, err := togq.path(ctx)
		if err != nil {
			return err
		}
		togq.sql = prev
	}
	return nil
}

func (togq *TypeOfGoodsQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*TypeOfGoods, error) {
	var (
		nodes       = []*TypeOfGoods{}
		withFKs     = togq.withFKs
		_spec       = togq.querySpec()
		loadedTypes = [1]bool{
			togq.withGoods != nil,
		}
	)
	if togq.withGoods != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, typeofgoods.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*TypeOfGoods).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &TypeOfGoods{config: togq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, togq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := togq.withGoods; query != nil {
		if err := togq.loadGoods(ctx, query, nodes, nil,
			func(n *TypeOfGoods, e *Goods) { n.Edges.Goods = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (togq *TypeOfGoodsQuery) loadGoods(ctx context.Context, query *GoodsQuery, nodes []*TypeOfGoods, init func(*TypeOfGoods), assign func(*TypeOfGoods, *Goods)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*TypeOfGoods)
	for i := range nodes {
		if nodes[i].goods_type_of_goods == nil {
			continue
		}
		fk := *nodes[i].goods_type_of_goods
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(goods.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "goods_type_of_goods" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (togq *TypeOfGoodsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := togq.querySpec()
	_spec.Node.Columns = togq.ctx.Fields
	if len(togq.ctx.Fields) > 0 {
		_spec.Unique = togq.ctx.Unique != nil && *togq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, togq.driver, _spec)
}

func (togq *TypeOfGoodsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   typeofgoods.Table,
			Columns: typeofgoods.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: typeofgoods.FieldID,
			},
		},
		From:   togq.sql,
		Unique: true,
	}
	if unique := togq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := togq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, typeofgoods.FieldID)
		for i := range fields {
			if fields[i] != typeofgoods.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := togq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := togq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := togq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := togq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (togq *TypeOfGoodsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(togq.driver.Dialect())
	t1 := builder.Table(typeofgoods.Table)
	columns := togq.ctx.Fields
	if len(columns) == 0 {
		columns = typeofgoods.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if togq.sql != nil {
		selector = togq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if togq.ctx.Unique != nil && *togq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range togq.predicates {
		p(selector)
	}
	for _, p := range togq.order {
		p(selector)
	}
	if offset := togq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := togq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TypeOfGoodsGroupBy is the group-by builder for TypeOfGoods entities.
type TypeOfGoodsGroupBy struct {
	selector
	build *TypeOfGoodsQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (toggb *TypeOfGoodsGroupBy) Aggregate(fns ...AggregateFunc) *TypeOfGoodsGroupBy {
	toggb.fns = append(toggb.fns, fns...)
	return toggb
}

// Scan applies the selector query and scans the result into the given value.
func (toggb *TypeOfGoodsGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, toggb.build.ctx, "GroupBy")
	if err := toggb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TypeOfGoodsQuery, *TypeOfGoodsGroupBy](ctx, toggb.build, toggb, toggb.build.inters, v)
}

func (toggb *TypeOfGoodsGroupBy) sqlScan(ctx context.Context, root *TypeOfGoodsQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(toggb.fns))
	for _, fn := range toggb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*toggb.flds)+len(toggb.fns))
		for _, f := range *toggb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*toggb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := toggb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TypeOfGoodsSelect is the builder for selecting fields of TypeOfGoods entities.
type TypeOfGoodsSelect struct {
	*TypeOfGoodsQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (togs *TypeOfGoodsSelect) Aggregate(fns ...AggregateFunc) *TypeOfGoodsSelect {
	togs.fns = append(togs.fns, fns...)
	return togs
}

// Scan applies the selector query and scans the result into the given value.
func (togs *TypeOfGoodsSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, togs.ctx, "Select")
	if err := togs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TypeOfGoodsQuery, *TypeOfGoodsSelect](ctx, togs.TypeOfGoodsQuery, togs, togs.inters, v)
}

func (togs *TypeOfGoodsSelect) sqlScan(ctx context.Context, root *TypeOfGoodsQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(togs.fns))
	for _, fn := range togs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*togs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := togs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
