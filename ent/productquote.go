// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Hyeu249/noname-ent-schema/ent/goods"
	"github.com/Hyeu249/noname-ent-schema/ent/imageofuser"
	"github.com/Hyeu249/noname-ent-schema/ent/productquote"
	"github.com/Hyeu249/noname-ent-schema/ent/user"
	"github.com/google/uuid"
)

// ProductQuote is the model entity for the ProductQuote schema.
type ProductQuote struct {
	config `json:"-"`
	// ID of the ent.
	// UUID of Product Quote (UUID Báo giá mặt hàng)
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Price of Goods (Giá của mặt hàng)
	Price int `json:"price,omitempty"`
	// is product quote actived (Liệu báo giá mặt hàng được kích hoạt?)
	IsActive bool `json:"is_active,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductQuoteQuery when eager-loading is set.
	Edges                       ProductQuoteEdges `json:"edges"`
	product_quote_user          *uuid.UUID
	product_quote_goods         *uuid.UUID
	product_quote_image_of_user *uuid.UUID
}

// ProductQuoteEdges holds the relations/edges for other nodes in the graph.
type ProductQuoteEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Goods holds the value of the goods edge.
	Goods *Goods `json:"goods,omitempty"`
	// ImageOfUser holds the value of the image_of_user edge.
	ImageOfUser *ImageOfUser `json:"image_of_user,omitempty"`
	// ItemHasOwner holds the value of the item_has_owner edge.
	ItemHasOwner []*ItemHasOwner `json:"item_has_owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductQuoteEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// GoodsOrErr returns the Goods value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductQuoteEdges) GoodsOrErr() (*Goods, error) {
	if e.loadedTypes[1] {
		if e.Goods == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: goods.Label}
		}
		return e.Goods, nil
	}
	return nil, &NotLoadedError{edge: "goods"}
}

// ImageOfUserOrErr returns the ImageOfUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductQuoteEdges) ImageOfUserOrErr() (*ImageOfUser, error) {
	if e.loadedTypes[2] {
		if e.ImageOfUser == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: imageofuser.Label}
		}
		return e.ImageOfUser, nil
	}
	return nil, &NotLoadedError{edge: "image_of_user"}
}

// ItemHasOwnerOrErr returns the ItemHasOwner value or an error if the edge
// was not loaded in eager-loading.
func (e ProductQuoteEdges) ItemHasOwnerOrErr() ([]*ItemHasOwner, error) {
	if e.loadedTypes[3] {
		return e.ItemHasOwner, nil
	}
	return nil, &NotLoadedError{edge: "item_has_owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProductQuote) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case productquote.FieldIsActive:
			values[i] = new(sql.NullBool)
		case productquote.FieldPrice:
			values[i] = new(sql.NullInt64)
		case productquote.FieldCreateTime, productquote.FieldUpdateTime, productquote.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case productquote.FieldID:
			values[i] = new(uuid.UUID)
		case productquote.ForeignKeys[0]: // product_quote_user
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case productquote.ForeignKeys[1]: // product_quote_goods
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case productquote.ForeignKeys[2]: // product_quote_image_of_user
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type ProductQuote", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProductQuote fields.
func (pq *ProductQuote) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case productquote.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pq.ID = *value
			}
		case productquote.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				pq.CreateTime = value.Time
			}
		case productquote.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				pq.UpdateTime = value.Time
			}
		case productquote.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pq.DeletedAt = new(time.Time)
				*pq.DeletedAt = value.Time
			}
		case productquote.FieldPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				pq.Price = int(value.Int64)
			}
		case productquote.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				pq.IsActive = value.Bool
			}
		case productquote.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field product_quote_user", values[i])
			} else if value.Valid {
				pq.product_quote_user = new(uuid.UUID)
				*pq.product_quote_user = *value.S.(*uuid.UUID)
			}
		case productquote.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field product_quote_goods", values[i])
			} else if value.Valid {
				pq.product_quote_goods = new(uuid.UUID)
				*pq.product_quote_goods = *value.S.(*uuid.UUID)
			}
		case productquote.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field product_quote_image_of_user", values[i])
			} else if value.Valid {
				pq.product_quote_image_of_user = new(uuid.UUID)
				*pq.product_quote_image_of_user = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the ProductQuote entity.
func (pq *ProductQuote) QueryUser() *UserQuery {
	return NewProductQuoteClient(pq.config).QueryUser(pq)
}

// QueryGoods queries the "goods" edge of the ProductQuote entity.
func (pq *ProductQuote) QueryGoods() *GoodsQuery {
	return NewProductQuoteClient(pq.config).QueryGoods(pq)
}

// QueryImageOfUser queries the "image_of_user" edge of the ProductQuote entity.
func (pq *ProductQuote) QueryImageOfUser() *ImageOfUserQuery {
	return NewProductQuoteClient(pq.config).QueryImageOfUser(pq)
}

// QueryItemHasOwner queries the "item_has_owner" edge of the ProductQuote entity.
func (pq *ProductQuote) QueryItemHasOwner() *ItemHasOwnerQuery {
	return NewProductQuoteClient(pq.config).QueryItemHasOwner(pq)
}

// Update returns a builder for updating this ProductQuote.
// Note that you need to call ProductQuote.Unwrap() before calling this method if this ProductQuote
// was returned from a transaction, and the transaction was committed or rolled back.
func (pq *ProductQuote) Update() *ProductQuoteUpdateOne {
	return NewProductQuoteClient(pq.config).UpdateOne(pq)
}

// Unwrap unwraps the ProductQuote entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pq *ProductQuote) Unwrap() *ProductQuote {
	_tx, ok := pq.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProductQuote is not a transactional entity")
	}
	pq.config.driver = _tx.drv
	return pq
}

// String implements the fmt.Stringer.
func (pq *ProductQuote) String() string {
	var builder strings.Builder
	builder.WriteString("ProductQuote(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pq.ID))
	builder.WriteString("create_time=")
	builder.WriteString(pq.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(pq.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := pq.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", pq.Price))
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", pq.IsActive))
	builder.WriteByte(')')
	return builder.String()
}

// ProductQuotes is a parsable slice of ProductQuote.
type ProductQuotes []*ProductQuote

func (pq ProductQuotes) config(cfg config) {
	for _i := range pq {
		pq[_i].config = cfg
	}
}
