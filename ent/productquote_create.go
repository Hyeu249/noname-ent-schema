// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Hyeu249/noname-ent-schema/ent/goods"
	"github.com/Hyeu249/noname-ent-schema/ent/imageofuser"
	"github.com/Hyeu249/noname-ent-schema/ent/itemhasowner"
	"github.com/Hyeu249/noname-ent-schema/ent/productquote"
	"github.com/Hyeu249/noname-ent-schema/ent/user"
	"github.com/google/uuid"
)

// ProductQuoteCreate is the builder for creating a ProductQuote entity.
type ProductQuoteCreate struct {
	config
	mutation *ProductQuoteMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (pqc *ProductQuoteCreate) SetCreateTime(t time.Time) *ProductQuoteCreate {
	pqc.mutation.SetCreateTime(t)
	return pqc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (pqc *ProductQuoteCreate) SetNillableCreateTime(t *time.Time) *ProductQuoteCreate {
	if t != nil {
		pqc.SetCreateTime(*t)
	}
	return pqc
}

// SetUpdateTime sets the "update_time" field.
func (pqc *ProductQuoteCreate) SetUpdateTime(t time.Time) *ProductQuoteCreate {
	pqc.mutation.SetUpdateTime(t)
	return pqc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (pqc *ProductQuoteCreate) SetNillableUpdateTime(t *time.Time) *ProductQuoteCreate {
	if t != nil {
		pqc.SetUpdateTime(*t)
	}
	return pqc
}

// SetDeletedAt sets the "deleted_at" field.
func (pqc *ProductQuoteCreate) SetDeletedAt(t time.Time) *ProductQuoteCreate {
	pqc.mutation.SetDeletedAt(t)
	return pqc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pqc *ProductQuoteCreate) SetNillableDeletedAt(t *time.Time) *ProductQuoteCreate {
	if t != nil {
		pqc.SetDeletedAt(*t)
	}
	return pqc
}

// SetPrice sets the "price" field.
func (pqc *ProductQuoteCreate) SetPrice(i int) *ProductQuoteCreate {
	pqc.mutation.SetPrice(i)
	return pqc
}

// SetIsActive sets the "is_active" field.
func (pqc *ProductQuoteCreate) SetIsActive(b bool) *ProductQuoteCreate {
	pqc.mutation.SetIsActive(b)
	return pqc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (pqc *ProductQuoteCreate) SetNillableIsActive(b *bool) *ProductQuoteCreate {
	if b != nil {
		pqc.SetIsActive(*b)
	}
	return pqc
}

// SetID sets the "id" field.
func (pqc *ProductQuoteCreate) SetID(u uuid.UUID) *ProductQuoteCreate {
	pqc.mutation.SetID(u)
	return pqc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pqc *ProductQuoteCreate) SetNillableID(u *uuid.UUID) *ProductQuoteCreate {
	if u != nil {
		pqc.SetID(*u)
	}
	return pqc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (pqc *ProductQuoteCreate) SetUserID(id uuid.UUID) *ProductQuoteCreate {
	pqc.mutation.SetUserID(id)
	return pqc
}

// SetUser sets the "user" edge to the User entity.
func (pqc *ProductQuoteCreate) SetUser(u *User) *ProductQuoteCreate {
	return pqc.SetUserID(u.ID)
}

// SetGoodsID sets the "goods" edge to the Goods entity by ID.
func (pqc *ProductQuoteCreate) SetGoodsID(id uuid.UUID) *ProductQuoteCreate {
	pqc.mutation.SetGoodsID(id)
	return pqc
}

// SetGoods sets the "goods" edge to the Goods entity.
func (pqc *ProductQuoteCreate) SetGoods(g *Goods) *ProductQuoteCreate {
	return pqc.SetGoodsID(g.ID)
}

// SetImageOfUserID sets the "image_of_user" edge to the ImageOfUser entity by ID.
func (pqc *ProductQuoteCreate) SetImageOfUserID(id uuid.UUID) *ProductQuoteCreate {
	pqc.mutation.SetImageOfUserID(id)
	return pqc
}

// SetImageOfUser sets the "image_of_user" edge to the ImageOfUser entity.
func (pqc *ProductQuoteCreate) SetImageOfUser(i *ImageOfUser) *ProductQuoteCreate {
	return pqc.SetImageOfUserID(i.ID)
}

// AddItemHasOwnerIDs adds the "item_has_owner" edge to the ItemHasOwner entity by IDs.
func (pqc *ProductQuoteCreate) AddItemHasOwnerIDs(ids ...uuid.UUID) *ProductQuoteCreate {
	pqc.mutation.AddItemHasOwnerIDs(ids...)
	return pqc
}

// AddItemHasOwner adds the "item_has_owner" edges to the ItemHasOwner entity.
func (pqc *ProductQuoteCreate) AddItemHasOwner(i ...*ItemHasOwner) *ProductQuoteCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return pqc.AddItemHasOwnerIDs(ids...)
}

// Mutation returns the ProductQuoteMutation object of the builder.
func (pqc *ProductQuoteCreate) Mutation() *ProductQuoteMutation {
	return pqc.mutation
}

// Save creates the ProductQuote in the database.
func (pqc *ProductQuoteCreate) Save(ctx context.Context) (*ProductQuote, error) {
	pqc.defaults()
	return withHooks[*ProductQuote, ProductQuoteMutation](ctx, pqc.sqlSave, pqc.mutation, pqc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pqc *ProductQuoteCreate) SaveX(ctx context.Context) *ProductQuote {
	v, err := pqc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pqc *ProductQuoteCreate) Exec(ctx context.Context) error {
	_, err := pqc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pqc *ProductQuoteCreate) ExecX(ctx context.Context) {
	if err := pqc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pqc *ProductQuoteCreate) defaults() {
	if _, ok := pqc.mutation.CreateTime(); !ok {
		v := productquote.DefaultCreateTime()
		pqc.mutation.SetCreateTime(v)
	}
	if _, ok := pqc.mutation.UpdateTime(); !ok {
		v := productquote.DefaultUpdateTime()
		pqc.mutation.SetUpdateTime(v)
	}
	if _, ok := pqc.mutation.IsActive(); !ok {
		v := productquote.DefaultIsActive
		pqc.mutation.SetIsActive(v)
	}
	if _, ok := pqc.mutation.ID(); !ok {
		v := productquote.DefaultID()
		pqc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pqc *ProductQuoteCreate) check() error {
	if _, ok := pqc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "ProductQuote.create_time"`)}
	}
	if _, ok := pqc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "ProductQuote.update_time"`)}
	}
	if _, ok := pqc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "ProductQuote.price"`)}
	}
	if _, ok := pqc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "ProductQuote.is_active"`)}
	}
	if _, ok := pqc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "ProductQuote.user"`)}
	}
	if _, ok := pqc.mutation.GoodsID(); !ok {
		return &ValidationError{Name: "goods", err: errors.New(`ent: missing required edge "ProductQuote.goods"`)}
	}
	if _, ok := pqc.mutation.ImageOfUserID(); !ok {
		return &ValidationError{Name: "image_of_user", err: errors.New(`ent: missing required edge "ProductQuote.image_of_user"`)}
	}
	return nil
}

func (pqc *ProductQuoteCreate) sqlSave(ctx context.Context) (*ProductQuote, error) {
	if err := pqc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pqc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pqc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pqc.mutation.id = &_node.ID
	pqc.mutation.done = true
	return _node, nil
}

func (pqc *ProductQuoteCreate) createSpec() (*ProductQuote, *sqlgraph.CreateSpec) {
	var (
		_node = &ProductQuote{config: pqc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: productquote.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: productquote.FieldID,
			},
		}
	)
	if id, ok := pqc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pqc.mutation.CreateTime(); ok {
		_spec.SetField(productquote.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := pqc.mutation.UpdateTime(); ok {
		_spec.SetField(productquote.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := pqc.mutation.DeletedAt(); ok {
		_spec.SetField(productquote.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := pqc.mutation.Price(); ok {
		_spec.SetField(productquote.FieldPrice, field.TypeInt, value)
		_node.Price = value
	}
	if value, ok := pqc.mutation.IsActive(); ok {
		_spec.SetField(productquote.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if nodes := pqc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   productquote.UserTable,
			Columns: []string{productquote.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.product_quote_user = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pqc.mutation.GoodsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   productquote.GoodsTable,
			Columns: []string{productquote.GoodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: goods.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.product_quote_goods = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pqc.mutation.ImageOfUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   productquote.ImageOfUserTable,
			Columns: []string{productquote.ImageOfUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: imageofuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.product_quote_image_of_user = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pqc.mutation.ItemHasOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   productquote.ItemHasOwnerTable,
			Columns: []string{productquote.ItemHasOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: itemhasowner.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProductQuoteCreateBulk is the builder for creating many ProductQuote entities in bulk.
type ProductQuoteCreateBulk struct {
	config
	builders []*ProductQuoteCreate
}

// Save creates the ProductQuote entities in the database.
func (pqcb *ProductQuoteCreateBulk) Save(ctx context.Context) ([]*ProductQuote, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pqcb.builders))
	nodes := make([]*ProductQuote, len(pqcb.builders))
	mutators := make([]Mutator, len(pqcb.builders))
	for i := range pqcb.builders {
		func(i int, root context.Context) {
			builder := pqcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductQuoteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pqcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pqcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pqcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pqcb *ProductQuoteCreateBulk) SaveX(ctx context.Context) []*ProductQuote {
	v, err := pqcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pqcb *ProductQuoteCreateBulk) Exec(ctx context.Context) error {
	_, err := pqcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pqcb *ProductQuoteCreateBulk) ExecX(ctx context.Context) {
	if err := pqcb.Exec(ctx); err != nil {
		panic(err)
	}
}
