// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Hyeu249/noname-ent-schema/ent/user"
	"github.com/google/uuid"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	// UUID of invoice (UUID nguoi dung)
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Username
	Username string `json:"username,omitempty"`
	// Is user active?
	IsActive bool `json:"is_active,omitempty"`
	// Hashed password of user
	HashedPwd string `json:"hashed_pwd,omitempty"`
	// Is user a super user?
	IsSuperuser bool `json:"is_superuser,omitempty"`
	// Name of user (Ten nguoi dung)
	Name string `json:"name,omitempty"`
	// Email of user (sdt)
	Email string `json:"email,omitempty"`
	// Phone no. of user (sdt)
	Phone string `json:"phone,omitempty"`
	// Address of user (dia chi)
	Address string `json:"address,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges UserEdges `json:"edges"`
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// ImageOfUser holds the value of the image_of_user edge.
	ImageOfUser []*ImageOfUser `json:"image_of_user,omitempty"`
	// ProductQuote holds the value of the product_quote edge.
	ProductQuote []*ProductQuote `json:"product_quote,omitempty"`
	// ItemHasOwner holds the value of the item_has_owner edge.
	ItemHasOwner []*ItemHasOwner `json:"item_has_owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ImageOfUserOrErr returns the ImageOfUser value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ImageOfUserOrErr() ([]*ImageOfUser, error) {
	if e.loadedTypes[0] {
		return e.ImageOfUser, nil
	}
	return nil, &NotLoadedError{edge: "image_of_user"}
}

// ProductQuoteOrErr returns the ProductQuote value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ProductQuoteOrErr() ([]*ProductQuote, error) {
	if e.loadedTypes[1] {
		return e.ProductQuote, nil
	}
	return nil, &NotLoadedError{edge: "product_quote"}
}

// ItemHasOwnerOrErr returns the ItemHasOwner value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ItemHasOwnerOrErr() ([]*ItemHasOwner, error) {
	if e.loadedTypes[2] {
		return e.ItemHasOwner, nil
	}
	return nil, &NotLoadedError{edge: "item_has_owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldIsActive, user.FieldIsSuperuser:
			values[i] = new(sql.NullBool)
		case user.FieldUsername, user.FieldHashedPwd, user.FieldName, user.FieldEmail, user.FieldPhone, user.FieldAddress:
			values[i] = new(sql.NullString)
		case user.FieldCreateTime, user.FieldUpdateTime, user.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case user.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type User", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				u.ID = *value
			}
		case user.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				u.CreateTime = value.Time
			}
		case user.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				u.UpdateTime = value.Time
			}
		case user.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				u.DeletedAt = new(time.Time)
				*u.DeletedAt = value.Time
			}
		case user.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				u.Username = value.String
			}
		case user.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				u.IsActive = value.Bool
			}
		case user.FieldHashedPwd:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hashed_pwd", values[i])
			} else if value.Valid {
				u.HashedPwd = value.String
			}
		case user.FieldIsSuperuser:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_superuser", values[i])
			} else if value.Valid {
				u.IsSuperuser = value.Bool
			}
		case user.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				u.Name = value.String
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				u.Phone = value.String
			}
		case user.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				u.Address = value.String
			}
		}
	}
	return nil
}

// QueryImageOfUser queries the "image_of_user" edge of the User entity.
func (u *User) QueryImageOfUser() *ImageOfUserQuery {
	return NewUserClient(u.config).QueryImageOfUser(u)
}

// QueryProductQuote queries the "product_quote" edge of the User entity.
func (u *User) QueryProductQuote() *ProductQuoteQuery {
	return NewUserClient(u.config).QueryProductQuote(u)
}

// QueryItemHasOwner queries the "item_has_owner" edge of the User entity.
func (u *User) QueryItemHasOwner() *ItemHasOwnerQuery {
	return NewUserClient(u.config).QueryItemHasOwner(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("create_time=")
	builder.WriteString(u.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(u.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := u.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(u.Username)
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", u.IsActive))
	builder.WriteString(", ")
	builder.WriteString("hashed_pwd=")
	builder.WriteString(u.HashedPwd)
	builder.WriteString(", ")
	builder.WriteString("is_superuser=")
	builder.WriteString(fmt.Sprintf("%v", u.IsSuperuser))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(u.Name)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(u.Email)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(u.Phone)
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(u.Address)
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
