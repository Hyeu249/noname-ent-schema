// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Hyeu249/noname-ent-schema/ent/image"
	"github.com/Hyeu249/noname-ent-schema/ent/imageofuser"
	"github.com/google/uuid"
)

// Image is the model entity for the Image schema.
type Image struct {
	config `json:"-"`
	// ID of the ent.
	// UUID of image (UUID anh)
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Name of image (Ten anh)
	Name string `json:"name,omitempty"`
	// file extension of the upload file (incl. file extension)
	FileExtension string `json:"file_extension,omitempty"`
	// Location of the image. It can be a path/to/file or an URL.
	Location string `json:"location,omitempty"`
	// Description of image (Mo ta)
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ImageQuery when eager-loading is set.
	Edges               ImageEdges `json:"edges"`
	image_of_user_image *uuid.UUID
}

// ImageEdges holds the relations/edges for other nodes in the graph.
type ImageEdges struct {
	// ImageOfUser holds the value of the image_of_user edge.
	ImageOfUser *ImageOfUser `json:"image_of_user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ImageOfUserOrErr returns the ImageOfUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ImageEdges) ImageOfUserOrErr() (*ImageOfUser, error) {
	if e.loadedTypes[0] {
		if e.ImageOfUser == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: imageofuser.Label}
		}
		return e.ImageOfUser, nil
	}
	return nil, &NotLoadedError{edge: "image_of_user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Image) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case image.FieldName, image.FieldFileExtension, image.FieldLocation, image.FieldDescription:
			values[i] = new(sql.NullString)
		case image.FieldCreateTime, image.FieldUpdateTime, image.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case image.FieldID:
			values[i] = new(uuid.UUID)
		case image.ForeignKeys[0]: // image_of_user_image
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Image", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Image fields.
func (i *Image) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case image.FieldID:
			if value, ok := values[j].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[j])
			} else if value != nil {
				i.ID = *value
			}
		case image.FieldCreateTime:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[j])
			} else if value.Valid {
				i.CreateTime = value.Time
			}
		case image.FieldUpdateTime:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[j])
			} else if value.Valid {
				i.UpdateTime = value.Time
			}
		case image.FieldDeletedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[j])
			} else if value.Valid {
				i.DeletedAt = new(time.Time)
				*i.DeletedAt = value.Time
			}
		case image.FieldName:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[j])
			} else if value.Valid {
				i.Name = value.String
			}
		case image.FieldFileExtension:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_extension", values[j])
			} else if value.Valid {
				i.FileExtension = value.String
			}
		case image.FieldLocation:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[j])
			} else if value.Valid {
				i.Location = value.String
			}
		case image.FieldDescription:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[j])
			} else if value.Valid {
				i.Description = value.String
			}
		case image.ForeignKeys[0]:
			if value, ok := values[j].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field image_of_user_image", values[j])
			} else if value.Valid {
				i.image_of_user_image = new(uuid.UUID)
				*i.image_of_user_image = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryImageOfUser queries the "image_of_user" edge of the Image entity.
func (i *Image) QueryImageOfUser() *ImageOfUserQuery {
	return NewImageClient(i.config).QueryImageOfUser(i)
}

// Update returns a builder for updating this Image.
// Note that you need to call Image.Unwrap() before calling this method if this Image
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Image) Update() *ImageUpdateOne {
	return NewImageClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Image entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Image) Unwrap() *Image {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Image is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Image) String() string {
	var builder strings.Builder
	builder.WriteString("Image(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("create_time=")
	builder.WriteString(i.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(i.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := i.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(i.Name)
	builder.WriteString(", ")
	builder.WriteString("file_extension=")
	builder.WriteString(i.FileExtension)
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(i.Location)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(i.Description)
	builder.WriteByte(')')
	return builder.String()
}

// Images is a parsable slice of Image.
type Images []*Image

func (i Images) config(cfg config) {
	for _i := range i {
		i[_i].config = cfg
	}
}
