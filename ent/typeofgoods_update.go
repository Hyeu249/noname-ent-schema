// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Hyeu249/noname-ent-schema/ent/goods"
	"github.com/Hyeu249/noname-ent-schema/ent/predicate"
	"github.com/Hyeu249/noname-ent-schema/ent/typeofgoods"
	"github.com/google/uuid"
)

// TypeOfGoodsUpdate is the builder for updating TypeOfGoods entities.
type TypeOfGoodsUpdate struct {
	config
	hooks    []Hook
	mutation *TypeOfGoodsMutation
}

// Where appends a list predicates to the TypeOfGoodsUpdate builder.
func (togu *TypeOfGoodsUpdate) Where(ps ...predicate.TypeOfGoods) *TypeOfGoodsUpdate {
	togu.mutation.Where(ps...)
	return togu
}

// SetUpdateTime sets the "update_time" field.
func (togu *TypeOfGoodsUpdate) SetUpdateTime(t time.Time) *TypeOfGoodsUpdate {
	togu.mutation.SetUpdateTime(t)
	return togu
}

// SetDeletedAt sets the "deleted_at" field.
func (togu *TypeOfGoodsUpdate) SetDeletedAt(t time.Time) *TypeOfGoodsUpdate {
	togu.mutation.SetDeletedAt(t)
	return togu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (togu *TypeOfGoodsUpdate) SetNillableDeletedAt(t *time.Time) *TypeOfGoodsUpdate {
	if t != nil {
		togu.SetDeletedAt(*t)
	}
	return togu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (togu *TypeOfGoodsUpdate) ClearDeletedAt() *TypeOfGoodsUpdate {
	togu.mutation.ClearDeletedAt()
	return togu
}

// SetName sets the "name" field.
func (togu *TypeOfGoodsUpdate) SetName(s string) *TypeOfGoodsUpdate {
	togu.mutation.SetName(s)
	return togu
}

// SetType sets the "type" field.
func (togu *TypeOfGoodsUpdate) SetType(s string) *TypeOfGoodsUpdate {
	togu.mutation.SetType(s)
	return togu
}

// SetDescription sets the "description" field.
func (togu *TypeOfGoodsUpdate) SetDescription(s string) *TypeOfGoodsUpdate {
	togu.mutation.SetDescription(s)
	return togu
}

// SetGoodsID sets the "goods" edge to the Goods entity by ID.
func (togu *TypeOfGoodsUpdate) SetGoodsID(id uuid.UUID) *TypeOfGoodsUpdate {
	togu.mutation.SetGoodsID(id)
	return togu
}

// SetNillableGoodsID sets the "goods" edge to the Goods entity by ID if the given value is not nil.
func (togu *TypeOfGoodsUpdate) SetNillableGoodsID(id *uuid.UUID) *TypeOfGoodsUpdate {
	if id != nil {
		togu = togu.SetGoodsID(*id)
	}
	return togu
}

// SetGoods sets the "goods" edge to the Goods entity.
func (togu *TypeOfGoodsUpdate) SetGoods(g *Goods) *TypeOfGoodsUpdate {
	return togu.SetGoodsID(g.ID)
}

// Mutation returns the TypeOfGoodsMutation object of the builder.
func (togu *TypeOfGoodsUpdate) Mutation() *TypeOfGoodsMutation {
	return togu.mutation
}

// ClearGoods clears the "goods" edge to the Goods entity.
func (togu *TypeOfGoodsUpdate) ClearGoods() *TypeOfGoodsUpdate {
	togu.mutation.ClearGoods()
	return togu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (togu *TypeOfGoodsUpdate) Save(ctx context.Context) (int, error) {
	togu.defaults()
	return withHooks[int, TypeOfGoodsMutation](ctx, togu.sqlSave, togu.mutation, togu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (togu *TypeOfGoodsUpdate) SaveX(ctx context.Context) int {
	affected, err := togu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (togu *TypeOfGoodsUpdate) Exec(ctx context.Context) error {
	_, err := togu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (togu *TypeOfGoodsUpdate) ExecX(ctx context.Context) {
	if err := togu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (togu *TypeOfGoodsUpdate) defaults() {
	if _, ok := togu.mutation.UpdateTime(); !ok {
		v := typeofgoods.UpdateDefaultUpdateTime()
		togu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (togu *TypeOfGoodsUpdate) check() error {
	if v, ok := togu.mutation.Name(); ok {
		if err := typeofgoods.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "TypeOfGoods.name": %w`, err)}
		}
	}
	if v, ok := togu.mutation.GetType(); ok {
		if err := typeofgoods.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "TypeOfGoods.type": %w`, err)}
		}
	}
	return nil
}

func (togu *TypeOfGoodsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := togu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   typeofgoods.Table,
			Columns: typeofgoods.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: typeofgoods.FieldID,
			},
		},
	}
	if ps := togu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := togu.mutation.UpdateTime(); ok {
		_spec.SetField(typeofgoods.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := togu.mutation.DeletedAt(); ok {
		_spec.SetField(typeofgoods.FieldDeletedAt, field.TypeTime, value)
	}
	if togu.mutation.DeletedAtCleared() {
		_spec.ClearField(typeofgoods.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := togu.mutation.Name(); ok {
		_spec.SetField(typeofgoods.FieldName, field.TypeString, value)
	}
	if value, ok := togu.mutation.GetType(); ok {
		_spec.SetField(typeofgoods.FieldType, field.TypeString, value)
	}
	if value, ok := togu.mutation.Description(); ok {
		_spec.SetField(typeofgoods.FieldDescription, field.TypeString, value)
	}
	if togu.mutation.GoodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   typeofgoods.GoodsTable,
			Columns: []string{typeofgoods.GoodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: goods.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := togu.mutation.GoodsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   typeofgoods.GoodsTable,
			Columns: []string{typeofgoods.GoodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: goods.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, togu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{typeofgoods.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	togu.mutation.done = true
	return n, nil
}

// TypeOfGoodsUpdateOne is the builder for updating a single TypeOfGoods entity.
type TypeOfGoodsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TypeOfGoodsMutation
}

// SetUpdateTime sets the "update_time" field.
func (toguo *TypeOfGoodsUpdateOne) SetUpdateTime(t time.Time) *TypeOfGoodsUpdateOne {
	toguo.mutation.SetUpdateTime(t)
	return toguo
}

// SetDeletedAt sets the "deleted_at" field.
func (toguo *TypeOfGoodsUpdateOne) SetDeletedAt(t time.Time) *TypeOfGoodsUpdateOne {
	toguo.mutation.SetDeletedAt(t)
	return toguo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (toguo *TypeOfGoodsUpdateOne) SetNillableDeletedAt(t *time.Time) *TypeOfGoodsUpdateOne {
	if t != nil {
		toguo.SetDeletedAt(*t)
	}
	return toguo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (toguo *TypeOfGoodsUpdateOne) ClearDeletedAt() *TypeOfGoodsUpdateOne {
	toguo.mutation.ClearDeletedAt()
	return toguo
}

// SetName sets the "name" field.
func (toguo *TypeOfGoodsUpdateOne) SetName(s string) *TypeOfGoodsUpdateOne {
	toguo.mutation.SetName(s)
	return toguo
}

// SetType sets the "type" field.
func (toguo *TypeOfGoodsUpdateOne) SetType(s string) *TypeOfGoodsUpdateOne {
	toguo.mutation.SetType(s)
	return toguo
}

// SetDescription sets the "description" field.
func (toguo *TypeOfGoodsUpdateOne) SetDescription(s string) *TypeOfGoodsUpdateOne {
	toguo.mutation.SetDescription(s)
	return toguo
}

// SetGoodsID sets the "goods" edge to the Goods entity by ID.
func (toguo *TypeOfGoodsUpdateOne) SetGoodsID(id uuid.UUID) *TypeOfGoodsUpdateOne {
	toguo.mutation.SetGoodsID(id)
	return toguo
}

// SetNillableGoodsID sets the "goods" edge to the Goods entity by ID if the given value is not nil.
func (toguo *TypeOfGoodsUpdateOne) SetNillableGoodsID(id *uuid.UUID) *TypeOfGoodsUpdateOne {
	if id != nil {
		toguo = toguo.SetGoodsID(*id)
	}
	return toguo
}

// SetGoods sets the "goods" edge to the Goods entity.
func (toguo *TypeOfGoodsUpdateOne) SetGoods(g *Goods) *TypeOfGoodsUpdateOne {
	return toguo.SetGoodsID(g.ID)
}

// Mutation returns the TypeOfGoodsMutation object of the builder.
func (toguo *TypeOfGoodsUpdateOne) Mutation() *TypeOfGoodsMutation {
	return toguo.mutation
}

// ClearGoods clears the "goods" edge to the Goods entity.
func (toguo *TypeOfGoodsUpdateOne) ClearGoods() *TypeOfGoodsUpdateOne {
	toguo.mutation.ClearGoods()
	return toguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (toguo *TypeOfGoodsUpdateOne) Select(field string, fields ...string) *TypeOfGoodsUpdateOne {
	toguo.fields = append([]string{field}, fields...)
	return toguo
}

// Save executes the query and returns the updated TypeOfGoods entity.
func (toguo *TypeOfGoodsUpdateOne) Save(ctx context.Context) (*TypeOfGoods, error) {
	toguo.defaults()
	return withHooks[*TypeOfGoods, TypeOfGoodsMutation](ctx, toguo.sqlSave, toguo.mutation, toguo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (toguo *TypeOfGoodsUpdateOne) SaveX(ctx context.Context) *TypeOfGoods {
	node, err := toguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (toguo *TypeOfGoodsUpdateOne) Exec(ctx context.Context) error {
	_, err := toguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (toguo *TypeOfGoodsUpdateOne) ExecX(ctx context.Context) {
	if err := toguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (toguo *TypeOfGoodsUpdateOne) defaults() {
	if _, ok := toguo.mutation.UpdateTime(); !ok {
		v := typeofgoods.UpdateDefaultUpdateTime()
		toguo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (toguo *TypeOfGoodsUpdateOne) check() error {
	if v, ok := toguo.mutation.Name(); ok {
		if err := typeofgoods.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "TypeOfGoods.name": %w`, err)}
		}
	}
	if v, ok := toguo.mutation.GetType(); ok {
		if err := typeofgoods.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "TypeOfGoods.type": %w`, err)}
		}
	}
	return nil
}

func (toguo *TypeOfGoodsUpdateOne) sqlSave(ctx context.Context) (_node *TypeOfGoods, err error) {
	if err := toguo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   typeofgoods.Table,
			Columns: typeofgoods.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: typeofgoods.FieldID,
			},
		},
	}
	id, ok := toguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TypeOfGoods.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := toguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, typeofgoods.FieldID)
		for _, f := range fields {
			if !typeofgoods.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != typeofgoods.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := toguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := toguo.mutation.UpdateTime(); ok {
		_spec.SetField(typeofgoods.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := toguo.mutation.DeletedAt(); ok {
		_spec.SetField(typeofgoods.FieldDeletedAt, field.TypeTime, value)
	}
	if toguo.mutation.DeletedAtCleared() {
		_spec.ClearField(typeofgoods.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := toguo.mutation.Name(); ok {
		_spec.SetField(typeofgoods.FieldName, field.TypeString, value)
	}
	if value, ok := toguo.mutation.GetType(); ok {
		_spec.SetField(typeofgoods.FieldType, field.TypeString, value)
	}
	if value, ok := toguo.mutation.Description(); ok {
		_spec.SetField(typeofgoods.FieldDescription, field.TypeString, value)
	}
	if toguo.mutation.GoodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   typeofgoods.GoodsTable,
			Columns: []string{typeofgoods.GoodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: goods.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := toguo.mutation.GoodsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   typeofgoods.GoodsTable,
			Columns: []string{typeofgoods.GoodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: goods.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TypeOfGoods{config: toguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, toguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{typeofgoods.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	toguo.mutation.done = true
	return _node, nil
}
